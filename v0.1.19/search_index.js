var documenterSearchIndex = {"docs":
[{"location":"exemples/fitting_sklar/#Fitting-compound-distributions","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"","category":"section"},{"location":"exemples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"Through the SklarDist interface, there is the possiiblity to fit directly distributions that are constructed from a copula and some marginals:","category":"page"},{"location":"exemples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"using Copulas\nusing Distributions\n\n# Let's sample some datas:\nX₁ = LogNormal()\nX₂ = Pareto()\nX₃ = Gamma()\nX₄ = Normal()\nC = SurvivalCopula(FrankCopula(4,7),(2,4))\nD = SklarDist(C,(X₁,X₂,X₃,X₄))\ndata = rand(D,1000)\n\n# The fit function uses a type as its first argument that describes the structure of the model : \nMyCop = SurvivalCopula{4,ClaytonCopula,(2,4)}\nMyMargs = Tuple{LogNormal,Pareto,Gamma,Normal}\nMyD = SklarDist{MyCop, MyMargs}\nfitted_model = fit(MyD,data)\n\n# Another posisbility is to use an empirical copula and only fit the marginals: \nother_fitted_model = fit(SklarDist{EmpiricalCopula,MyMargs},data)","category":"page"},{"location":"exemples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"This simple interface leverages indeed the fit functon from Distributions.jl. From their documentation, this function is not supposed to use a particular method but to fit \"dirt and quick\" some distributions. ","category":"page"},{"location":"exemples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"So you have to be carefull : the fit method might not be the same for different copulas or different marginals. For exemples, the archimedean copulas are fitted through an inversion of the kendall tau function, while the gaussian copula is fitted by maximum likelyhood. ","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"H. Joe. Multivariate Models and Multivariate Dependence Concepts (CRC press, 1997).\n\n\n\nU. Cherubini, E. Luciano and W. Vecchiato. Copula Methods in Finance (John Wiley & Sons, 2004).\n\n\n\nR. B. Nelsen. An Introduction to Copulas. 2nd ed Edition, Springer Series in Statistics (Springer, New York, 2006).\n\n\n\nH. Joe. Dependence Modeling with Copulas (CRC press, 2014).\n\n\n\nJ.-F. Mai, M. Scherer and C. Czado. Simulating Copulas: Stochastic Models, Sampling Algorithms, and Applications. 2nd edition Edition, Vol. 6 of Series in Quantitative Finance (World Scientific, New Jersey, 2017).\n\n\n\nF. Durante and C. Sempi. Principles of Copula Theory (Chapman and Hall/CRC, 2015).\n\n\n\nC. Czado. Analyzing Dependent Data with Vine Copulas: A Practical Guide With R. Vol. 222 of Lecture Notes in Statistics (Springer International Publishing, Cham, 2019).\n\n\n\nJ. Größer and O. Okhrin. Copulae: An Overview and Recent Developments. WIREs Computational Statistics (2021).\n\n\n\nA. Sklar. Fonctions de Repartition à n Dimension et Leurs Marges. Université Paris 8, 1–3 (1959).\n\n\n\nT. Lux and A. Papapantoleon. Improved Fréchet-Hoeffding Bounds on d-Copulas and Applications in Model-Free Finance, arXiv:1602.08894 math, q-fin.\n\n\n\nR. Kaas, J. Dhaene, D. Vyncke, M. J. Goovaerts and M. Denuit. A Simple Geometric Proof That Comonotonic Risks Have the Convex-Largest Sum. ASTIN Bulletin: The Journal of the IAA 32, 71–80 (2002).\n\n\n\nL. Hua and H. Joe. Multivariate Dependence Modeling Based on Comonotonic Factors. Journal of Multivariate Analysis 155, 317–333 (2017).\n\n\n\nG. Frahm, M. Junker and A. Szimayer. Elliptical Copulas: Applicability and Limitations. Statistics & Probability Letters 63, 275–286 (2003).\n\n\n\nE. Gómez, M. A. Gómez-villegas and J. M. Marín. A Survey on Continuous Elliptical Vector Distributions. Revista Matemática Complutense 16, 345–361 (2003).\n\n\n\nM.-P. Côté and C. Genest. Dependence in a Background Risk Model. Journal of Multivariate Analysis 172, 28–46 (2019).\n\n\n\nA. Derumigny and J.-D. Fermanian. Identifiability and Estimation of Meta-Elliptical Copula Generators. Journal of Multivariate Analysis, 104962 (2022).\n\n\n\nA. J. McNeil and J. Nešlehová. Multivariate Archimedean Copulas, d -Monotone Functions and L1 -Norm Symmetric Distributions. The Annals of Statistics 37, 3059–3097 (2009).\n\n\n\nA. J. McNeil. Sampling Nested Archimedean Copulas. Journal of Statistical Computation and Simulation 78, 567–581 (2008).\n\n\n\nM. Hofert, M. Mächler and A. J. McNeil. Archimedean Copulas in High Dimensions: Estimators and Numerical Challenges Motivated by Financial Applications. Journal de la Société Française de Statistique 154, 25–63 (2013).\n\n\n\nM. Hofert. Sampling Nested Archimedean Copulas with Applications to CDO Pricing. Ph.D. Thesis, Universität Ulm (2010).\n\n\n\nM. Hofert and D. Pham. Densities of Nested Archimedean Copulas. Journal of Multivariate Analysis 118, 37–52 (2013).\n\n\n\nA. J. McNeil and J. Nešlehová. From Archimedean to Liouville Copulas. Journal of Multivariate Analysis 101, 1772–1790 (2010).\n\n\n\nH. Cossette, S.-P. Gadoury, E. Marceau and I. Mtalai. Hierarchical Archimedean Copulas through Multivariate Compound Distributions. Insurance: Mathematics and Economics 76, 1–13 (2017).\n\n\n\nH. Cossette, E. Marceau, I. Mtalai and D. Veilleux. Dependent Risk Models with Archimedean Copulas: A Computational Strategy Based on Common Mixtures and Applications. Insurance: Mathematics and Economics 78, 53–71 (2018).\n\n\n\nC. Genest, J. Nešlehová and J. Ziegel. Inference in Multivariate Archimedean Copula Models. TEST 20, 223–256 (2011).\n\n\n\nE. Di Bernardino and D. Rulliere. On Certain Transformations of Archimedean Copulas: Application to the Non-Parametric Estimation of Their Generators. Dependence Modeling 1, 1–36 (2013).\n\n\n\nE. Di Bernardino and D. Rullière. On an Asymmetric Extension of Multivariate Archimedean Copulas Based on Quadratic Form. Dependence Modeling 4 (2016).\n\n\n\nK. Cooray. Strictly Archimedean Copulas with Complete Association for Multivariate Dependence Based on the Clayton Family. Dependence Modeling 6, 1–18 (2018).\n\n\n\nJ. Spreeuw. Archimedean Copulas Derived from Utility Functions. Insurance: Mathematics and Economics 59, 235–242 (2014).\n\n\n\nW. Zhu, K. S. Tan and C.-W. Wang. Modeling Multicountry Longevity Risk With Mortality Dependence: A Lévy Subordinated Hierarchical Archimedean Copulas Approach: Modeling Multicountry Longevity Risk with Mortality Dependence. Journal of Risk and Insurance 84, 477–493 (2017).\n\n\n\nN. Uyttendaele. On the Estimation of Nested Archimedean Copulas: A Theoretical and an Experimental Comparison. Computational Statistics 33, 1047–1070 (2018).\n\n\n\nR. T. Steck. Time-Varying Hierarchical Archimedean Copulas Using Adaptively Simulated Critical Values. Ph.D. Thesis, Humboldt-Universität zu Berlin, Wirtschaftswissenschaftliche Fakultät (2015).\n\n\n\nJ. Górecki, M. Hofert and M. Holeňa. On Structure, Family and Parameter Estimation of Hierarchical Archimedean Copulas, arXiv:1611.09225 stat.\n\n\n\nJ. Górecki, M. Hofert and M. Holeňa. Kendall's Tau and Agglomerative Clustering for Structure Determination of Hierarchical Archimedean Copulas. Dependence Modeling 5, 75–87 (2017).\n\n\n\nH. Cossette, E. Marceau and I. Mtalai. Collective Risk Models with Hierarchical Archimedean Copulas. SSRN Electronic Journal (2018).\n\n\n\nD. Müller and C. Czado. Representing Sparse Gaussian DAGs as Sparse R-vines Allowing for Non-Gaussian Dependence. Journal of Computational and Graphical Statistics 27, 334–344 (2018).\n\n\n\nT. Nagler and C. Czado. Evading the Curse of Dimensionality in Nonparametric Density Estimation with Simplified Vine Copulas. Journal of Multivariate Analysis 151, 69–89 (2016).\n\n\n\nT. Nagler. Nonparametric Estimation in Simplified Vine Copula Models. Ph.D. Thesis, Technische Universität München (2018).\n\n\n\nP. Deheuvels. La Fonction de Dépendance Empirique et Ses Propriétés. Académie Royale de Belgique. Bulletin de la Classe des Sciences 65, 274–292 (1979).\n\n\n\nJ. Segers, M. Sibuya and H. Tsukahara. The Empirical Beta Copula. Journal of Multivariate Analysis 155, 35–51 (2017).\n\n\n\nA. Cuberos, E. Masiello and V. Maume-Deschamps. Copulas Checker-Type Approximations: Application to Quantiles Estimation of Sums of Dependent Random Variables. Communications in Statistics - Theory and Methods, 1–19 (2019).\n\n\n\nP. Mikusiński and M. D. Taylor. Some Approximations of N-Copulas. Metrika 72, 385–414 (2010).\n\n\n\nF. Durante, E. Foscolo, J. A. Rodríguez-Lallena and M. Úbeda-Flores. A Method for Constructing Higher-Dimensional Copulas. Statistics 46, 387–404 (2012).\n\n\n\nF. Durante, J. Fernández Sánchez and C. Sempi. Multivariate Patchwork Copulas: A Unified Approach with Applications to Partial Comonotonicity. Insurance: Mathematics and Economics 53, 897–905 (2013).\n\n\n\nF. Durante, J. Fernández-Sánchez, J. J. Quesada-Molina and M. Úbeda-Flores. Convergence Results for Patchwork Copulas. European Journal of Operational Research 247, 525–531 (2015).\n\n\n\nO. Laverny. Empirical and Non-Parametric Copula Models with the Cort R Package. Journal of Open Source Software 5, 2653 (2020).\n\n\n\nF. Durante, G. Puccetti, M. Scherer and S. Vanduffel. The Vine Philosopher. Dependence Modeling 5, 256–267 (2017).\n\n\n\nC. Czado, S. Jeske and M. Hofmann. Selection Strategies for Regular Vine Copulae. Journal de la Société Française de Statistique 154, 174–191 (2013).\n\n\n\nB. Gräler. Modelling Skewed Spatial Random Fields through the Spatial Vine Copula. Spatial Statistics 10, 87–102 (2014).\n\n\n\nC. Genest, J. Nešlehová and N. Ben Ghorbal. Estimators Based on Kendall's Tau in Multivariate Copula Models. Australian & New Zealand Journal of Statistics 53, 157–177 (2011).\n\n\n\nG. A. Fredricks and R. B. Nelsen. On the Relationship between Spearman's Rho and Kendall's Tau for Pairs of Continuous Random Variables. Journal of Statistical Planning and Inference 137, 2143–2150 (2007).\n\n\n\n","category":"page"},{"location":"references/","page":"References","title":"References","text":"F. Durante, G. Puccetti, M. Scherer and S. Vanduffel. The Vine Philosopher. Dependence Modeling 5, 256–267 (2017).\n\n\n\nM. Hofert and M. Mächler. A Graphical Goodness-of-Fit Test for Dependence Models in Higher Dimensions. Journal of Computational and Graphical Statistics 23, 700–716 (2014).\n\n\n\nE. Di Bernardino and D. Rullière. Distortions of Multivariate Distribution Functions and Associated Level Curves: Applications in Multivariate Risk Theory. Insurance: Mathematics and Economics 53, 190–205 (2013).\n\n\n\n","category":"page"},{"location":"elliptical/generalities/","page":"General Discussion","title":"General Discussion","text":"CurrentModule = Copulas","category":"page"},{"location":"elliptical/generalities/#General-Discussion","page":"General Discussion","title":"General Discussion","text":"","category":"section"},{"location":"elliptical/generalities/","page":"General Discussion","title":"General Discussion","text":"Details about the elliptical Copulas","category":"page"},{"location":"elliptical/generalities/","page":"General Discussion","title":"General Discussion","text":"explain how we could define a generic elliptical copulas, and methods that are related to them. ","category":"page"},{"location":"elliptical/generalities/","page":"General Discussion","title":"General Discussion","text":"EllipticalCopula","category":"page"},{"location":"elliptical/generalities/#Copulas.EllipticalCopula","page":"General Discussion","title":"Copulas.EllipticalCopula","text":"EllipticalCopula{d,MT}\n\nAbstract type.\n\n[The description of the API should be here...]\n\n\n\n\n\n","category":"type"},{"location":"exemples/turing/#Bayesian-inference-with-Turing.jl","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"","category":"section"},{"location":"exemples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"The compatibility with the broader Distributions.jl's API allows a lot of interactions with the broader eco-system. One of the firsts examples that we discovered was the possibility to do bayesian inference of model parameters with Turing.jl. ","category":"page"},{"location":"exemples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"Consider that we have a model with :","category":"page"},{"location":"exemples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"A given parametric dependence structure, say a Clayton Copula. \nA few given parametric marginals. ","category":"page"},{"location":"exemples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"Then we can use Turing's @addlogprob! to compute the loglikelyhood of our model and maximize it around th eparameters alongside the chain as folows: ","category":"page"},{"location":"exemples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"using Copulas\nusing Distributions\nusing Random\nusing Turing\nusing StatsPlots\n\nRandom.seed!(123)\ntrue_θ = 7\ntrue_θ₁ = 1\ntrue_θ₂ = 3\ntrue_θ₃ = 2\nD = SklarDist(ClaytonCopula(3,true_θ), (Exponential(true_θ₁), Pareto(true_θ₂), Exponential(true_θ₃)))\ndraws = rand(D, 200)\n\n@model function copula(X)\n    # Priors\n    θ  ~ TruncatedNormal(1.0, 1.0, -1/3, Inf)\n    θ₁ ~ TruncatedNormal(1.0, 1.0, 0, Inf)\n    θ₂ ~ TruncatedNormal(1.0, 1.0, 0, Inf)\n    θ₃ ~ TruncatedNormal(1.0, 1.0, 0, Inf)\n\n    # Build the parametric model\n    C = ClaytonCopula(3,θ)\n    X₁ = Exponential(θ₁)\n    X₂ = Pareto(θ₂)\n    X₃ = Exponential(θ₃)\n    D = SklarDist(C, (X₁, X₂, X₃))\n\n    # Compute the final loglikelyhood\n    Turing.Turing.@addlogprob! loglikelihood(D, X)\nend\n\nsampler = NUTS() # MH() works too\nchain = sample(copula(draws), sampler, MCMCThreads(), 100, 4)\nplot(chain)","category":"page"},{"location":"exemples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"This kind of model could be used to do a lot of stuff. here we use it for a parametric estimation of a sampling model, but it could be used for other things such as, e.g., a bayesian regression with an error structure given by a parmaetric copula.","category":"page"},{"location":"exemples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"Note that we truncated the θ parameter at -1/3 and not 0 as the ClaytonCopula can handle negative dependence structures. ","category":"page"},{"location":"sklar/","page":"Sklar's Theorem","title":"Sklar's Theorem","text":"CurrentModule = Copulas","category":"page"},{"location":"sklar/#Implementation","page":"Sklar's Theorem","title":"Implementation","text":"","category":"section"},{"location":"sklar/","page":"Sklar's Theorem","title":"Sklar's Theorem","text":"The Sklar Theorem allows to compute distributions, satisfying the Distriutions.jl API, thaty are \"compound\" with a given copula and given marginals. ","category":"page"},{"location":"sklar/","page":"Sklar's Theorem","title":"Sklar's Theorem","text":"SklarDist","category":"page"},{"location":"sklar/#Copulas.SklarDist","page":"Sklar's Theorem","title":"Copulas.SklarDist","text":"SklarDist{CT,TplMargins}\n\nFields:\n\nC::CT - The copula\nm::TplMargins - a Tuple representing the marginal distributions\n\nConstructor\n\nSklarDist(C,m)\n\nThis function allows to construct a random vector specified, through the Sklar Theorem, by its marginals and its copula separately. See Sklar's theorem. \n\nThe obtain random vector follows Distributions.jl's API and can be sampled, pdf and cdf can be evaluated, etc... We even provide a fit function. See the folowing exemple code : \n\nusing Copulas, Distributions, Random\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution\n\n# This generates a (3,1000)-sized dataset from the multivariate distribution D\nsimu = rand(D,1000)\n\n# While the following estimates the parameters of the model from a dataset: \nD̂ = fit(SklarDist{FrankCopula,Tuple{Gamma,Normal,LogNormal}}, simu)\n# Increase the number of observations to get a beter fit (or not?)  \n\n\n\n\n\n","category":"type"},{"location":"theoretical_background/#Copulas-and-dependence-structures","page":"Theoretical Background","title":"Copulas and dependence structures","text":"","category":"section"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"This section gives some general definitions and tools about dependence structures. Along this journey through the mathematical theory of copulas, we take the chance to introduce more specifically several topics that will be exploited in the following chapters. The interested reader can take a look at the standard books [1–4] or more recently [5–8] on the subject of copulas. We start by defining a few concepts about dependence structures and copulas.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Consider a real valued random vector bm X = left(X_1X_dright) Omega to mathbb R^d. The distribution of the random vector bm X can be characterized by its distribution function  F: ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"beginalign*\n  F(bm x) = mathbb Pleft(bm X le bm xright)\n  = mathbb Pleft(forall i in 1d X_i le x_iright)\nendalign*","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"For a function F to be the distribution function of some random vector, it should be d-increasing, right-continuous and left-limited.  For i in 1d, the random variables X_1X_d, called the marginals of the random vector, also have distribution functions denoted F_1F_d and defined by : ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"F_i(x_i) = F(+infty+inftyx_i+infty+infty)","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Note that the range mathrmRan(F) of a distribution function F, univariate or multivariate, is always contained in 01. When the random vector or random variable is absolutely continuous with respect to (w.r.t.) the Lebesgue measure restricted to its domain, the range is exactly 01. When the distribution is discrete with n atoms, the range is a finite set of n+1 values in 01.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"There is a fundamental functional link between the function F and its marginals F_1F_d. This link is expressed by the mean of *copulas. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (Copula) : A copula, usually denoted C, is the distribution function of a random vector with marginals that are all uniform on 01, i.e.C_i(u) = umathbb 1_u in 01 text for all i in 1d","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"At the grounds of the theory of copulas lies Sklar's Theorem [9], dating back from 1959.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Theorem (Sklar): For every random vector bm X, there exists a copula C such that forall bm xin mathbb R^d F(bm x) = C(F_1(x_1)F_d(x_d))The copula C is uniquely determined on mathrmRan(F_1) times  times mathrmRan(F_d), where mathrmRan(F_i) denotes the range of the function F_i. In particular, if all marginals are absolutely continuous, C is unique.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"This result allows to decompose the distribution of bm X into several components: the marginal distributions on one side, and the copula on the other side, which governs the dependence structure between the marginals. This object is central in our work, and therefore deserves a moment of attention. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Example (Independence): The function Pi  bm x mapsto prod_i=1^d x_i = bm x^bm 1is a copula, corresponding to independent random vectors.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Copulas are bounded functions","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Property (Fréchet-Hoeffding bounds [10]: For all bm x in 01^d, every copula C satisfies : langle bm 1 bm x - 1 + d^-1rangle_+ le C(bm x) le min bm xwhere y_+ = max(0y).","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Example (Fréchet-Hoeffding bounds [10]: The function M  bm x mapsto minbm x, called the upper Fréchet-Hoeffding bound, is a copula. The function W  bm x mapsto langle bm 1 bm x - 1 + d^-1rangle_+, called the lower Fréchet-Hoeffding bound, is on the other hand a copula only when d=2. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"The upper Fréchet-Hoeffding bound corresponds to the case of comonotone random vector: a random vector bm X is said to be comonotone, i.e., to have copula M, when each of its marginals can be written as a non-decreasing transformation of the same random variable (say with mathcal Uleft(01right) distribution). This is a simple but important dependence structure. See e.g.,[11, 12] on this particular copula.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Since copulas are distribution functions, like distribution functions of real-valued random variables and random vectors, there exists classical and useful parametric families of copulas. We refer to [3] for a more complete list of parametric constructions, we only present a few families here and the package contains a few more.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"The easiest families are the one derived from known families of random vectors, e.g., the elliptical family. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (Spherical and elliptical random vectors): A random vector bm X is said to be spherical if for all orthogonal matrix bm A in O_d(mathbb R), bm Abm X sim bm X. For every matrix bm B and vector bm c, the random vector bm B bm X + bm c is then said to be elliptical.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Spherical random vectors have several interesting properties. First, the shape of the distribution must be the same in every direction since it is stable by rotations. Moreover, their characteristic functions (c.f.) only depend on the norm of their arguments. Indeed, for any bm A in O_d(mathbb R), ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"phi(bm t) = mathbb Eleft(e^langle bm t bm X rangleright)= mathbb Eleft(e^langle bm t bm Abm X rangleright) = mathbb Eleft(e^langle bm Abm t bm X rangleright) = phi(bm Abm t)","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"We can therefore express this characteristic function as phi(bm t) = psi(lVert bm t rVert_2^2), where psi is a function that characterizes the spherical family, called the generator of the family. Any characteristic function that can be expressed as a function of the norm of its argument is the characteristic function of a spherical random vector, since lVert bm A bm t rVert_2 = lVert bm t rVert_2 for any orthogonal matrix bm A. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"This class contains the (multivariate) Normal and Student distributions, and it is easy to construct others if needed. This is a generalization of the family of Gaussian random vectors, and they benefit from several nice properties of the former, among which, particularly interesting, the stability by convolution. Indeed, convolutions correspond to product of characteristic functions, and","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"phi(bm t) = prod_i=1^n phi_i(bm t) = prod_i=1^n psi_i(lVert bm t rVert_2^2) = psi(lVert bm t rVert_2^2)","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"which is still a function of only the norm of bm t. To fix ideas, for Gaussian random vectors, psi(t) = e^-fract^22.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"However, when looking at the copula associated to these distributions, the obtained function has usually no better expression than ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"C = F circ (F_1^-1F_d^-1)","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"where F_i^-1 denotes the almost-inverse of F_i, that is: ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"forall u in 01F_i^-1(u) = infleftx  F_i(x) ge uright","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"and F_i is usually hard to express from the elliptical assumptions.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Moreover, the form of dependence structures that can be reached inside this class is restricted. The elliptical copulas are parametrized by the corresponding univariate spherical generator and a correlation matrix, which is a very simple structure. See also [13–15] for details on these copulas.  On the other hand, there exist performant estimators of high-dimensional covariance matrices, and a large theory is built on the elliptical assumption of high dimensional random vectors, see e.g., \\cite{elidan2013,friedman2010,muller2019} among others. See also [16] for a recent work on nonparametric estimation of the underlying univariate spherical distribution. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Another parametric class that is of interest is the class of Archimedean copulas. To define Archimedean copulas, we must take a look at their generators, which are unrelated to spherical generators, and must be d-monotone functions. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (d-monotony [17]): A function phi is said to be d-monotone if it has d-2 derivatives which satisfy (-1)^k phi^(k) ge 0 forall k in 1d-2, and if (-1)^d-2phi^(d-2) is a non-increasing and convex function.  A function that is d-monotone for all d is called completely monotone.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (Archimedean generator): A d-Archimedean generator is a d-monotone function phi mathbb R_+ to 01 such that phi(0) = 1 lim_xto+inftyphi(x) = 0.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Property (Archimedean copula): If phi is a d-Archimedean generator, then the function C(bm u) = phileft(sumlimits_i=1^d phi^-1(u_i)right)is a copula. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Property (Completely monotone generator): A generator is completely monotone if and only if it generates a copula in any dimension.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"The following generators each correspond to standard parametric copula families: ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"phi(t) =e^-t text generates  Pi\n.\nphi_theta(t) = left(1+tthetaright)^-theta^-1\ngenerates the mathrmClayton(theta) copula.\nphi_theta(t) = exp-t^theta^-1\ngenerates the mathrmGumbel(theta) copula.\nphi_theta(t) = -theta^-1lnleft(1+e^-t-theta-e^-tright)\ngenerates the mathrmFranck(theta) copula.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"[ We could include here a figure that represents dataset drawn from one or two classic archimedeans.]","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Archimedean copulas have a nice decomposition, called the Radial-simplex decomposition: ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Property (Radial-simplex decomposition [17, 18]: A d-variate random vector bm U following an Archimedean copula with generator phi can be decomposed into bm U = phi(bm S R)where bm S is uniform on the d-variate simplex and R is a non-negative random variable, independent form bm S, defined as the (inverse) Williamson d-transform of phi.  ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"See [17, 18] for the definition of the Williamson d-transform and its inverse. It is well-known that completely monotone generators are Laplace transforms of non-negative random variables. This gives rise to another decomposition:","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Property (Frailty decomposition [19]: When phi is completely monotone, it is the Laplace transform of a non-negative random variable W such thatbm U = phi(bm Y  W)where bm Y is a vector of independent and identically distributed (i.i.d.) exponential distributions.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"The two transformations are obviously linked, see [17] for details about this link. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Archimedean copulas have been widely used in the literature due to their nice decomposition properties and easy parametrization. The interested reader can refer to the extensive literature [20–26, 26–29] on Archimedean copulas, their nesting extensions, the link from their generators to a certain radial-simplex parametrization, and most importantly their estimation.  One major drawback of the Archimedean family is that these copulas have exchangeable marginals (i.e., C(bm u) = C(mathrmp(bm u)) for any permutation p(bm u) of u_1u_d): the dependence structure is symmetric, which might not be a wanted property. However, from the Radial-simplex expression, we can easily extrapolate a little and take for bm S a non-uniform distribution on the simplex. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (Liouville copulas [22]): If phi is a d-Archimedean generator with Williamson d-transform R and bm S follows a Dirichlet distribution on the simplex, independent from Rbm U = phi(bm S R)still has uniform marginals. The corresponding copula is called a Liouville copula.  ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Liouville's copulas share many properties with Archimedean copulas, but are not exchangeable anymore. This is an easy way to produce non-exchangeable dependence structures. See [15] for a practical use of this property.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Note that Dirichlet distributions are constructed as bm S = fracbm Glangle bm 1 bm Grangle, where bm G is a vector of independent Gamma distributions with unit scale (and potentially different shapes: taking all shapes equal yields the Archimedean case). ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Due to the rigidity of the structure of Elliptical, Archimedean and even Liouville copulas, these models are not well suited for high dimensional cases where the form and strength of dependency might be varying a lot between subsets of marginals. More advanced parametric constructions exist, such as Hierarchical Archimedean copulas [30–35], Vines copulas [36–38], etc. Usually, some kind of sparsity assumptions are needed when working in high-dimensional cases.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Through the statistical process leading to the estimation of copulas, one usually observes the data and information on the marginals scale and not on the copula scale. This discrepancy between the observed information and the modeled distribution must be taken into account. A key concept is that of pseudo-observations. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (Pseudo-observations): If bm x in mathbb R^Ntimes d is an N-sample of a d-variate real-valued random vector bm X, then the pseudo-observations are the normalized ranks of the marginals of bm x, defined as : bm u in mathbb 01^Ntimes d u_ij = fracmathrmRank(x_ijbm x_cdotj)N+1 = frac1N+1sum_k=1^N mathbb 1_x_kj le x_ijwhere mathrmRank(ybm x)  = sumlimits_x_i in bm x mathbb 1_x_i le y.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"From these pseudo-observations, an empirical copula is defined as follows:","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (Empirical Copula) [39]: The empirical distribution function of the normalized ranks,hatC_N(bm u) = frac1N sum_i=1^N mathbb 1_bm u_i le bm uis called the empirical copula function.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Theorem (Exhaustivity and consistency [39]): hatC_N is an exhaustive estimator of C, and moreover for any normalizing constants phi_N Nin mathbb N such that limlimits_N to infty phi_N sqrtN^-1ln ln N = 0, limlimits_Ntoinfty phi_N sup_bm u in 01^d lverthatC_N(bm u) - C(bm u) rvert = 0 text as","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"hatC_N","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"then converges (weakly) to C, the true copula of the random vector bm X, when the number of observations N goes to infinity. However, despite its name, hatC_N is not a copula since it does not have uniform marginals:","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"beginalign*\n  hatC_N(11y_j11) = frac1Nsum_i=1^N mathbb 1_u_ij le y_j\n  = frac1Nsum_i=1^N mathbb 1_mathrmRank(x_ijbm x_cdotj) le (N+1)y_j\n  = frac1Nsum_i=1^N mathbb 1_i le (N+1)y_j\n  = fraclfloor(N+1)y_jrfloorN neq y_j \nendalign*","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Thus, the empirical copula function is not a copula. An easy way to fix this problem is to smooth out the marginals with beta distribution functions: ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (Beta Copula [40]): Denoting F_nr(x) = sum_s=r^n binomns x^s(1-x)^n-s the distribution function of a mathrmBeta(rn+1-r) random variable, the function hatC_N^beta  bm x mapsto frac1N sum_i=1^N prodlimits_j=1^d F_n(N+1)u_ij(x_j)is a genuine copula, called the Beta copula. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Property (Proximity of hatC_N and hatC_N^beta [40]):suplimits_bm u in 01^d lvert hatC_N(bm u) - hatC_N^beta(bm u) rvert le dleft(sqrtfracln nn + sqrtfrac1n + frac1nright)","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"There are other nonparametric estimators of the copula function that are true copulas. Of interest to our work is the Checkerboard construction (see [41, 42]), detailed below.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"First, for any bm m in mathbb N^d, let leftB_bm ibm m bm i  bm mright be a partition of the unit hypercube defined by ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"B_bm i bm m = leftfracbm ibm m fracbm i+1bm mright","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Furthermore, for any copula C (or more generally distribution function F), we denote mu_C (resp mu_F) the associated measure.  For example, for the independence copula Pi, mu_Pi(A) = lambda(A cup bm 0 bm 1) where lambda is the Lebesgue measure.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (Empirical Checkerboard copulas [41]): Let bm m in mathbb N^d. The bm m-Checkerboard copula hatC_Nbm m, defined by hatC_Nbm m(bm x) = bm m^bm 1 sum_bm i  bm m mu_hatC_N(B_bm i bm m) mu_Pi(B_bm i bm m cap 0bm x)s a genuine copula as soon as m_1m_d all divide N.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Property (Consistency of hatC_Nbm m [41]): If all m_1m_d divide N, suplimits_bm u in 01^d lvert hatC_Nbm m(bm u) - C(bm u) rvert le fracd2m + mathcal O_mathbb Pleft(n^-frac12right)","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"This copula is called Checkerboard, as it fills the unit hypercube with hyperrectangles of same shapes B_bm i bm m, conditionally on which the distribution is uniform, and the mixing weights are the empirical frequencies of the hyperrectangles. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"It can be noted that there is no need for the hyperrectangles to be filled with a uniform distribution (mu_Pi), as soon as they are filled with copula measures and weighted according to the empirical measure in them (or to any other copula). The direct extension is then the more general patchwork copulas, whose construction is detailed below.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Denoting B_bm i bm m(bm x) = B_bm i bm m cap 0bm x, we have : ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"beginalign\n  m^dmu_Pi(B_bm i bm m cap 0bm x) = fracmu_Pi(B_bm i bm m cap 0bm x)mu_Pi(B_bm i bm m)\n  = fracmu_Pi(B_bm i bm m(bm x))mu_Pi(B_bm i bm m)\n  = mu_Pi(bm m B_bm i bm m(bm x))\nendalign","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"where we intend bm m bm a bm b =  bm m bm a bm m bm b (recall that products between vectors are componentwise).","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"This allows for an easy generalization in the framework of patchwork copulas: ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (Patchwork copulas [43–45]): Let bm m in mathbb N^d all divide N, and let mathcal C = C_bm i bm i  bm m be a given collection of copulas. The distribution functionhatC_Nbm m mathcal C(bm x) = sum_bm i  bm m mu_hatC_N(B_bm i bm m) mu_C_bm i(bm m B_bm i bm m(bm x))is a copula. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"In fact, replacing hatC_N by any copula in Definition \\ref{intro:def:patchwork} still yields a genuine copula, with no more conditions that all components of bm m divide N. The Checkerboard grids are practical in the sense that computations associated to a Checkerboard copula can be really fast: if the grid is large, the number of boxes is small, and otherwise if the grid is very refined, many boxes are probably empty. On the other hand, the grid is fixed a priori. There exists potential extensions to adaptative grids, see e.g. [46].","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Convergence results for this kind of copulas can be found in [45], with a slightly different parametrization. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"One more noticeable class of copulas are the Vines copulas. These distributions use a graph of conditional distributions to encode the distribution of the random vector. To define such a model, working with conditional densities, and given any ordered partition bm i_1bm i_p of 1d, we write ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"f(bm x) = f(x_bm i_1) prodlimits_j=1^p-1 f(x_bm i_j+1  x_bm i_j)","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Of course, the choice of the partition, of its order, and of the conditional models is left to the practitioner. The goal when dealing with such dependency graphs is to tailor the graph to reduce the error of approximation, which can be a tricky task. There exists simplifying assumptions that help with this matter, and we refer to [7, 37, 38, 47–49] for a deep dive into the vine theory, along with some nice results and extensions. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Although the copula is an object that summarizes completely the dependence structure of any random vector, it is an infinite dimensional object and the interpretation of its properties can be difficult when the dimension gets high. Therefore, the literature has come up with some quantifications of the dependence structure that might be used as univariate summaries, of course imperfect, of certain properties of the copula at hand. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"We now define measures of dependency level.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (Kendall's tau and Spearman's rho): For a copula C with a density c, we define:tau = 4 int C(bm u)  c(bm u) dbm u -1rho = 12 int C(bm u) dbm u -3","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Kendall's tau and Spearman's rho have values between -1 and 1, and are -1 in case of complete anticonomotony and 1 in case of comonotony. Moreover, they are 0 in case of independence. This is why we say that they measure the 'strength' of the dependency. They make more sense in the bivariate case than in other cases, and therefore we sometimes refer to the Kendall's matrix or the Spearman's matrix for the collection of bivariate coefficients associated to a multivariate copula. Many copula estimators are based on these coefficients, see e.g., [50, 51].","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"There are also tail coefficients: ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"Definition (Upper tail dependency): For a copula C, we define (when they exist):lambda = limlimits_u to 1 frac1 - 2u - C(uu)1- u in 01chi(u) = frac2 ln(1-u)ln(1-2u-C(uu)) -1chi = limlimits_u to 1 chi(u) in -11When lambda  0, we say that there is a strong upper tail dependency, and chi = 1. When lambda = 0, we say that there is no strong upper tail dependency, and if furthermore chi neq 0 we say that there is weak upper tail dependency.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"The graph of u to chi(u) over frac121 is an interesting tool to assess the existence and strength of the tail dependency. The same kind of tools can be constructed for the lower tail. ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"All these coefficients are useful to quantify the behavior of the dependence structure, both generally and in the extremes, and are therefore widely used in the literature either as verification tools to assess the quality of fits, or even as parameters. Many parametric copulas families have simple surjections, injections, or even bijections between these coefficients and their parametrizations, allowing matching procedures of estimation (a lot like moments matching algorithm for fitting standard random variables). ","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"There would have been many more things to say about dependence structures and copulas. This short literature review, however, seems enough to understand the matters of this package. We refer the interested reader to the numerous references.","category":"page"},{"location":"theoretical_background/","page":"Theoretical Background","title":"Theoretical Background","text":"H. Joe. Multivariate Models and Multivariate Dependence Concepts (CRC press, 1997).\n\n\n\nU. Cherubini, E. Luciano and W. Vecchiato. Copula Methods in Finance (John Wiley & Sons, 2004).\n\n\n\nR. B. Nelsen. An Introduction to Copulas. 2nd ed Edition, Springer Series in Statistics (Springer, New York, 2006).\n\n\n\nH. Joe. Dependence Modeling with Copulas (CRC press, 2014).\n\n\n\nJ.-F. Mai, M. Scherer and C. Czado. Simulating Copulas: Stochastic Models, Sampling Algorithms, and Applications. 2nd edition Edition, Vol. 6 of Series in Quantitative Finance (World Scientific, New Jersey, 2017).\n\n\n\nF. Durante and C. Sempi. Principles of Copula Theory (Chapman and Hall/CRC, 2015).\n\n\n\nC. Czado. Analyzing Dependent Data with Vine Copulas: A Practical Guide With R. Vol. 222 of Lecture Notes in Statistics (Springer International Publishing, Cham, 2019).\n\n\n\nJ. Größer and O. Okhrin. Copulae: An Overview and Recent Developments. WIREs Computational Statistics (2021).\n\n\n\nA. Sklar. Fonctions de Repartition à n Dimension et Leurs Marges. Université Paris 8, 1–3 (1959).\n\n\n\nT. Lux and A. Papapantoleon. Improved Fréchet-Hoeffding Bounds on d-Copulas and Applications in Model-Free Finance, arXiv:1602.08894 math, q-fin.\n\n\n\nR. Kaas, J. Dhaene, D. Vyncke, M. J. Goovaerts and M. Denuit. A Simple Geometric Proof That Comonotonic Risks Have the Convex-Largest Sum. ASTIN Bulletin: The Journal of the IAA 32, 71–80 (2002).\n\n\n\nL. Hua and H. Joe. Multivariate Dependence Modeling Based on Comonotonic Factors. Journal of Multivariate Analysis 155, 317–333 (2017).\n\n\n\nG. Frahm, M. Junker and A. Szimayer. Elliptical Copulas: Applicability and Limitations. Statistics & Probability Letters 63, 275–286 (2003).\n\n\n\nE. Gómez, M. A. Gómez-villegas and J. M. Marín. A Survey on Continuous Elliptical Vector Distributions. Revista Matemática Complutense 16, 345–361 (2003).\n\n\n\nM.-P. Côté and C. Genest. Dependence in a Background Risk Model. Journal of Multivariate Analysis 172, 28–46 (2019).\n\n\n\nA. Derumigny and J.-D. Fermanian. Identifiability and Estimation of Meta-Elliptical Copula Generators. Journal of Multivariate Analysis, 104962 (2022).\n\n\n\nA. J. McNeil and J. Nešlehová. Multivariate Archimedean Copulas, d -Monotone Functions and L1 -Norm Symmetric Distributions. The Annals of Statistics 37, 3059–3097 (2009).\n\n\n\nA. J. McNeil. Sampling Nested Archimedean Copulas. Journal of Statistical Computation and Simulation 78, 567–581 (2008).\n\n\n\nM. Hofert, M. Mächler and A. J. McNeil. Archimedean Copulas in High Dimensions: Estimators and Numerical Challenges Motivated by Financial Applications. Journal de la Société Française de Statistique 154, 25–63 (2013).\n\n\n\nM. Hofert. Sampling Nested Archimedean Copulas with Applications to CDO Pricing. Ph.D. Thesis, Universität Ulm (2010).\n\n\n\nM. Hofert and D. Pham. Densities of Nested Archimedean Copulas. Journal of Multivariate Analysis 118, 37–52 (2013).\n\n\n\nA. J. McNeil and J. Nešlehová. From Archimedean to Liouville Copulas. Journal of Multivariate Analysis 101, 1772–1790 (2010).\n\n\n\nH. Cossette, S.-P. Gadoury, E. Marceau and I. Mtalai. Hierarchical Archimedean Copulas through Multivariate Compound Distributions. Insurance: Mathematics and Economics 76, 1–13 (2017).\n\n\n\nH. Cossette, E. Marceau, I. Mtalai and D. Veilleux. Dependent Risk Models with Archimedean Copulas: A Computational Strategy Based on Common Mixtures and Applications. Insurance: Mathematics and Economics 78, 53–71 (2018).\n\n\n\nC. Genest, J. Nešlehová and J. Ziegel. Inference in Multivariate Archimedean Copula Models. TEST 20, 223–256 (2011).\n\n\n\nE. Di Bernardino and D. Rulliere. On Certain Transformations of Archimedean Copulas: Application to the Non-Parametric Estimation of Their Generators. Dependence Modeling 1, 1–36 (2013).\n\n\n\nE. Di Bernardino and D. Rullière. On an Asymmetric Extension of Multivariate Archimedean Copulas Based on Quadratic Form. Dependence Modeling 4 (2016).\n\n\n\nK. Cooray. Strictly Archimedean Copulas with Complete Association for Multivariate Dependence Based on the Clayton Family. Dependence Modeling 6, 1–18 (2018).\n\n\n\nJ. Spreeuw. Archimedean Copulas Derived from Utility Functions. Insurance: Mathematics and Economics 59, 235–242 (2014).\n\n\n\nW. Zhu, K. S. Tan and C.-W. Wang. Modeling Multicountry Longevity Risk With Mortality Dependence: A Lévy Subordinated Hierarchical Archimedean Copulas Approach: Modeling Multicountry Longevity Risk with Mortality Dependence. Journal of Risk and Insurance 84, 477–493 (2017).\n\n\n\nN. Uyttendaele. On the Estimation of Nested Archimedean Copulas: A Theoretical and an Experimental Comparison. Computational Statistics 33, 1047–1070 (2018).\n\n\n\nR. T. Steck. Time-Varying Hierarchical Archimedean Copulas Using Adaptively Simulated Critical Values. Ph.D. Thesis, Humboldt-Universität zu Berlin, Wirtschaftswissenschaftliche Fakultät (2015).\n\n\n\nJ. Górecki, M. Hofert and M. Holeňa. On Structure, Family and Parameter Estimation of Hierarchical Archimedean Copulas, arXiv:1611.09225 stat.\n\n\n\nJ. Górecki, M. Hofert and M. Holeňa. Kendall's Tau and Agglomerative Clustering for Structure Determination of Hierarchical Archimedean Copulas. Dependence Modeling 5, 75–87 (2017).\n\n\n\nH. Cossette, E. Marceau and I. Mtalai. Collective Risk Models with Hierarchical Archimedean Copulas. SSRN Electronic Journal (2018).\n\n\n\nD. Müller and C. Czado. Representing Sparse Gaussian DAGs as Sparse R-vines Allowing for Non-Gaussian Dependence. Journal of Computational and Graphical Statistics 27, 334–344 (2018).\n\n\n\nT. Nagler and C. Czado. Evading the Curse of Dimensionality in Nonparametric Density Estimation with Simplified Vine Copulas. Journal of Multivariate Analysis 151, 69–89 (2016).\n\n\n\nT. Nagler. Nonparametric Estimation in Simplified Vine Copula Models. Ph.D. Thesis, Technische Universität München (2018).\n\n\n\nP. Deheuvels. La Fonction de Dépendance Empirique et Ses Propriétés. Académie Royale de Belgique. Bulletin de la Classe des Sciences 65, 274–292 (1979).\n\n\n\nJ. Segers, M. Sibuya and H. Tsukahara. The Empirical Beta Copula. Journal of Multivariate Analysis 155, 35–51 (2017).\n\n\n\nA. Cuberos, E. Masiello and V. Maume-Deschamps. Copulas Checker-Type Approximations: Application to Quantiles Estimation of Sums of Dependent Random Variables. Communications in Statistics - Theory and Methods, 1–19 (2019).\n\n\n\nP. Mikusiński and M. D. Taylor. Some Approximations of N-Copulas. Metrika 72, 385–414 (2010).\n\n\n\nF. Durante, E. Foscolo, J. A. Rodríguez-Lallena and M. Úbeda-Flores. A Method for Constructing Higher-Dimensional Copulas. Statistics 46, 387–404 (2012).\n\n\n\nF. Durante, J. Fernández Sánchez and C. Sempi. Multivariate Patchwork Copulas: A Unified Approach with Applications to Partial Comonotonicity. Insurance: Mathematics and Economics 53, 897–905 (2013).\n\n\n\nF. Durante, J. Fernández-Sánchez, J. J. Quesada-Molina and M. Úbeda-Flores. Convergence Results for Patchwork Copulas. European Journal of Operational Research 247, 525–531 (2015).\n\n\n\nO. Laverny. Empirical and Non-Parametric Copula Models with the Cort R Package. Journal of Open Source Software 5, 2653 (2020).\n\n\n\nF. Durante, G. Puccetti, M. Scherer and S. Vanduffel. The Vine Philosopher. Dependence Modeling 5, 256–267 (2017).\n\n\n\nC. Czado, S. Jeske and M. Hofmann. Selection Strategies for Regular Vine Copulae. Journal de la Société Française de Statistique 154, 174–191 (2013).\n\n\n\nB. Gräler. Modelling Skewed Spatial Random Fields through the Spatial Vine Copula. Spatial Statistics 10, 87–102 (2014).\n\n\n\nC. Genest, J. Nešlehová and N. Ben Ghorbal. Estimators Based on Kendall's Tau in Multivariate Copula Models. Australian & New Zealand Journal of Statistics 53, 157–177 (2011).\n\n\n\nG. A. Fredricks and R. B. Nelsen. On the Relationship between Spearman's Rho and Kendall's Tau for Pairs of Continuous Random Variables. Journal of Statistical Planning and Inference 137, 2143–2150 (2007).\n\n\n\n","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"CurrentModule = Copulas","category":"page"},{"location":"archimedean/generalities/#General-Discussion","page":"General Discussion","title":"General Discussion","text":"","category":"section"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"Archimedean copulas are a large class of copulas that are defined as : ... [ details needed...]","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"In our implementation, we separate the generator, in the Generator type, from the copula itself. The easyest way to understand this orthogonal design is to look at the Clayton implementation. ","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"We have the ClaytonGenerator that is defined as follows: ","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"struct ClaytonGenerator{T} <: UnivariateGenerator\n    θ::T\n    function ClaytonGenerator(θ)\n        if θ < -1\n            throw(ArgumentError(\"Theta must be greater than -1\"))\n        elseif θ == -1\n            return WGenerator()\n        elseif θ == 0\n            return IndependentGenerator()\n        elseif θ == Inf\n            return MGenerator()\n        else\n            return new{typeof(θ)}(θ)\n        end\n    end\nend\nmax_monotony(G::ClaytonGenerator) = G.θ >= 0 ? Inf : Int(floor(1 - 1/G.θ))\nϕ(  G::ClaytonGenerator, t) = max(1+G.θ*t,zero(t))^(-1/G.θ)\nϕ⁻¹(G::ClaytonGenerator, t) = (t^(-G.θ)-1)/G.θ\n# ϕ⁽¹⁾(G::ClaytonGenerator, t) =  First derivative of ϕ\n# ϕ⁽ᵏ⁾(G::ClaytonGenerator, k, t) = kth derivative of ϕ\nτ(G::ClaytonGenerator) = ifelse(isfinite(G.θ), G.θ/(G.θ+2), 1)\nτ⁻¹(::Type{T},τ) where T<:ClaytonGenerator = ifelse(τ == 1,Inf,2τ/(1-τ))\nwilliamson_dist(G::ClaytonGenerator, d) = G.θ >= 0 ? WilliamsonFromFrailty(Distributions.Gamma(1/G.θ,G.θ),d) : ClaytonWilliamsonDistribution(G.θ,d)","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"And then the ClaytonCopula{d,T} is simply an alias for ArchimedeanCopula{d,ClaytonGenerator{T}}: ","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"const ClaytonCopula{d,T} = ArchimedeanCopula{d,ClaytonGenerator{T}}\nClaytonCopula(d,θ) = ArchimedeanCopula(d,ClaytonGenerator(θ))\ngeneratorof(::Type{ClaytonCopula}) = ClaytonGenerator","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"Not everything is necessary however, depending on the features you need. Indeed, the Archimedean API is modular: ","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"Only ϕ and max_monotony are really required. Indeed, all other functions have generic fallbacks. In particular, the williamson_dist has a generic fallback that uses WilliamsonTransforms.jl for any generator. Note however that providing the williamson_dist yourself if you know it will allow sampling to be an order of magnitude faster: see how in the ClaytonCopula case we provided a sampler that is different for positive parameters (the generator is completely monotonous, and thus the frailty distribution is known, so we used WilliamsonFromFrailty), and the negative dependent cases, where only the CDF is known and implemented in ClaytonWilliamsonDistribution.\nTo evaluate the cdf and (log-)density in any dimension, only ϕ and ϕ⁻¹ are needed.\nCurrently, to fit the copula τ⁻¹ is needed as we use the inverse tau moment method. But we plan on also implementing inverse rho and MLE (density needed). \nNote that the generator ϕ follows the convention ϕ(0)=1, while others (e.g., https://en.wikipedia.org/wiki/Copula(probabilitytheory)#Archimedean_copulas) use ϕ⁻¹ as the generator.","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"ArchimedeanCopula","category":"page"},{"location":"archimedean/generalities/#Copulas.ArchimedeanCopula","page":"General Discussion","title":"Copulas.ArchimedeanCopula","text":"ArchimedeanCopula{d, TG}\n\nFields:      - G::TG : the generator <: Generator. \n\nConstructor: \n\nArchimedeanCopula(d::Int,G::Generator)\n\nFor some archimedean generator G::Generator and some dimenson d, this class models the archimedean copula wich has this generator. More formally, a d-monotone archimedean generator is a function phi on mathbb R_+ that has these three properties:\n\nphi(0) = 1 and phi(Inf) = 0\nphi is d-2 times derivable, and the signs of its derivatives alternates : forall k in 0d-2 (-1)^k phi^(k) ge 0.\nphi^(d-2) is convex.\n\nIn the code, this function is implemented as ϕ(G::Generator,t), and its max monotony d is given by max_monotony(G). The corresponding d-variate archimedean copula writes: \n\nC(mathbf u) = phi^-1left(sum_i=1^d phi(u_i)right)\n\nIt can be sampled through A Radial simplex decomposition as follows: If mathbf U sim C, then U equal R mathbf S for a random vector mathbf S sim Dirichlet(ones(d)), that is uniformity on the d-variate simplex, and a non-negative random variable R that is the Williamson d-transform of \\phi. The density, cdf, kendall tau, and may other properties of the Archimedean copula are then directly deduced from this relationship. \n\nThere exists several known parametric generators that are implement in the package. For every NamedGenerator <: Generator implemented in the package, we provide a type alias `NamedCopula{d,...} = ArchimedeanCopula{d,NamedGenerator{...}} to be able to manipulate the archimedean copulas without too much hassle for known and usefull special cases. \n\nA generic archimdeanc copula can be constructed as follows: \n\nstruct MyGenerator <: Generator end\nϕ(G::MyGenerator,t) = exp(-t) # your archimedean generator, can be any d-monotonous function.\nmax_monotony(G::MyGenerator) = Inf # could depend on generators parameters. \nC = ArchimedeanCopula(d,MyGenerator())\n\nThe obtained model can be used as follows: \n\nspl = rand(C,1000)   # sampling\ncdf(C,spl)           # cdf\npdf(C,spl)           # pdf\nloglikelihood(C,spl) # llh\n\nThe following functions have defaults but can be overridden for performance: \n\nϕ⁻¹(C::MyArchimedean, t)        # Inverse of ϕ\nϕ⁽¹⁾(C::MyArchimedean, t)       # first defrivative of ϕ\nϕ⁽ᵈ⁾(C::MyArchimedean,t)        # dth defrivative of ϕ\nτ(C::MyArchimedean)             # Kendall tau\nτ⁻¹(::Type{MyArchimedean},τ) =  # Inverse kendall tau\nfit(::Type{MyArchimedean},data) # fitting.\n\nAs a bonus, If you know the williamson d-transform of your generator and not your generator itself, you may take a look at WilliamsonGenerator that implements them. If you rather know the frailty distribution, take a look at WilliamsonFromFrailty.\n\nReferences:      Williamson, R. E. (1956). Multiply monotone functions and their Laplace transforms. Duke Math. J. 23 189–207. MR0077581     McNeil, Alexander J., and Johanna Nešlehová. \"Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\" (2009): 3059-3097.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/generalities/#Implement-your-own","page":"General Discussion","title":"Implement your own","text":"","category":"section"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"If you think that the WilliamsonCopula interface is too barebone and does not provide you with enough flexibility in your modeling of an archimedean copula, you might be intersted in the possiiblity to directly subtype ArchimedeanCopula and implement your own. This is actually a fairly easy process and you only need to implement a few functions. Let's here together try to reimplement come archimedean copula with the follçowing generator: ","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"my_generator","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"(describe the process...)","category":"page"},{"location":"archimedean/generalities/","page":"General Discussion","title":"General Discussion","text":"struct MyAC{d,T} <: ArchimedeanCopula{d}\n    par::T\nend\nϕ(C::MyAC{d},x)\nϕ⁻¹(C::MyAC{d},x)\nτ(C::MyAC{d})\nτ⁻¹(::MyAC{d},τ)\nwilliamson_dist(C::MyAC{d})","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"CurrentModule = Copulas","category":"page"},{"location":"dev_roadmap/#Development-roadmap","page":"Dev Roadmap","title":"Development roadmap","text":"","category":"section"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"We hope to implement a few more copula models into this package. The next ones to be implemented will probably be: ","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"Extreme values copulas. \nNested archimedeans (for any generators, with automatic nesting conditions checking). \nBernstein copula and more general Beta copula as smoothing of the Empirical copula. \nCheckerboardCopula (and more generally PatchworkCopula)","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"More precisely, the following directions could be pursued:","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"Next:","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"More documentation and tests for the current implementation. \nDocs: show how to use the WilliamsonCopula to implement generic archimedeans.\nGive the user the choice of fitting method via fit(dist,data; method=\"MLE\") or fit(dist,data; method=\"itau\") or fit(dist,data; method=\"irho\").\nFitting a generic archimedean with an empirically produced generator\nAutomatic checking of generator d-monotony ? Dunno if it is even possible. ","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"Maybe later:","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"NestedArchimedean, with automatic checking of nesting conditions for generators. \nVines?\nArchimax ?\nBernsteinCopula and BetaCopula could also be implemented. \nPatchworkCopula and CheckerboardCopula: could be nice things to have :)\nGoodness of fits tests ?","category":"page"},{"location":"idx/","page":"Package Index","title":"Package Index","text":"CurrentModule = Copulas","category":"page"},{"location":"idx/#Reference","page":"Package Index","title":"Reference","text":"","category":"section"},{"location":"idx/","page":"Package Index","title":"Package Index","text":"All docstrings are copied here as a general reference.","category":"page"},{"location":"idx/","page":"Package Index","title":"Package Index","text":"Modules = [Copulas]","category":"page"},{"location":"idx/#Copulas.AMHGenerator-idx","page":"Package Index","title":"Copulas.AMHGenerator","text":"AMHGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nAMHGenerator(θ)\nAMHCopula(d,θ)\n\nThe AMH copula in dimension d is parameterized by theta in -11). It is an Archimedean copula with generator : \n\nphi(t) = 1 - frac1-thetae^-t-theta\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.ArchimedeanCopula-idx","page":"Package Index","title":"Copulas.ArchimedeanCopula","text":"ArchimedeanCopula{d, TG}\n\nFields:      - G::TG : the generator <: Generator. \n\nConstructor: \n\nArchimedeanCopula(d::Int,G::Generator)\n\nFor some archimedean generator G::Generator and some dimenson d, this class models the archimedean copula wich has this generator. More formally, a d-monotone archimedean generator is a function phi on mathbb R_+ that has these three properties:\n\nphi(0) = 1 and phi(Inf) = 0\nphi is d-2 times derivable, and the signs of its derivatives alternates : forall k in 0d-2 (-1)^k phi^(k) ge 0.\nphi^(d-2) is convex.\n\nIn the code, this function is implemented as ϕ(G::Generator,t), and its max monotony d is given by max_monotony(G). The corresponding d-variate archimedean copula writes: \n\nC(mathbf u) = phi^-1left(sum_i=1^d phi(u_i)right)\n\nIt can be sampled through A Radial simplex decomposition as follows: If mathbf U sim C, then U equal R mathbf S for a random vector mathbf S sim Dirichlet(ones(d)), that is uniformity on the d-variate simplex, and a non-negative random variable R that is the Williamson d-transform of \\phi. The density, cdf, kendall tau, and may other properties of the Archimedean copula are then directly deduced from this relationship. \n\nThere exists several known parametric generators that are implement in the package. For every NamedGenerator <: Generator implemented in the package, we provide a type alias `NamedCopula{d,...} = ArchimedeanCopula{d,NamedGenerator{...}} to be able to manipulate the archimedean copulas without too much hassle for known and usefull special cases. \n\nA generic archimdeanc copula can be constructed as follows: \n\nstruct MyGenerator <: Generator end\nϕ(G::MyGenerator,t) = exp(-t) # your archimedean generator, can be any d-monotonous function.\nmax_monotony(G::MyGenerator) = Inf # could depend on generators parameters. \nC = ArchimedeanCopula(d,MyGenerator())\n\nThe obtained model can be used as follows: \n\nspl = rand(C,1000)   # sampling\ncdf(C,spl)           # cdf\npdf(C,spl)           # pdf\nloglikelihood(C,spl) # llh\n\nThe following functions have defaults but can be overridden for performance: \n\nϕ⁻¹(C::MyArchimedean, t)        # Inverse of ϕ\nϕ⁽¹⁾(C::MyArchimedean, t)       # first defrivative of ϕ\nϕ⁽ᵈ⁾(C::MyArchimedean,t)        # dth defrivative of ϕ\nτ(C::MyArchimedean)             # Kendall tau\nτ⁻¹(::Type{MyArchimedean},τ) =  # Inverse kendall tau\nfit(::Type{MyArchimedean},data) # fitting.\n\nAs a bonus, If you know the williamson d-transform of your generator and not your generator itself, you may take a look at WilliamsonGenerator that implements them. If you rather know the frailty distribution, take a look at WilliamsonFromFrailty.\n\nReferences:      Williamson, R. E. (1956). Multiply monotone functions and their Laplace transforms. Duke Math. J. 23 189–207. MR0077581     McNeil, Alexander J., and Johanna Nešlehová. \"Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\" (2009): 3059-3097.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.ClaytonGenerator-idx","page":"Package Index","title":"Copulas.ClaytonGenerator","text":"ClaytonGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nClaytonGenerator(θ)\nClaytonCopula(d,θ)\n\nThe Clayton copula in dimension d is parameterized by theta in -1(d-1)infty). It is an Archimedean copula with generator : \n\nphi(t) = left(1+mathrmsign(theta)*tright)^-1frac1theta\n\nIt has a few special cases: \n\nWhen θ = -1/(d-1), it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 0, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.EllipticalCopula-idx","page":"Package Index","title":"Copulas.EllipticalCopula","text":"EllipticalCopula{d,MT}\n\nAbstract type.\n\n[The description of the API should be here...]\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.EmpiricalCopula-idx","page":"Package Index","title":"Copulas.EmpiricalCopula","text":"EmpiricalCopula{d,MT}\n\nFields:\n\nu::MT - the matrix of observations. \n\nConstructor\n\nEmpiricalCopula(u;pseudos=true)\n\nThe EmpiricalCopula in dimension d is parameterized by a pseudo-data matrix wich should have shape (d,N). Its expression is given as :  \n\nC(mathbf x) = frac1Nsum_i=1^n mathbf 1_mathbf u_i le mathbf x\n\nThis function is very practical, be be aware that this is not a true copula (since mathbf u are only pseudo-observations). The constructor allows you to pass dirctly pseudo-observations (the default) or will compute them for you. You can then compute the cdf of the copula, and sample it through the standard interface.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.FGMCopula-idx","page":"Package Index","title":"Copulas.FGMCopula","text":"FGMCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nFGMCopula(d, θ)\n\nThe Multivariate Farlie-Gumbel-Morgenstern (FGM) copula of dimension d has 2^d-d-1 parameters theta and function\n\nC(boldsymbolu)=prod_i=1^du_i left1+ sum_k=2^dsum_1 leq j_1  cdots  j_k leq d theta_j_1 cdots j_k baru_j_1cdots baru_j_k right\n\nwhere baru=1-u.\n\nMore details about Farlie-Gumbel-Morgenstern (FGM) copula are found in :\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.38.\n\nWe use the stochastic representation of the copula to obtain random samples.\n\nBlier-Wong, C., Cossette, H., & Marceau, E. (2022). Stochastic representation of FGM copulas using multivariate Bernoulli random variables. Computational Statistics & Data Analysis, 173, 107506.\n\nIt has a few special cases:\n\nWhen d=2 and θ = 0, it is the IndependentCopula.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.FrankGenerator-idx","page":"Package Index","title":"Copulas.FrankGenerator","text":"FrankGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nFrankGenerator(θ)\nFrankCopula(d,θ)\n\nThe Frank copula in dimension d is parameterized by theta in -inftyinfty). It is an Archimedean copula with generator : \n\nphi(t) = -fraclogleft(1+e^-t(e^-theta-1)right)\theta\n\nIt has a few special cases: \n\nWhen θ = -∞, it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.GaussianCopula-idx","page":"Package Index","title":"Copulas.GaussianCopula","text":"GaussianCopula{d,MT}\n\nFields:\n\nΣ::MT - covariance matrix\n\nConstructor\n\nGaussianCopula(Σ)\n\nThe Gaussian Copula is the  copula of a Multivariate normal distribution. It is constructed as : \n\nC(mathbfx boldsymbolSigma) = F_Sigma(F_Sigmai^-1(x_i)iin 1d)\n\nwhere F_Sigma is a cdf of a gaussina random vector and F_{\\Sigma,i} is the ith marignal cdf, while `Sigma is the covariance matrix. \n\nIt can be constructed in Julia via:  \n\nC = GaussianCopula(Σ)\n\nThe random number generation works as expected:\n\nrand(C,1000)\n# or\nRandom.rand!(C,u)\n\nAnd yo can fit the distribution via : \n\nfit(GaussianCopula,data)\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.GumbelBarnettGenerator-idx","page":"Package Index","title":"Copulas.GumbelBarnettGenerator","text":"GumbelBarnettGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelBarnettGenerator(θ)\nGumbelBarnettCopula(d,θ)\n\nThe Gumbel-Barnett copula is an archimdean copula with generator:\n\nphi(t) = expθ^-1(1-e^t) 0 leq theta leq 1\n\nMore details about Gumbel-Barnett copula are found in:\n\nJoe, H. (2014). Dependence modeling with copulas. CRC press, Page.437\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.GumbelGenerator-idx","page":"Package Index","title":"Copulas.GumbelGenerator","text":"GumbelGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelGenerator(θ)\nGumbelCopula(d,θ)\n\nThe Gumbel copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = exp-t^frac1θ\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.IndependentGenerator-idx","page":"Package Index","title":"Copulas.IndependentGenerator","text":"IndependentGenerator\n\nConstructor\n\nIndependentGenerator()\nIndependentCopula(d)\n\nThe Independent Copula in dimension d is the simplest copula, that has the form : \n\nC(mathbfx) = prod_i=1^d x_i\n\nIt happends to be an Archimedean Copula, with generator : \n\nphi(t) = exp-t\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.InvGaussianGenerator-idx","page":"Package Index","title":"Copulas.InvGaussianGenerator","text":"InvGaussianGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nInvGaussianGenerator(θ)\nInvGaussianCopula(d,θ)\n\nThe Inverse Gaussian copula in dimension d is parameterized by theta in 0infty). It is an Archimedean copula with generator :\n\nphi(t) = expfrac(1-sqrt1+2θ^2tθ\n\nMore details about Inverse Gaussian Archimedean copula are found in :\n\nMai, Jan-Frederik, and Matthias Scherer. Simulating copulas: stochastic models, sampling algorithms, and applications. Vol. 6. # N/A, 2017. Page 74.\n\nIt has a few special cases:\n\nWhen θ = 0, it is the IndependentCopula\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.JoeGenerator-idx","page":"Package Index","title":"Copulas.JoeGenerator","text":"JoeGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nJoeGenerator(θ)\nJoeCopula(d,θ)\n\nThe Joe copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = 1 - left(1 - e^-tright)^frac1theta\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.MGenerator-idx","page":"Package Index","title":"Copulas.MGenerator","text":"MGenerator\n\nConstructor\n\nMGenerator()\nMCopula(d)\n\nThe Upper Frechet-Hoeffding bound is the copula with the greatest value among all copulas. It correspond to comonotone random vectors. \n\nFor any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.PlackettCopula-idx","page":"Package Index","title":"Copulas.PlackettCopula","text":"PlackettCopula{P}\n\nFields:     - θ::Real - parameter\n\nConstructor\n\nPlackettCopula(θ)\n\nParameterized by theta  0 The Plackett copula is\n\nC_theta(uv) = fracleft 1+(theta-1)(u+v)right- sqrt1+(theta-1)(u+v)^2-4uvtheta(theta-1)2(theta-1)\n\nand for theta = 1\n\nC_1(uv) = uv \n\nIt has a few special cases: \n\nWhen θ = 0, is is the MCopula (Upper Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the WCopula (Lower Frechet-Hoeffding bound)\n\nMore details about Plackett Copula are found in:\n\nJoe, H. (2014). Dependence modeling with copulas. CRC press, Page.164\n\nDetails about the algorithm to generate copula samples can be seen in the following references:\n\nJohnson, Mark E. Multivariate statistical simulation:\nA guide to selecting and generating continuous multivariate distributions.\nVol. 192. John Wiley & Sons, 1987. Page 193.\nNelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.38.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.SklarDist-idx","page":"Package Index","title":"Copulas.SklarDist","text":"SklarDist{CT,TplMargins}\n\nFields:\n\nC::CT - The copula\nm::TplMargins - a Tuple representing the marginal distributions\n\nConstructor\n\nSklarDist(C,m)\n\nThis function allows to construct a random vector specified, through the Sklar Theorem, by its marginals and its copula separately. See Sklar's theorem. \n\nThe obtain random vector follows Distributions.jl's API and can be sampled, pdf and cdf can be evaluated, etc... We even provide a fit function. See the folowing exemple code : \n\nusing Copulas, Distributions, Random\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution\n\n# This generates a (3,1000)-sized dataset from the multivariate distribution D\nsimu = rand(D,1000)\n\n# While the following estimates the parameters of the model from a dataset: \nD̂ = fit(SklarDist{FrankCopula,Tuple{Gamma,Normal,LogNormal}}, simu)\n# Increase the number of observations to get a beter fit (or not?)  \n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.SurvivalCopula-idx","page":"Package Index","title":"Copulas.SurvivalCopula","text":"SurvivalCopula{d,CT,VI}\n\nConstructor\n\nSurvivalCopula(C,indices)\n\nComputes the survival version of any copula on given indices. From a copula C in dimension d, and some indices i_1i_k in 1d, the survival copula associated simply reverses its arguments on chosen indices. For exemple, for d=4 and indices (23), we have: \n\nS(u_1u_4) = C(u_11-u_21-u3u_4)\n\nThis constructor allows to derive new \"survival\" families. For exemple, in bivariate cases, this allows to do \"rotations\". The obtained models can be treated as the starting one, i.e. as a random vector in [0,1]^d with uniforms marginals. \n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.TCopula-idx","page":"Package Index","title":"Copulas.TCopula","text":"TCopula{d,MT}\n\nFields:\n\ndf::Int - number of degree of freedom\nΣ::MT - covariance matrix\n\nConstructor\n\nTCopula(df,Σ)\n\nThe Student's T Copula is the  copula of a Multivariate Student distribution. It is constructed as : \n\nC(mathbfx boldsymbolnSigma) = F_nSigma(F_nSigmai^-1(x_i)iin 1d)\n\nwhere F_nSigma is a cdf of a multivariate student random vector with covariance matrix Sigma and n degrees of freedom. and F_{n,\\Sigma,i} is the ith marignal cdf. \n\nIt can be constructed in Julia via:  \n\nC = TCopula(n,Σ)\n\nThe random number generation works as expected:\n\nrand(C,1000)\n# or\nRandom.rand!(C,u)\n\nAnd yo can fit the distribution via : \n\nfit(TCopula,data)\n\nExcept that currently it does not work since fit(Distributions.MvTDist,data) does not dispatch. \n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.WGenerator-idx","page":"Package Index","title":"Copulas.WGenerator","text":"WGenerator\n\nConstructor\n\nWGenerator()\nWCopula(d)\n\nThe Lower Frechet-Hoeffding bound is the copula with the lowest value among all copulas. Note that W is only a proper copula when d=2, in greater dimensions it is still the (pointwise) lower bound, but not a copula anymore. For any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.WilliamsonGenerator-idx","page":"Package Index","title":"Copulas.WilliamsonGenerator","text":"WilliamsonGenerator{TX}\n\nFields:     - X::TX – a random variable that represents its williamson d-transform     - d::Int – the dimension of the transformation. \n\nConstructors\n\nWilliamsonGenerator(X::Distributions.UnivariateDistribution, d)\n\nThe WilliamsonGenerator allows to construct a d-monotonous archimedean generator from a positive random variable X::Distributions.UnivariateDistribution. The transformation, wich is called the inverse williamson transformation, is implemented in WilliamsonTransforms.jl. \n\nFor a univariate non-negative random variable X, with cumulative distribution function F and an integer dge 2, the Williamson-d-transform of X is the real function supported on 0infty given by:\n\nphi(t) = 𝒲_d(X)(t) = int_t^infty left(1 - fractxright)^d-1 dF(x) = mathbb Eleft( (1 - fractX)^d-1_+right) mathbb 1_t  0 + left(1 - F(0)right)mathbb 1_t 0\n\nThis function has several properties: \n\nWe have that phi(0) = 1 and phi(Inf) = 0\nphi is d-2 times derivable, and the signs of its derivatives alternates : forall k in 0d-2 (-1)^k phi^(k) ge 0.\nphi^(d-2) is convex.\n\nThese properties makes this function what is called a d-monotone archimedean generator, able to generate archimedean copulas in dimensions up to d. Our implementation provides this through the Generator interface: the function phi can be accessed by \n\nG = WilliamsonGenerator(X, d)\nϕ(G,t)\n\nNote that you'll always have:\n\nmax_monotony(WilliamsonGenerator(X,d)) === d\n\nReferences:      Williamson, R. E. (1956). Multiply monotone functions and their Laplace transforms. Duke Math. J. 23 189–207. MR0077581     McNeil, Alexander J., and Johanna Nešlehová. \"Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\" (2009): 3059-3097.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/generators/#Archimedean-Generators","page":"Archimedean Generators","title":"Archimedean Generators","text":"","category":"section"},{"location":"archimedean/generators/","page":"Archimedean Generators","title":"Archimedean Generators","text":"definition of an archimedean generator... ","category":"page"},{"location":"archimedean/generators/","page":"Archimedean Generators","title":"Archimedean Generators","text":"why are these stuffs usefull... ","category":"page"},{"location":"archimedean/generators/","page":"Archimedean Generators","title":"Archimedean Generators","text":"etc... ","category":"page"},{"location":"archimedean/generators/#The-Generator-API","page":"Archimedean Generators","title":"The Generator API","text":"","category":"section"},{"location":"archimedean/generators/","page":"Archimedean Generators","title":"Archimedean Generators","text":"uses williamson-d-transfrom by default. ","category":"page"},{"location":"archimedean/generators/#The-WilliamsonGenerator-for-Inverse-Williamson-d-transform","page":"Archimedean Generators","title":"The WilliamsonGenerator for Inverse Williamson d-transform","text":"","category":"section"},{"location":"archimedean/generators/","page":"Archimedean Generators","title":"Archimedean Generators","text":"WilliamsonGenerator","category":"page"},{"location":"archimedean/generators/#Copulas.WilliamsonGenerator","page":"Archimedean Generators","title":"Copulas.WilliamsonGenerator","text":"WilliamsonGenerator{TX}\n\nFields:     - X::TX – a random variable that represents its williamson d-transform     - d::Int – the dimension of the transformation. \n\nConstructors\n\nWilliamsonGenerator(X::Distributions.UnivariateDistribution, d)\n\nThe WilliamsonGenerator allows to construct a d-monotonous archimedean generator from a positive random variable X::Distributions.UnivariateDistribution. The transformation, wich is called the inverse williamson transformation, is implemented in WilliamsonTransforms.jl. \n\nFor a univariate non-negative random variable X, with cumulative distribution function F and an integer dge 2, the Williamson-d-transform of X is the real function supported on 0infty given by:\n\nphi(t) = 𝒲_d(X)(t) = int_t^infty left(1 - fractxright)^d-1 dF(x) = mathbb Eleft( (1 - fractX)^d-1_+right) mathbb 1_t  0 + left(1 - F(0)right)mathbb 1_t 0\n\nThis function has several properties: \n\nWe have that phi(0) = 1 and phi(Inf) = 0\nphi is d-2 times derivable, and the signs of its derivatives alternates : forall k in 0d-2 (-1)^k phi^(k) ge 0.\nphi^(d-2) is convex.\n\nThese properties makes this function what is called a d-monotone archimedean generator, able to generate archimedean copulas in dimensions up to d. Our implementation provides this through the Generator interface: the function phi can be accessed by \n\nG = WilliamsonGenerator(X, d)\nϕ(G,t)\n\nNote that you'll always have:\n\nmax_monotony(WilliamsonGenerator(X,d)) === d\n\nReferences:      Williamson, R. E. (1956). Multiply monotone functions and their Laplace transforms. Duke Math. J. 23 189–207. MR0077581     McNeil, Alexander J., and Johanna Nešlehová. \"Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\" (2009): 3059-3097.\n\n\n\n\n\n","category":"type"},{"location":"elliptical/available_models/","page":"Available elliptical copulas","title":"Available elliptical copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"elliptical/available_models/#Available-elliptical-copulas","page":"Available elliptical copulas","title":"Available elliptical copulas","text":"","category":"section"},{"location":"elliptical/available_models/#Gaussian","page":"Available elliptical copulas","title":"Gaussian","text":"","category":"section"},{"location":"elliptical/available_models/","page":"Available elliptical copulas","title":"Available elliptical copulas","text":"GaussianCopula","category":"page"},{"location":"elliptical/available_models/#Copulas.GaussianCopula","page":"Available elliptical copulas","title":"Copulas.GaussianCopula","text":"GaussianCopula{d,MT}\n\nFields:\n\nΣ::MT - covariance matrix\n\nConstructor\n\nGaussianCopula(Σ)\n\nThe Gaussian Copula is the  copula of a Multivariate normal distribution. It is constructed as : \n\nC(mathbfx boldsymbolSigma) = F_Sigma(F_Sigmai^-1(x_i)iin 1d)\n\nwhere F_Sigma is a cdf of a gaussina random vector and F_{\\Sigma,i} is the ith marignal cdf, while `Sigma is the covariance matrix. \n\nIt can be constructed in Julia via:  \n\nC = GaussianCopula(Σ)\n\nThe random number generation works as expected:\n\nrand(C,1000)\n# or\nRandom.rand!(C,u)\n\nAnd yo can fit the distribution via : \n\nfit(GaussianCopula,data)\n\n\n\n\n\n","category":"type"},{"location":"elliptical/available_models/#Student's-T","page":"Available elliptical copulas","title":"Student's T","text":"","category":"section"},{"location":"elliptical/available_models/","page":"Available elliptical copulas","title":"Available elliptical copulas","text":"TCopula","category":"page"},{"location":"elliptical/available_models/#Copulas.TCopula","page":"Available elliptical copulas","title":"Copulas.TCopula","text":"TCopula{d,MT}\n\nFields:\n\ndf::Int - number of degree of freedom\nΣ::MT - covariance matrix\n\nConstructor\n\nTCopula(df,Σ)\n\nThe Student's T Copula is the  copula of a Multivariate Student distribution. It is constructed as : \n\nC(mathbfx boldsymbolnSigma) = F_nSigma(F_nSigmai^-1(x_i)iin 1d)\n\nwhere F_nSigma is a cdf of a multivariate student random vector with covariance matrix Sigma and n degrees of freedom. and F_{n,\\Sigma,i} is the ith marignal cdf. \n\nIt can be constructed in Julia via:  \n\nC = TCopula(n,Σ)\n\nThe random number generation works as expected:\n\nrand(C,1000)\n# or\nRandom.rand!(C,u)\n\nAnd yo can fit the distribution via : \n\nfit(TCopula,data)\n\nExcept that currently it does not work since fit(Distributions.MvTDist,data) does not dispatch. \n\n\n\n\n\n","category":"type"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = Copulas","category":"page"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The package is available on Julia's general registry, and can be installed as follows: ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"] add Copulas","category":"page"},{"location":"getting_started/#First-example","page":"Getting Started","title":"First example","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The API contains random number generation, cdf and pdf evaluation, and the fit function from Distributions.jl. A typical use case might look like this: ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Copulas, Distributions, Random\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution\n\n# This generates a (3,1000)-sized dataset from the multivariate distribution D\nsimu = rand(D,1000)\n\n# While the following estimates the parameters of the model from a dataset: \nD̂ = fit(SklarDist{FrankCopula,Tuple{Gamma,Normal,LogNormal}}, simu)\n# Increase the number of observations to get a beter fit (or not?)  ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"There are a lot of available copula families in the package, that can be regrouped into a few classes: ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"EllipticalCopulas: GaussianCopula and TCopula\nArchimedeanCopula: The generic version (for user-specified generator), but also ClaytonCopula,FrankCopula, AMHCopula, JoeCopula, GumbelCopula,GumbelBarnettCopula,InvGaussianCopula, supporting the full ranges in every dimension (e.g., ClaytonCopula can be sampled with negative dependence in any dimension, not just d=2). \nWCopula, IndependentCopula and MCopula, which are Fréchet-Hoeffding bounds,\nOthers unclassable : PlackettCopula, EmpiricalCopula to follow closely a given dataset, etc..","category":"page"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"miscellaneous/#Miscellaneous-Copulas","page":"Other Copulas","title":"Miscellaneous Copulas","text":"","category":"section"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"A few copulas, while necessary in certain cases and really usefull, are hard to classify. We gether them here for simplicity. ","category":"page"},{"location":"miscellaneous/#Plackett-Copula","page":"Other Copulas","title":"Plackett Copula","text":"","category":"section"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"PlackettCopula","category":"page"},{"location":"miscellaneous/#Copulas.PlackettCopula","page":"Other Copulas","title":"Copulas.PlackettCopula","text":"PlackettCopula{P}\n\nFields:     - θ::Real - parameter\n\nConstructor\n\nPlackettCopula(θ)\n\nParameterized by theta  0 The Plackett copula is\n\nC_theta(uv) = fracleft 1+(theta-1)(u+v)right- sqrt1+(theta-1)(u+v)^2-4uvtheta(theta-1)2(theta-1)\n\nand for theta = 1\n\nC_1(uv) = uv \n\nIt has a few special cases: \n\nWhen θ = 0, is is the MCopula (Upper Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the WCopula (Lower Frechet-Hoeffding bound)\n\nMore details about Plackett Copula are found in:\n\nJoe, H. (2014). Dependence modeling with copulas. CRC press, Page.164\n\nDetails about the algorithm to generate copula samples can be seen in the following references:\n\nJohnson, Mark E. Multivariate statistical simulation:\nA guide to selecting and generating continuous multivariate distributions.\nVol. 192. John Wiley & Sons, 1987. Page 193.\nNelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.38.\n\n\n\n\n\n","category":"type"},{"location":"miscellaneous/#Farlie-Gumbel-Morgenstern-(FGM)-copula","page":"Other Copulas","title":"Farlie-Gumbel-Morgenstern (FGM) copula","text":"","category":"section"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"FGMCopula","category":"page"},{"location":"miscellaneous/#Copulas.FGMCopula","page":"Other Copulas","title":"Copulas.FGMCopula","text":"FGMCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nFGMCopula(d, θ)\n\nThe Multivariate Farlie-Gumbel-Morgenstern (FGM) copula of dimension d has 2^d-d-1 parameters theta and function\n\nC(boldsymbolu)=prod_i=1^du_i left1+ sum_k=2^dsum_1 leq j_1  cdots  j_k leq d theta_j_1 cdots j_k baru_j_1cdots baru_j_k right\n\nwhere baru=1-u.\n\nMore details about Farlie-Gumbel-Morgenstern (FGM) copula are found in :\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.38.\n\nWe use the stochastic representation of the copula to obtain random samples.\n\nBlier-Wong, C., Cossette, H., & Marceau, E. (2022). Stochastic representation of FGM copulas using multivariate Bernoulli random variables. Computational Statistics & Data Analysis, 173, 107506.\n\nIt has a few special cases:\n\nWhen d=2 and θ = 0, it is the IndependentCopula.\n\n\n\n\n\n","category":"type"},{"location":"miscellaneous/#Survival-Copula","page":"Other Copulas","title":"Survival Copula","text":"","category":"section"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"SurvivalCopula","category":"page"},{"location":"miscellaneous/#Copulas.SurvivalCopula","page":"Other Copulas","title":"Copulas.SurvivalCopula","text":"SurvivalCopula{d,CT,VI}\n\nConstructor\n\nSurvivalCopula(C,indices)\n\nComputes the survival version of any copula on given indices. From a copula C in dimension d, and some indices i_1i_k in 1d, the survival copula associated simply reverses its arguments on chosen indices. For exemple, for d=4 and indices (23), we have: \n\nS(u_1u_4) = C(u_11-u_21-u3u_4)\n\nThis constructor allows to derive new \"survival\" families. For exemple, in bivariate cases, this allows to do \"rotations\". The obtained models can be treated as the starting one, i.e. as a random vector in [0,1]^d with uniforms marginals. \n\n\n\n\n\n","category":"type"},{"location":"miscellaneous/#Empirical-Copulas","page":"Other Copulas","title":"Empirical Copulas","text":"","category":"section"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"EmpiricalCopula","category":"page"},{"location":"miscellaneous/#Copulas.EmpiricalCopula","page":"Other Copulas","title":"Copulas.EmpiricalCopula","text":"EmpiricalCopula{d,MT}\n\nFields:\n\nu::MT - the matrix of observations. \n\nConstructor\n\nEmpiricalCopula(u;pseudos=true)\n\nThe EmpiricalCopula in dimension d is parameterized by a pseudo-data matrix wich should have shape (d,N). Its expression is given as :  \n\nC(mathbf x) = frac1Nsum_i=1^n mathbf 1_mathbf u_i le mathbf x\n\nThis function is very practical, be be aware that this is not a true copula (since mathbf u are only pseudo-observations). The constructor allows you to pass dirctly pseudo-observations (the default) or will compute them for you. You can then compute the cdf of the copula, and sample it through the standard interface.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"CurrentModule = Copulas","category":"page"},{"location":"archimedean/available_models/#Available-Archimedean-models","page":"Available Archimedean models","title":"Available Archimedean models","text":"","category":"section"},{"location":"archimedean/available_models/#Independence-Copula","page":"Available Archimedean models","title":"Independence Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"IndependentGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.IndependentGenerator","page":"Available Archimedean models","title":"Copulas.IndependentGenerator","text":"IndependentGenerator\n\nConstructor\n\nIndependentGenerator()\nIndependentCopula(d)\n\nThe Independent Copula in dimension d is the simplest copula, that has the form : \n\nC(mathbfx) = prod_i=1^d x_i\n\nIt happends to be an Archimedean Copula, with generator : \n\nphi(t) = exp-t\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Frechet-Hoeffding-bounds","page":"Available Archimedean models","title":"Frechet-Hoeffding bounds","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"The Frechet-Hoeffding bounds are availiable through the following functions: ","category":"page"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"MGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.MGenerator","page":"Available Archimedean models","title":"Copulas.MGenerator","text":"MGenerator\n\nConstructor\n\nMGenerator()\nMCopula(d)\n\nThe Upper Frechet-Hoeffding bound is the copula with the greatest value among all copulas. It correspond to comonotone random vectors. \n\nFor any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"WGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.WGenerator","page":"Available Archimedean models","title":"Copulas.WGenerator","text":"WGenerator\n\nConstructor\n\nWGenerator()\nWCopula(d)\n\nThe Lower Frechet-Hoeffding bound is the copula with the lowest value among all copulas. Note that W is only a proper copula when d=2, in greater dimensions it is still the (pointwise) lower bound, but not a copula anymore. For any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Clayton-Copula","page":"Available Archimedean models","title":"Clayton Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"ClaytonGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.ClaytonGenerator","page":"Available Archimedean models","title":"Copulas.ClaytonGenerator","text":"ClaytonGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nClaytonGenerator(θ)\nClaytonCopula(d,θ)\n\nThe Clayton copula in dimension d is parameterized by theta in -1(d-1)infty). It is an Archimedean copula with generator : \n\nphi(t) = left(1+mathrmsign(theta)*tright)^-1frac1theta\n\nIt has a few special cases: \n\nWhen θ = -1/(d-1), it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 0, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Frank-Copula","page":"Available Archimedean models","title":"Frank Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"FrankGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.FrankGenerator","page":"Available Archimedean models","title":"Copulas.FrankGenerator","text":"FrankGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nFrankGenerator(θ)\nFrankCopula(d,θ)\n\nThe Frank copula in dimension d is parameterized by theta in -inftyinfty). It is an Archimedean copula with generator : \n\nphi(t) = -fraclogleft(1+e^-t(e^-theta-1)right)\theta\n\nIt has a few special cases: \n\nWhen θ = -∞, it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Gumbel-Copula","page":"Available Archimedean models","title":"Gumbel Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"GumbelGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.GumbelGenerator","page":"Available Archimedean models","title":"Copulas.GumbelGenerator","text":"GumbelGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelGenerator(θ)\nGumbelCopula(d,θ)\n\nThe Gumbel copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = exp-t^frac1θ\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Ali-Mikhail-Haq-Copula","page":"Available Archimedean models","title":"Ali-Mikhail-Haq Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"AMHGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.AMHGenerator","page":"Available Archimedean models","title":"Copulas.AMHGenerator","text":"AMHGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nAMHGenerator(θ)\nAMHCopula(d,θ)\n\nThe AMH copula in dimension d is parameterized by theta in -11). It is an Archimedean copula with generator : \n\nphi(t) = 1 - frac1-thetae^-t-theta\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Joe-Copula","page":"Available Archimedean models","title":"Joe Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"JoeGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.JoeGenerator","page":"Available Archimedean models","title":"Copulas.JoeGenerator","text":"JoeGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nJoeGenerator(θ)\nJoeCopula(d,θ)\n\nThe Joe copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = 1 - left(1 - e^-tright)^frac1theta\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Gumbel-Barnett-Copula","page":"Available Archimedean models","title":"Gumbel-Barnett Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"GumbelBarnettGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.GumbelBarnettGenerator","page":"Available Archimedean models","title":"Copulas.GumbelBarnettGenerator","text":"GumbelBarnettGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelBarnettGenerator(θ)\nGumbelBarnettCopula(d,θ)\n\nThe Gumbel-Barnett copula is an archimdean copula with generator:\n\nphi(t) = expθ^-1(1-e^t) 0 leq theta leq 1\n\nMore details about Gumbel-Barnett copula are found in:\n\nJoe, H. (2014). Dependence modeling with copulas. CRC press, Page.437\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Inverse-Gaussian-Copula","page":"Available Archimedean models","title":"Inverse-Gaussian Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean models","title":"Available Archimedean models","text":"InvGaussianGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.InvGaussianGenerator","page":"Available Archimedean models","title":"Copulas.InvGaussianGenerator","text":"InvGaussianGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nInvGaussianGenerator(θ)\nInvGaussianCopula(d,θ)\n\nThe Inverse Gaussian copula in dimension d is parameterized by theta in 0infty). It is an Archimedean copula with generator :\n\nphi(t) = expfrac(1-sqrt1+2θ^2tθ\n\nMore details about Inverse Gaussian Archimedean copula are found in :\n\nMai, Jan-Frederik, and Matthias Scherer. Simulating copulas: stochastic models, sampling algorithms, and applications. Vol. 6. # N/A, 2017. Page 74.\n\nIt has a few special cases:\n\nWhen θ = 0, it is the IndependentCopula\n\n\n\n\n\n","category":"type"},{"location":"","page":"Copulas.jl package","title":"Copulas.jl package","text":"CurrentModule = Copulas","category":"page"},{"location":"","page":"Copulas.jl package","title":"Copulas.jl package","text":"The Copulas.jl package provides a large collection of models for dependence structures between random variables, so-called copulas, with a good selection of features: ","category":"page"},{"location":"","page":"Copulas.jl package","title":"Copulas.jl package","text":"random number generation\nevaluation of density (pdf) and distribution functions (cdf)\nfitting procedures\ncopula-based multivariate distributions through Sklar's theorem\netc.","category":"page"},{"location":"","page":"Copulas.jl package","title":"Copulas.jl package","text":"Since copulas are distribution functions, we fully comply with the Distributions.jl API. This compliance allows interoperability with other packages based on this API such as, e.g., Turing.jl.","category":"page"},{"location":"","page":"Copulas.jl package","title":"Copulas.jl package","text":"Usually, people that use and work with copulas turn to the R package copula. While still well-maintained and regularly updated, the R package copula is a complicated code base for readability, extensibility, reliability, and maintenance.","category":"page"},{"location":"","page":"Copulas.jl package","title":"Copulas.jl package","text":"This is an attempt to provide a very light, fast, reliable and maintainable copula implementation in native Julia. Among others, one of the notable benefits of such a native implementation is the floating point type agnosticism, i.e., compatibility with BigFloat, DoubleFloats, MultiFloats and other kind of numbers.","category":"page"},{"location":"","page":"Copulas.jl package","title":"Copulas.jl package","text":"The package revolves around two main types: ","category":"page"},{"location":"","page":"Copulas.jl package","title":"Copulas.jl package","text":"Copula, the abstract mother type of all copulas\nSklarDist, the type for multivariate compound distribution through Sklar's theorem. ","category":"page"},{"location":"","page":"Copulas.jl package","title":"Copulas.jl package","text":"Contributions are welcomed: If you want to contribute to the package, ask a question, found a bug or simply want to chat, do not hesitate to open an issue on this repo. ","category":"page"},{"location":"","page":"Copulas.jl package","title":"Copulas.jl package","text":"Citation information: Please use the following bibtex if you want to cite this work: ","category":"page"},{"location":"","page":"Copulas.jl package","title":"Copulas.jl package","text":"@software{oskar_laverny_2023_10084669,\n  author       = {Oskar Laverny},\n  title        = {Copulas.jl: A fully `Distributions.jl`-compliant copula package},\n  year         = 2022+,\n  doi          = {10.5281/zenodo.6652672},\n  url          = {https://doi.org/10.5281/zenodo.6652672}\n}","category":"page"}]
}
