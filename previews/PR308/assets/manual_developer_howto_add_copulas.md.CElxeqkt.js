import{_ as a,c as o,o as i,az as t}from"./chunks/framework.BdmTESWr.js";const h=JSON.parse('{"title":"How to add new copulas","description":"","frontmatter":{},"headers":[],"relativePath":"manual/developer_howto_add_copulas.md","filePath":"manual/developer_howto_add_copulas.md","lastUpdated":null}'),l={name:"manual/developer_howto_add_copulas.md"};function d(n,e,r,c,s,p){return i(),o("div",null,[...e[0]||(e[0]=[t('<h1 id="How-to-add-new-copulas" tabindex="-1">How to add new copulas <a class="header-anchor" href="#How-to-add-new-copulas" aria-label="Permalink to &quot;How to add new copulas {#How-to-add-new-copulas}&quot;">​</a></h1><p>This guide shows how to extend Copulas.jl with new models. Start with the minimal contracts, then see family-specific notes.</p><h2 id="Minimal-contracts" tabindex="-1">Minimal contracts <a class="header-anchor" href="#Minimal-contracts" aria-label="Permalink to &quot;Minimal contracts {#Minimal-contracts}&quot;">​</a></h2><ul><li><p>Type: subtype <code>Copula{d}</code> or reuse existing wrappers (e.g., <code>SurvivalCopula</code>, <code>SubsetCopula</code>).</p></li><li><p>Evaluation: implement <code>_cdf(C::YourCopula, u)</code>; optionally <code>Distributions._logpdf</code> for performance.</p></li><li><p>Parameters: define <code>Distributions.params(C)::NamedTuple</code> and a constructor <code>YourCopula(d, ...)</code>.</p></li><li><p>Fitting (optional):</p><ul><li><p><code>_available_fitting_methods(::Type{YourCopula}) = (:mle, :itau, :irho, :ibeta)</code> (or a subset, or others)</p></li><li><p><code>_fit(::Type{YourCopula}, U, ::Val{:mymethod}; kwargs...) = (Ĉ, (; vcov=?, converged=?, ...))</code></p></li><li><p>For generic bindings, also implement <code>_unbound_params</code>, <code>_rebound_params</code>, and <code>_example</code>.</p></li></ul></li></ul><p>Family-specific guidance:</p><h2 id="Archimedean" tabindex="-1">Archimedean <a class="header-anchor" href="#Archimedean" aria-label="Permalink to &quot;Archimedean {#Archimedean}&quot;">​</a></h2><p>Prefer implementing a <code>Generator</code> (Williamson-transformable). Provide <code>ϕ</code>, <code>ϕ⁻¹</code>, and <code>williamson_dist</code>. See the Archimedean manual.</p><h2 id="Extreme-value" tabindex="-1">Extreme value <a class="header-anchor" href="#Extreme-value" aria-label="Permalink to &quot;Extreme value {#Extreme-value}&quot;">​</a></h2><p>Implement the Pickands dependence function <code>A(C::ExtremeValueCopula)</code>. Sampling/logpdf fallbacks exist; specialized fast-paths are welcome.</p><h2 id="Archimax" tabindex="-1">Archimax <a class="header-anchor" href="#Archimax" aria-label="Permalink to &quot;Archimax {#Archimax}&quot;">​</a></h2><p>Compose an Archimedean generator with an extreme-value tail as in <code>ArchimaxCopula</code>. Provide the pair and leverage existing building blocks.</p><h2 id="Elliptical" tabindex="-1">Elliptical <a class="header-anchor" href="#Elliptical" aria-label="Permalink to &quot;Elliptical {#Elliptical}&quot;">​</a></h2><p>Reuse <code>GaussianCopula</code> or <code>TCopula</code> patterns: parameterize with correlation (and ν for t). Ensure <code>Distributions.params</code> and fit hooks.</p><h2 id="Miscellaneous/others" tabindex="-1">Miscellaneous/others <a class="header-anchor" href="#Miscellaneous/others" aria-label="Permalink to &quot;Miscellaneous/others {#Miscellaneous/others}&quot;">​</a></h2><p>For specialized bivariate families (Plackett, FGMC, Raftery...), follow existing files as templates. Implement <code>_cdf</code> and, when easy, <code>Distributions._logpdf</code> and conditioning distortions.</p><h2 id="Extras-and-tooling" tabindex="-1">Extras and tooling <a class="header-anchor" href="#Extras-and-tooling" aria-label="Permalink to &quot;Extras and tooling {#Extras-and-tooling}&quot;">​</a></h2><ul><li><p>Conditioning/subsetting: add specialized <code>Distortion</code>/<code>ConditionalCopula</code> only when it yields clear speedups.</p></li><li><p>Show: extend pretty-printing in <code>src/show.jl</code> when adding notable types.</p></li><li><p>Tests and docs: add a short example to the bestiary and a smoke test to <code>test/GenericTests.jl</code>.</p></li></ul>',17)])])}const m=a(l,[["render",d]]);export{h as __pageData,m as default};
