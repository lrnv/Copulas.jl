var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"H. Joe. Multivariate Models and Multivariate Dependence Concepts (CRC press, 1997).\n\n\n\nU. Cherubini, E. Luciano and W. Vecchiato. Copula Methods in Finance (John Wiley & Sons, 2004).\n\n\n\nR. B. Nelsen. An Introduction to Copulas. 2nd ed Edition, Springer Series in Statistics (Springer, New York, 2006).\n\n\n\nH. Joe. Dependence Modeling with Copulas (CRC press, 2014).\n\n\n\nJ.-F. Mai, M. Scherer and C. Czado. Simulating Copulas: Stochastic Models, Sampling Algorithms, and Applications. 2nd edition Edition, Vol. 6 of Series in Quantitative Finance (World Scientific, New Jersey, 2017).\n\n\n\nF. Durante and C. Sempi. Principles of Copula Theory (Chapman and Hall/CRC, 2015).\n\n\n\nC. Czado. Analyzing Dependent Data with Vine Copulas: A Practical Guide With R. Vol. 222 of Lecture Notes in Statistics (Springer International Publishing, Cham, 2019).\n\n\n\nJ. Größer and O. Okhrin. Copulae: An Overview and Recent Developments. WIREs Computational Statistics (2021).\n\n\n\nA. Sklar. Fonctions de Repartition à n Dimension et Leurs Marges. Université Paris 8, 1–3 (1959).\n\n\n\nT. Lux and A. Papapantoleon. Improved Fréchet-Hoeffding Bounds on d-Copulas and Applications in Model-Free Finance, arXiv:1602.08894 math, q-fin.\n\n\n\nR. Kaas, J. Dhaene, D. Vyncke, M. J. Goovaerts and M. Denuit. A Simple Geometric Proof That Comonotonic Risks Have the Convex-Largest Sum. ASTIN Bulletin: The Journal of the IAA 32, 71–80 (2002).\n\n\n\nL. Hua and H. Joe. Multivariate Dependence Modeling Based on Comonotonic Factors. Journal of Multivariate Analysis 155, 317–333 (2017).\n\n\n\nG. Frahm, M. Junker and A. Szimayer. Elliptical Copulas: Applicability and Limitations. Statistics & Probability Letters 63, 275–286 (2003).\n\n\n\nE. Gómez, M. A. Gómez-villegas and J. M. Marín. A Survey on Continuous Elliptical Vector Distributions. Revista Matemática Complutense 16, 345–361 (2003).\n\n\n\nM.-P. Côté and C. Genest. Dependence in a Background Risk Model. Journal of Multivariate Analysis 172, 28–46 (2019).\n\n\n\nG. Elidan. Copulas in Machine Learning. In: Copulae in Mathematical and Quantitative Finance, Vol. 213, edited by P. Jaworski, F. Durante and W. K. Härdle (Springer Berlin Heidelberg, Berlin, Heidelberg, 2013); pp. 39–60.\n\n\n\nJ. Friedman, T. Hastie and R. Tibshirani. Applications of the Lasso and Grouped Lasso to the Estimation of Sparse Graphical Models (Technical report, Stanford University, 2010).\n\n\n\nD. Müller and C. Czado. Dependence Modelling in Ultra High Dimensions with Vine Copulas and the Graphical Lasso. Computational Statistics & Data Analysis 137, 211–232 (2019).\n\n\n\nA. Derumigny and J.-D. Fermanian. Identifiability and Estimation of Meta-Elliptical Copula Generators. Journal of Multivariate Analysis, 104962 (2022).\n\n\n\nA. J. McNeil and J. Nešlehová. Multivariate Archimedean Copulas, d -Monotone Functions and L1 -Norm Symmetric Distributions. The Annals of Statistics 37, 3059–3097 (2009).\n\n\n\nR. E. Williamson. On multiply monotone functions and their laplace transforms (Mathematics Division, Office of Scientific Research, US Air Force, 1955).\n\n\n\nA. J. McNeil. Sampling Nested Archimedean Copulas. Journal of Statistical Computation and Simulation 78, 567–581 (2008).\n\n\n\nM. Hofert, M. Mächler and A. J. McNeil. Archimedean Copulas in High Dimensions: Estimators and Numerical Challenges Motivated by Financial Applications. Journal de la Société Française de Statistique 154, 25–63 (2013).\n\n\n\nM. Hofert. Sampling Nested Archimedean Copulas with Applications to CDO Pricing. Ph.D. Thesis, Universität Ulm (2010).\n\n\n\nM. Hofert and D. Pham. Densities of Nested Archimedean Copulas. Journal of Multivariate Analysis 118, 37–52 (2013).\n\n\n\nA. J. McNeil and J. Nešlehová. From Archimedean to Liouville Copulas. Journal of Multivariate Analysis 101, 1772–1790 (2010).\n\n\n\nH. Cossette, S.-P. Gadoury, E. Marceau and I. Mtalai. Hierarchical Archimedean Copulas through Multivariate Compound Distributions. Insurance: Mathematics and Economics 76, 1–13 (2017).\n\n\n\nH. Cossette, E. Marceau, I. Mtalai and D. Veilleux. Dependent Risk Models with Archimedean Copulas: A Computational Strategy Based on Common Mixtures and Applications. Insurance: Mathematics and Economics 78, 53–71 (2018).\n\n\n\nC. Genest, J. Nešlehová and J. Ziegel. Inference in Multivariate Archimedean Copula Models. TEST 20, 223–256 (2011).\n\n\n\nE. Di Bernardino and D. Rulliere. On Certain Transformations of Archimedean Copulas: Application to the Non-Parametric Estimation of Their Generators. Dependence Modeling 1, 1–36 (2013).\n\n\n\nE. Di Bernardino and D. Rullière. On an Asymmetric Extension of Multivariate Archimedean Copulas Based on Quadratic Form. Dependence Modeling 4 (2016).\n\n\n\nK. Cooray. Strictly Archimedean Copulas with Complete Association for Multivariate Dependence Based on the Clayton Family. Dependence Modeling 6, 1–18 (2018).\n\n\n\nJ. Spreeuw. Archimedean Copulas Derived from Utility Functions. Insurance: Mathematics and Economics 59, 235–242 (2014).\n\n\n\nP. Deheuvels. La Fonction de Dépendance Empirique et Ses Propriétés. Académie Royale de Belgique. Bulletin de la Classe des Sciences 65, 274–292 (1979).\n\n\n\nJ. Segers, M. Sibuya and H. Tsukahara. The Empirical Beta Copula. Journal of Multivariate Analysis 155, 35–51 (2017).\n\n\n\nA. Cuberos, E. Masiello and V. Maume-Deschamps. Copulas Checker-Type Approximations: Application to Quantiles Estimation of Sums of Dependent Random Variables. Communications in Statistics - Theory and Methods, 1–19 (2019).\n\n\n\nP. Mikusiński and M. D. Taylor. Some Approximations of N-Copulas. Metrika 72, 385–414 (2010).\n\n\n\nF. Durante, E. Foscolo, J. A. Rodríguez-Lallena and M. Úbeda-Flores. A Method for Constructing Higher-Dimensional Copulas. Statistics 46, 387–404 (2012).\n\n\n\nF. Durante, J. Fernández Sánchez and C. Sempi. Multivariate Patchwork Copulas: A Unified Approach with Applications to Partial Comonotonicity. Insurance: Mathematics and Economics 53, 897–905 (2013).\n\n\n\nF. Durante, J. Fernández-Sánchez, J. J. Quesada-Molina and M. Úbeda-Flores. Convergence Results for Patchwork Copulas. European Journal of Operational Research 247, 525–531 (2015).\n\n\n\nO. Laverny. Empirical and Non-Parametric Copula Models with the Cort R Package. Journal of Open Source Software 5, 2653 (2020).\n\n\n\nC. Genest, J. Nešlehová and N. Ben Ghorbal. Estimators Based on Kendall's Tau in Multivariate Copula Models. Australian & New Zealand Journal of Statistics 53, 157–177 (2011).\n\n\n\nG. A. Fredricks and R. B. Nelsen. On the Relationship between Spearman's Rho and Kendall's Tau for Pairs of Continuous Random Variables. Journal of Statistical Planning and Inference 137, 2143–2150 (2007).\n\n\n\nA. Derumigny and J.-D. Fermanian. À propos des tests de l'hypothèse simplificatrice pour les copules conditionnelles. JDS2017, 6 (2017).\n\n\n\nM. E. Johnson. Multivariate statistical simulation: A guide to selecting and generating continuous multivariate distributions. Vol. 192 (John Wiley & Sons, 1987).\n\n\n\nT. Saali, M. Mesfioui and A. Shabri. Multivariate extension of Raftery copula. Mathematics 11, 414 (2023).\n\n\n\n","category":"page"},{"location":"references/","page":"References","title":"References","text":"F. Durante, G. Puccetti, M. Scherer and S. Vanduffel. The Vine Philosopher. Dependence Modeling 5, 256–267 (2017).\n\n\n\nM. Hofert and M. Mächler. A Graphical Goodness-of-Fit Test for Dependence Models in Higher Dimensions. Journal of Computational and Graphical Statistics 23, 700–716 (2014).\n\n\n\nE. Di Bernardino and D. Rullière. Distortions of Multivariate Distribution Functions and Associated Level Curves: Applications in Multivariate Risk Theory. Insurance: Mathematics and Economics 53, 190–205 (2013).\n\n\n\nW. Zhu, K. S. Tan and C.-W. Wang. Modeling Multicountry Longevity Risk With Mortality Dependence: A Lévy Subordinated Hierarchical Archimedean Copulas Approach: Modeling Multicountry Longevity Risk with Mortality Dependence. Journal of Risk and Insurance 84, 477–493 (2017).\n\n\n\nN. Uyttendaele. On the Estimation of Nested Archimedean Copulas: A Theoretical and an Experimental Comparison. Computational Statistics 33, 1047–1070 (2018).\n\n\n\nR. T. Steck. Time-Varying Hierarchical Archimedean Copulas Using Adaptively Simulated Critical Values. Ph.D. Thesis, Humboldt-Universität zu Berlin, Wirtschaftswissenschaftliche Fakultät (2015).\n\n\n\nJ. Górecki, M. Hofert and M. Holeňa. On Structure, Family and Parameter Estimation of Hierarchical Archimedean Copulas, arXiv:1611.09225 stat.\n\n\n\nJ. Górecki, M. Hofert and M. Holeňa. Kendall's Tau and Agglomerative Clustering for Structure Determination of Hierarchical Archimedean Copulas. Dependence Modeling 5, 75–87 (2017).\n\n\n\nD. Müller and C. Czado. Representing Sparse Gaussian DAGs as Sparse R-vines Allowing for Non-Gaussian Dependence. Journal of Computational and Graphical Statistics 27, 334–344 (2018).\n\n\n\nT. Nagler and C. Czado. Evading the Curse of Dimensionality in Nonparametric Density Estimation with Simplified Vine Copulas. Journal of Multivariate Analysis 151, 69–89 (2016).\n\n\n\nT. Nagler. Nonparametric Estimation in Simplified Vine Copula Models. Ph.D. Thesis, Technische Universität München (2018).\n\n\n\nH. Cossette, E. Marceau and I. Mtalai. Collective Risk Models with Hierarchical Archimedean Copulas. SSRN Electronic Journal (2018).\n\n\n\nC. Czado, S. Jeske and M. Hofmann. Selection Strategies for Regular Vine Copulae. Journal de la Société Française de Statistique 154, 174–191 (2013).\n\n\n\nB. Gräler. Modelling Skewed Spatial Random Fields through the Spatial Vine Copula. Spatial Statistics 10, 87–102 (2014).\n\n\n\nF. Durante, G. Puccetti, M. Scherer and S. Vanduffel. The Vine Philosopher. Dependence Modeling 5, 256–267 (2017).\n\n\n\nD. T. Müller. Selection of Sparse Vine Copulas in Ultra High Dimensions. Ph.D. Thesis, Technische Universität München (2017).\n\n\n\nA. Derumigny and J.-D. Fermanian. A Classification Point-of-View about Conditional Kendall's Tau, arXiv:1806.09048 math, stat.\n\n\n\n","category":"page"},{"location":"examples/lossalae/#Loss-Alae-fitting-example.","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"","category":"section"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"Loss-Alae is a dataset that is provided in the R copula package, which documentation can be found there. This dataset corresponds to claims received by an insurer, where the two variables loss and alae respectively correspond to the amount of the loss and to associated expenses. There is a certain dependence structure between the two, and the actual distribution generating this data is of course unknown. Our task here is to provide a parametric model that approximates this distribution. ","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"Let us first import the data : ","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"using Copulas, Distributions, Plots\ndata = [\n    10.0 24.0 45.0 51.0 60.0 74.0 75.0 78.0 87.0 100.0 115.0 123.0 133.0 140.0 147.0 147.0 165.0 192.0 200.0 300.0 308.0 311.0 326.0 350.0 350.0 400.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 500.0 520.0 578.0 600.0 600.0 634.0 667.0 700.0 750.0 750.0 750.0 750.0 750.0 750.0 750.0 798.0 800.0 833.0 833.0 875.0 900.0 909.0 916.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1000.0 1075.0 1091.0 1100.0 1122.0 1125.0 1200.0 1200.0 1200.0 1250.0 1250.0 1250.0 1250.0 1250.0 1250.0 1250.0 1250.0 1298.0 1300.0 1300.0 1310.0 1333.0 1375.0 1450.0 1456.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1500.0 1522.0 1545.0 1600.0 1633.0 1658.0 1666.0 1666.0 1667.0 1667.0 1701.0 1750.0 1750.0 1750.0 1750.0 1800.0 1800.0 1800.0 1800.0 1800.0 1892.0 1913.0 1937.0 1947.0 1974.0 1980.0 1993.0 1994.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2000.0 2002.0 2018.0 2022.0 2057.0 2067.0 2070.0 2100.0 2125.0 2180.0 2250.0 2250.0 2250.0 2303.0 2312.0 2325.0 2400.0 2405.0 2428.0 2486.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2500.0 2600.0 2600.0 2600.0 2700.0 2700.0 2730.0 2749.0 2750.0 2750.0 2776.0 2787.0 2850.0 2917.0 2922.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3000.0 3162.0 3250.0 3250.0 3269.0 3300.0 3300.0 3333.0 3400.0 3409.0 3436.0 3480.0 3486.0 3494.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3600.0 3685.0 3750.0 3750.0 3750.0 3750.0 3750.0 3750.0 3750.0 3750.0 3903.0 3941.0 4000.0 4000.0 4000.0 4000.0 4000.0 4000.0 4000.0 4000.0 4000.0 4000.0 4000.0 4000.0 4000.0 4000.0 4000.0 4000.0 4038.0 4250.0 4250.0 4286.0 4346.0 4350.0 4465.0 4500.0 4500.0 4500.0 4500.0 4500.0 4500.0 4500.0 4500.0 4535.0 4568.0 4600.0 4675.0 4700.0 4750.0 4750.0 4750.0 4833.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5000.0 5003.0 5010.0 5097.0 5115.0 5250.0 5390.0 5400.0 5500.0 5500.0 5500.0 5500.0 5500.0 5500.0 5500.0 5500.0 5500.0 5577.0 5600.0 5600.0 5619.0 5625.0 5625.0 5655.0 5750.0 5750.0 6000.0 6000.0 6000.0 6000.0 6000.0 6000.0 6000.0 6000.0 6000.0 6000.0 6000.0 6000.0 6000.0 6000.0 6000.0 6000.0 6066.0 6075.0 6240.0 6403.0 6406.0 6441.0 6500.0 6500.0 6500.0 6500.0 6500.0 6500.0 6500.0 6500.0 6538.0 6550.0 6666.0 6719.0 6750.0 6750.0 6750.0 6907.0 7000.0 7000.0 7000.0 7000.0 7000.0 7000.0 7000.0 7000.0 7000.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7500.0 7525.0 7625.0 7820.0 7857.0 7875.0 7961.0 8000.0 8000.0 8000.0 8000.0 8000.0 8000.0 8000.0 8000.0 8036.0 8223.0 8250.0 8330.0 8333.0 8333.0 8333.0 8333.0 8366.0 8500.0 8500.0 8500.0 8500.0 8500.0 8500.0 8500.0 8500.0 8520.0 8555.0 8640.0 8703.0 8750.0 8827.0 8939.0 9000.0 9000.0 9000.0 9000.0 9000.0 9000.0 9000.0 9000.0 9000.0 9093.0 9250.0 9250.0 9250.0 9427.0 9500.0 9500.0 9500.0 9500.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10000.0 10081.0 10199.0 10250.0 10250.0 10899.0 11000.0 11000.0 11000.0 11000.0 11000.0 11000.0 11000.0 11000.0 11000.0 11000.0 11097.0 11120.0 11280.0 11425.0 11500.0 11667.0 11723.0 11750.0 11920.0 12000.0 12000.0 12000.0 12000.0 12000.0 12000.0 12000.0 12000.0 12100.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12500.0 12566.0 12608.0 12800.0 12821.0 12830.0 12875.0 12875.0 13000.0 13000.0 13242.0 13333.0 13450.0 13500.0 13500.0 13500.0 13500.0 13750.0 13750.0 13825.0 14000.0 14000.0 14000.0 14000.0 14000.0 14500.0 14500.0 14598.0 14721.0 14750.0 14875.0 14983.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15000.0 15001.0 15069.0 15078.0 15086.0 15285.0 15500.0 15500.0 15500.0 15552.0 15643.0 15833.0 16000.0 16153.0 16486.0 16500.0 16500.0 16500.0 16500.0 16500.0 16500.0 16500.0 16666.0 16667.0 16667.0 16667.0 17258.0 17327.0 17350.0 17500.0 17500.0 17500.0 17500.0 17500.0 17500.0 17500.0 17500.0 17500.0 17770.0 18000.0 18000.0 18000.0 18000.0 18000.0 18000.0 18136.0 18175.0 18333.0 18358.0 18444.0 18500.0 18500.0 18500.0 18500.0 18544.0 18706.0 18706.0 18750.0 18750.0 19000.0 19000.0 19000.0 19375.0 19500.0 19500.0 19500.0 19500.0 19622.0 19833.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20000.0 20800.0 20802.0 20863.0 21000.0 21000.0 21000.0 21000.0 21000.0 21013.0 21110.0 21136.0 21274.0 21557.0 21666.0 21678.0 21701.0 21875.0 21951.0 22000.0 22000.0 22000.0 22000.0 22035.0 22105.0 22500.0 22500.0 22500.0 22500.0 22500.0 22500.0 22500.0 22500.0 22500.0 22500.0 22500.0 22940.0 22963.0 23000.0 23000.0 23000.0 23300.0 23320.0 23759.0 24000.0 24014.0 24334.0 24357.0 24464.0 24570.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25000.0 25002.0 25045.0 25187.0 25250.0 25396.0 25507.0 25700.0 25789.0 25800.0 25883.0 26000.0 26000.0 26075.0 26250.0 26250.0 27000.0 27000.0 27300.0 27500.0 27500.0 27500.0 27500.0 28000.0 28130.0 28281.0 28333.0 28650.0 28750.0 29026.0 29890.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30000.0 30001.0 30064.0 30750.0 30811.0 31000.0 31005.0 31250.0 31428.0 31882.0 32000.0 32000.0 32000.0 32000.0 32500.0 32500.0 32500.0 32500.0 32500.0 32500.0 32500.0 33073.0 33333.0 33333.0 33868.0 34000.0 34186.0 34190.0 34625.0 34997.0 35000.0 35000.0 35000.0 35000.0 35000.0 35000.0 35000.0 35000.0 35000.0 35000.0 35000.0 35000.0 35000.0 35000.0 35104.0 36573.0 37500.0 37749.0 37886.0 37936.0 38065.0 38200.0 38696.0 38843.0 38998.0 39060.0 40000.0 40000.0 40000.0 40000.0 40000.0 40000.0 40000.0 40000.0 40000.0 40000.0 40000.0 40052.0 40461.0 40500.0 41000.0 41807.0 41845.0 42000.0 42500.0 42717.0 43000.0 43000.0 43500.0 43500.0 44887.0 45000.0 45000.0 45000.0 45000.0 45000.0 45000.0 45000.0 45000.0 45000.0 45000.0 45000.0 45000.0 45000.0 45666.0 45955.0 46000.0 46250.0 47370.0 47500.0 47500.0 47500.0 47500.0 47500.0 47500.0 47500.0 48000.0 48349.0 49050.0 49412.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50000.0 50147.0 50176.0 50500.0 50899.0 51015.0 51085.0 52500.0 54000.0 54250.0 55000.0 55000.0 55000.0 55000.0 55000.0 55651.0 56057.0 56062.0 57000.0 57500.0 57500.0 57808.0 58064.0 58101.0 59232.0 60000.0 60000.0 60000.0 60000.0 60000.0 60000.0 60000.0 60000.0 60087.0 60250.0 62079.0 62500.0 62959.0 63000.0 65000.0 65000.0 65000.0 65000.0 65544.0 65613.0 66933.0 67500.0 67500.0 70000.0 70000.0 70000.0 70000.0 70000.0 70000.0 70000.0 70001.0 71000.0 71459.0 71710.0 72000.0 72500.0 73000.0 73000.0 73157.0 73614.0 74700.0 74970.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 75000.0 76100.0 76991.0 80000.0 80000.0 80000.0 82500.0 83500.0 84000.0 85000.0 86311.0 86667.0 87500.0 88000.0 88803.0 90000.0 90000.0 90000.0 90000.0 90451.0 92317.0 92522.0 93000.0 93868.0 95000.0 95963.0 97000.0 97000.0 98087.0 98844.0 99632.0 99991.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 100000.0 101000.0 101276.0 101422.0 103127.0 103264.0 104518.0 104767.0 105000.0 105000.0 108000.0 109500.0 110000.0 110000.0 110000.0 110659.0 112000.0 115000.0 120000.0 120475.0 124999.0 125000.0 125000.0 125000.0 125000.0 125000.0 125000.0 130000.0 130050.0 130555.0 135000.0 135000.0 137500.0 138133.0 140000.0 140837.0 145151.0 149750.0 150000.0 150000.0 150000.0 150000.0 150000.0 150000.0 150494.0 151084.0 151152.0 152744.0 153874.0 155885.0 157499.0 160300.0 161187.0 166500.0 167000.0 168751.0 170000.0 178000.0 183095.0 184925.0 187113.0 192500.0 200000.0 200000.0 200000.0 200000.0 200000.0 200000.0 200000.0 200678.0 209122.0 210000.0 210000.0 215231.0 215303.0 225000.0 225000.0 225562.0 235000.0 244000.0 245834.0 250000.0 250000.0 250000.0 251981.0 260000.0 270000.0 275000.0 275000.0 275000.0 275000.0 278705.0 289146.0 289428.0 300000.0 300000.0 300000.0 300000.0 300000.0 300000.0 301090.0 316694.0 320000.0 337500.0 365600.0 370005.0 371654.0 373915.0 375000.0 379940.0 412998.0 432500.0 445000.0 449663.0 465000.0 474400.0 475000.0 480529.0 496559.0 500000.0 500000.0 500000.0 500000.0 500000.0 500000.0 500000.0 750000.0 838701.0 854867.0 1.0e6 1.0e6 2.173595e6; 3806.0 5658.0 321.0 305.0 758.0 8768.0 1805.0 78.0 46534.0 489.0 20.0 60790.0 2305.0 1940.0 125.0 2881.0 5235.0 915.0 1361.0 348.0 30735.0 1081.0 4201.0 76.0 1255.0 1336.0 164.0 179.0 723.0 1193.0 1406.0 1480.0 1527.0 1938.0 1995.0 2215.0 2706.0 2778.0 2936.0 3815.0 4419.0 4495.0 5371.0 5609.0 6350.0 9317.0 10246.0 14752.0 19261.0 2373.0 1925.0 1458.0 5057.0 211.0 2369.0 748.0 748.0 1737.0 2147.0 3184.0 3564.0 4788.0 7865.0 1553.0 5773.0 7607.0 9900.0 4565.0 968.0 9215.0 5522.0 321.0 407.0 450.0 464.0 484.0 780.0 946.0 1088.0 1289.0 1320.0 1352.0 1872.0 1940.0 2293.0 2302.0 2481.0 2488.0 2495.0 2750.0 3388.0 3434.0 4149.0 4927.0 5675.0 6525.0 6557.0 6626.0 6829.0 6867.0 7797.0 8523.0 9412.0 11124.0 20564.0 2168.0 2199.0 170.0 1422.0 1224.0 984.0 1251.0 2456.0 365.0 371.0 479.0 531.0 774.0 2090.0 2488.0 3523.0 1032.0 1409.0 2507.0 1459.0 999.0 9459.0 2750.0 3911.0 60.0 301.0 318.0 436.0 834.0 1275.0 1315.0 1686.0 2286.0 2422.0 2919.0 3247.0 3598.0 4701.0 4860.0 4870.0 6528.0 6990.0 7689.0 8131.0 8228.0 10018.0 11994.0 17146.0 1614.0 415.0 3537.0 2585.0 337.0 261.0 12323.0 526.0 2413.0 12426.0 150.0 198.0 947.0 1930.0 776.0 1791.0 2825.0 4644.0 7829.0 1185.0 1578.0 293.0 10564.0 775.0 2706.0 1946.0 4851.0 584.0 700.0 978.0 999.0 1190.0 1395.0 1699.0 1968.0 1989.0 2453.0 2503.0 2644.0 2748.0 3089.0 3119.0 3496.0 3597.0 4505.0 4756.0 5392.0 5439.0 5491.0 5767.0 5963.0 6033.0 6858.0 6995.0 7488.0 8401.0 8650.0 9393.0 17222.0 5971.0 1322.0 610.0 11305.0 5697.0 6201.0 302.0 2387.0 9584.0 2182.0 8204.0 14528.0 803.0 19407.0 5728.0 620.0 960.0 6657.0 5417.0 50.0 115.0 145.0 184.0 415.0 540.0 544.0 656.0 852.0 895.0 1053.0 1059.0 1123.0 1150.0 1862.0 1992.0 2263.0 2268.0 2325.0 2439.0 2462.0 2874.0 2939.0 3352.0 3411.0 3583.0 4248.0 4263.0 4451.0 4669.0 4729.0 4805.0 4950.0 5000.0 5063.0 5075.0 5321.0 5385.0 5453.0 5678.0 5740.0 5758.0 6027.0 6209.0 6763.0 7000.0 7362.0 7369.0 7421.0 7467.0 8083.0 8185.0 8813.0 9073.0 9652.0 12580.0 12644.0 14842.0 824.0 2168.0 4914.0 1109.0 3531.0 112158.0 2506.0 1491.0 4540.0 4054.0 2603.0 5120.0 1715.0 7802.0 190.0 420.0 749.0 1301.0 1495.0 1594.0 1618.0 1693.0 1899.0 1952.0 2103.0 2237.0 2534.0 2949.0 3007.0 3154.0 3318.0 3365.0 5831.0 7176.0 8420.0 10330.0 11561.0 11861.0 12545.0 14485.0 18206.0 32390.0 339.0 35.0 10279.0 7081.0 690.0 3020.0 9251.0 495.0 1974.0 12072.0 15953.0 5374.0 7423.0 378.0 565.0 784.0 787.0 980.0 2531.0 2691.0 3395.0 3641.0 5079.0 5381.0 7615.0 7936.0 11240.0 25176.0 3063.0 1716.0 670.0 1369.0 1536.0 3153.0 3556.0 3637.0 4224.0 9951.0 14319.0 3689.0 50.0 88.0 298.0 355.0 1390.0 1756.0 1773.0 2411.0 2914.0 3370.0 3499.0 3640.0 3971.0 4439.0 4898.0 20142.0 5687.0 2008.0 2115.0 6522.0 18656.0 1786.0 1534.0 392.0 395.0 2316.0 2406.0 3046.0 3358.0 4420.0 7669.0 1542.0 6180.0 6004.0 2588.0 5586.0 2894.0 5293.0 32362.0 5588.0 25.0 135.0 137.0 150.0 187.0 310.0 333.0 492.0 571.0 622.0 627.0 704.0 721.0 830.0 1000.0 1162.0 1242.0 1316.0 1398.0 1764.0 1764.0 1849.0 1920.0 1965.0 2140.0 2331.0 2391.0 2646.0 2932.0 3289.0 3427.0 3604.0 3617.0 4155.0 4158.0 4336.0 4445.0 4618.0 4696.0 4756.0 4885.0 4964.0 5012.0 5235.0 5614.0 5615.0 5747.0 6226.0 6292.0 6719.0 6843.0 7009.0 7009.0 7044.0 7204.0 7279.0 7381.0 8085.0 8102.0 8541.0 8758.0 8897.0 8909.0 9858.0 12812.0 13165.0 13576.0 14683.0 16014.0 16099.0 25477.0 37264.0 5093.0 6101.0 9437.0 20383.0 4293.0 44666.0 9318.0 101.0 1293.0 1309.0 1905.0 2874.0 3412.0 3833.0 7459.0 10344.0 7001.0 4346.0 6387.0 2798.0 5571.0 29211.0 974.0 7897.0 34474.0 492.0 904.0 1307.0 2101.0 2754.0 3719.0 4389.0 5823.0 7106.0 7313.0 7322.0 8520.0 10136.0 11741.0 12383.0 149962.0 1523.0 6244.0 6765.0 5111.0 274.0 9084.0 185.0 895.0 1194.0 1789.0 3698.0 4914.0 8154.0 17397.0 12277.0 3295.0 9046.0 18254.0 518.0 2524.0 3919.0 2383.0 50.0 1900.0 3431.0 3451.0 3944.0 10593.0 12909.0 15780.0 16246.0 150.0 266.0 332.0 500.0 508.0 562.0 695.0 754.0 1351.0 1449.0 1557.0 2615.0 2873.0 3285.0 3775.0 3986.0 4057.0 4738.0 4949.0 5006.0 5244.0 5457.0 5732.0 7064.0 7083.0 7318.0 7340.0 7624.0 7894.0 7904.0 8711.0 11488.0 11724.0 11949.0 13281.0 13342.0 13620.0 15771.0 17213.0 17595.0 28311.0 65020.0 1687.0 13517.0 2763.0 479.0 54266.0 18113.0 1942.0 2099.0 2335.0 2901.0 2929.0 9671.0 12167.0 13251.0 1450.0 23351.0 1521.0 5890.0 3379.0 5116.0 9486.0 31367.0 5726.0 1060.0 1781.0 2791.0 3484.0 3869.0 5403.0 8721.0 15780.0 4189.0 15987.0 1146.0 11546.0 2682.0 3329.0 16252.0 406.0 1694.0 2337.0 2378.0 2517.0 4602.0 7823.0 11761.0 16732.0 7998.0 28.0 6238.0 23557.0 1978.0 1966.0 2995.0 3593.0 11243.0 169.0 255.0 258.0 386.0 470.0 699.0 927.0 1174.0 1561.0 1573.0 1656.0 1779.0 1787.0 1790.0 1844.0 2049.0 2129.0 2223.0 2748.0 2907.0 2976.0 3526.0 3628.0 3667.0 4007.0 4348.0 4421.0 4493.0 5111.0 5192.0 5247.0 5560.0 5650.0 6422.0 6476.0 7498.0 7700.0 7909.0 8226.0 8293.0 8623.0 9802.0 9854.0 9875.0 10623.0 10826.0 10829.0 11065.0 11257.0 11410.0 11499.0 11563.0 11793.0 11989.0 12089.0 16301.0 16663.0 17053.0 18587.0 19425.0 23461.0 25133.0 25305.0 28942.0 32239.0 36245.0 96952.0 1303.0 1578.0 16928.0 29077.0 4680.0 809.0 1532.0 2924.0 3576.0 3970.0 4372.0 4514.0 4707.0 9117.0 23362.0 14580.0 4619.0 14353.0 16664.0 1076.0 6845.0 1316.0 853.0 2869.0 202.0 1200.0 1580.0 2347.0 2521.0 2748.0 4523.0 9014.0 16320.0 165.0 325.0 552.0 673.0 935.0 2530.0 4608.0 4932.0 6160.0 6234.0 6309.0 8375.0 10371.0 10496.0 11897.0 12297.0 13842.0 14220.0 14266.0 14674.0 3270.0 2100.0 4417.0 47257.0 26.0 6721.0 7815.0 26993.0 28847.0 8814.0 6667.0 2368.0 111.0 700.0 6096.0 15302.0 4295.0 15352.0 3208.0 687.0 2201.0 3947.0 8369.0 10969.0 625.0 3072.0 3077.0 3959.0 28217.0 263.0 4977.0 24.0 168.0 480.0 1103.0 1830.0 2007.0 2072.0 2191.0 2194.0 2475.0 2561.0 2643.0 2977.0 3003.0 3036.0 3183.0 3324.0 3429.0 3525.0 3598.0 3689.0 4012.0 4541.0 4587.0 5000.0 5009.0 5110.0 5531.0 6134.0 6326.0 6766.0 6890.0 7196.0 7231.0 7288.0 7415.0 7904.0 8060.0 8634.0 9151.0 9357.0 13499.0 14727.0 15604.0 20615.0 26482.0 58507.0 59884.0 129435.0 5174.0 1403.0 16698.0 489.0 7635.0 1319.0 2950.0 3886.0 6290.0 13866.0 2422.0 4906.0 3717.0 6490.0 1117.0 2791.0 4104.0 5144.0 6657.0 8763.0 15819.0 12105.0 971.0 2333.0 5643.0 25859.0 8706.0 16096.0 2226.0 2520.0 3000.0 5936.0 7525.0 11575.0 16137.0 21740.0 23586.0 3032.0 358.0 708.0 3100.0 3419.0 8242.0 8775.0 11034.0 312.0 9440.0 8724.0 20203.0 504.0 4015.0 11070.0 12138.0 2441.0 10557.0 13576.0 10747.0 18458.0 4602.0 4870.0 8260.0 3333.0 7088.0 12569.0 13674.0 16744.0 25634.0 212.0 325.0 1447.0 2336.0 2760.0 2774.0 2863.0 3895.0 4137.0 4436.0 4542.0 5095.0 5108.0 5647.0 8103.0 9971.0 10841.0 11888.0 12304.0 13218.0 14078.0 14417.0 14999.0 16223.0 16312.0 17905.0 18124.0 23484.0 25026.0 32093.0 36109.0 36572.0 70435.0 18289.0 12980.0 8694.0 1256.0 2642.0 2727.0 2981.0 13442.0 8176.0 2344.0 11244.0 5424.0 5519.0 5116.0 15.0 18825.0 23155.0 9348.0 3483.0 3884.0 7728.0 43454.0 409.0 2485.0 731.0 1179.0 1720.0 1997.0 4892.0 5250.0 7151.0 7309.0 10366.0 10991.0 12170.0 24987.0 5675.0 5036.0 10622.0 20237.0 18896.0 4986.0 2586.0 1080.0 4177.0 17688.0 19934.0 1954.0 4919.0 360.0 387.0 535.0 583.0 1084.0 1199.0 1652.0 2012.0 2588.0 3094.0 4508.0 5230.0 5731.0 5998.0 6419.0 7004.0 7057.0 7081.0 7227.0 7253.0 7920.0 9089.0 9093.0 9814.0 10726.0 13334.0 13948.0 15116.0 16118.0 18118.0 18155.0 18238.0 20694.0 20737.0 22020.0 22857.0 22929.0 26332.0 55472.0 56519.0 20999.0 47560.0 18409.0 4389.0 45945.0 6782.0 3332.0 33437.0 2931.0 12181.0 1908.0 6111.0 2316.0 4966.0 55213.0 2533.0 29273.0 1839.0 2176.0 2381.0 4211.0 19887.0 3111.0 14568.0 2350.0 6695.0 8034.0 12375.0 6384.0 2710.0 35.0 657.0 2172.0 3803.0 3829.0 3996.0 4850.0 4908.0 5519.0 6365.0 7023.0 7439.0 7960.0 8312.0 9631.0 11353.0 12647.0 18728.0 20221.0 24706.0 38018.0 39831.0 7890.0 2208.0 8619.0 19332.0 1395.0 14182.0 3851.0 23004.0 7237.0 5889.0 8930.0 10364.0 39297.0 798.0 2638.0 3750.0 4404.0 7839.0 19667.0 27592.0 7845.0 11562.0 53048.0 6715.0 40782.0 8190.0 10853.0 23407.0 6681.0 1330.0 1577.0 2442.0 3577.0 4500.0 4541.0 5553.0 10112.0 17118.0 19397.0 20399.0 25962.0 46953.0 81128.0 7570.0 3242.0 6946.0 16290.0 3128.0 15550.0 6892.0 70922.0 78345.0 7883.0 3013.0 444.0 2019.0 3502.0 4440.0 9066.0 10177.0 10747.0 15706.0 21083.0 31532.0 44088.0 66524.0 4397.0 1469.0 617.0 20098.0 17560.0 14127.0 7872.0 88534.0 14107.0 8392.0 29307.0 8007.0 12177.0 2178.0 1182.0 1820.0 3009.0 4941.0 7735.0 9134.0 9250.0 10411.0 17557.0 19167.0 21841.0 23088.0 37529.0 5103.0 3069.0 20440.0 18874.0 11834.0 434.0 815.0 2238.0 4956.0 5013.0 12856.0 42966.0 3562.0 50611.0 17567.0 77477.0 55.0 480.0 500.0 1636.0 2165.0 2280.0 2809.0 2881.0 2985.0 3048.0 3403.0 3565.0 3634.0 4094.0 4292.0 5441.0 5974.0 7669.0 8726.0 9231.0 9609.0 10775.0 11259.0 11725.0 12210.0 12344.0 15687.0 16303.0 17768.0 25661.0 25922.0 21547.0 15000.0 2606.0 18172.0 6445.0 5485.0 11333.0 913.0 8312.0 830.0 2128.0 22981.0 24889.0 29327.0 23391.0 48076.0 210.0 14709.0 10983.0 15484.0 38341.0 11863.0 12691.0 1108.0 2438.0 4095.0 4519.0 4560.0 4762.0 6118.0 9812.0 42230.0 2580.0 501863.0 17280.0 12750.0 27738.0 4881.0 559.0 5534.0 6756.0 13762.0 27671.0 13319.0 19458.0 25767.0 160581.0 1900.0 2333.0 4555.0 14253.0 14878.0 22114.0 39247.0 7177.0 40.0 4633.0 2756.0 4966.0 799.0 13391.0 15756.0 20495.0 214.0 16063.0 12608.0 574.0 3451.0 5542.0 6125.0 6833.0 11877.0 12851.0 15913.0 17236.0 17687.0 19213.0 23566.0 26232.0 30401.0 36703.0 46494.0 72060.0 1936.0 25949.0 4863.0 5985.0 16731.0 16452.0 8072.0 4730.0 18284.0 37711.0 5792.0 16677.0 2908.0 5203.0 3367.0 3764.0 5097.0 6959.0 18232.0 12965.0 60435.0 31812.0 89826.0 12398.0 14008.0 8811.0 18919.0 3944.0 12644.0 6431.0 22092.0 557.0 1416.0 2287.0 4842.0 7270.0 10312.0 12815.0 13820.0 15268.0 17550.0 21166.0 22706.0 25034.0 25256.0 28013.0 30149.0 34716.0 38516.0 71350.0 107192.0 211573.0 101622.0 4210.0 9513.0 60487.0 7434.0 4825.0 166893.0 1782.0 35055.0 9516.0 31422.0 2004.0 7475.0 12143.0 48062.0 17645.0 7571.0 89365.0 13098.0 2257.0 4249.0 10093.0 11308.0 13227.0 14970.0 19671.0 46359.0 13364.0 18721.0 2229.0 42863.0 99412.0 22464.0 4698.0 10292.0 14082.0 32370.0 4773.0 6695.0 6945.0 12042.0 20887.0 46507.0 1588.0 35252.0 155640.0 6496.0 21354.0 4104.0 64690.0 17881.0 17601.0 21607.0 53829.0 6114.0 38276.0 1031.0 5717.0 48811.0 180615.0 46777.0 277.0 7846.0 20095.0 23137.0 27903.0 61709.0 67782.0 32414.0 25116.0 7357.0 63903.0 36573.0 41532.0 6603.0 12720.0 45613.0 38157.0 41946.0 63433.0 5448.0 24087.0 55068.0 27774.0 11875.0 10530.0 3510.0 12271.0 15748.0 29638.0 306072.0 21359.0 23086.0 310.0 9819.0 25373.0 48619.0 55010.0 62321.0 68630.0 61706.0 36559.0 15358.0 131678.0 56123.0 69658.0 10261.0 28384.0 25670.0 45095.0 7294.0 28192.0 142227.0 27272.0 160265.0 65248.0 186670.0 31738.0 15534.0 38242.0 49617.0 55080.0 55388.0 280202.0 467246.0 2940.0 3662.0 61239.0 43966.0 135653.0 134743.0\n]","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"Since the dataset is bivariate, we can have a glimpse of the bivariate distribution through a simple scatter plot:","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"loss = data[1,:]\nalae = data[2,:]\nscatter(loss,alae)","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"The observations seem to have extreme values. Let's move to log scales: ","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"scatter(log.(loss),log.(alae))","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"This is a much better looking scatter plot.  To fit a full distribution on this dataset, we have to understand what families of marginals and of dependence structure to use.  Let us first look at the marginal behaviors: ","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"plot(histogram(log.(loss)),histogram(log.(alae)))","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"This histogram look fairly Gaussian, and thus a good first guess for the distributions of the marginals would be LogNormal distributions.  Now the dependence structure: ","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"ranks = Copulas.pseudos(data)\nscatter(ranks[1,:],ranks[2,:])","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"The vertical strides are there because of rounding in the input data.  But still, we observe that there is dependence structure in both tails, and that the dependence structure seems fairly symmetric.  Let us try to fit a few different copulas: ","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"fit_gaussian = fit(SklarDist{GaussianCopula,Tuple{LogNormal,LogNormal}}, data)\nfit_clayton = fit(SklarDist{ClaytonCopula,Tuple{LogNormal,LogNormal}}, data)\nfit_gumbel = fit(SklarDist{GumbelCopula,Tuple{LogNormal,LogNormal}}, data)\nfit_frank = fit(SklarDist{FrankCopula,Tuple{LogNormal,LogNormal}}, data)\nnothing # hide","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"Let's check the negative loglikelihood on each of those models (note that they all have the same number of parameters):","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"nllhs = [-loglikelihood(fit,data) for fit in (fit_gaussian,fit_clayton,fit_gumbel,fit_frank)]","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"So the Clayton looks a bit better. Let's look at the parametrization: ","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"fit_clayton","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"For the marginals, we can for example check quantile quantile plots (again, on log-scale)","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"n = size(data,2)\nplot(\n    scatter(sort(log.(loss)), log.(quantile.(Ref(fit_clayton.m[1]),(1:n)./(n+1))), label=\"Loss\"),\n    scatter(sort(log.(alae)), log.(quantile.(Ref(fit_clayton.m[2]),(1:n)./(n+1))), label=\"Alae\")\n)","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"These quantile-quantile plots are not perfect, we see that both tails are a bit wiggly. For the dependence structure, we can sample a new dataset from the fitted copula to check if the ranks behaviors looks like what we had before: ","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"u = rand(fit_clayton.C, 1500)\nscatter(u[1,:],u[2,:])","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"There are potential improvements that can be made to this fit: ","category":"page"},{"location":"examples/lossalae/","page":"Loss-Alae fitting example.","title":"Loss-Alae fitting example.","text":"The tail dependency does not look like it is on the right side. To solve that, we could use SurvivalCopula to fit a flipped version of the Clayton through fit(SklarDist{SurvivalCopula{2,ClaytonCopula,(1,2)},Tuple{...}}, ...).\nWe could use other marginal proposals than LogNormals and validate (e.g., through likelihood ratio tests) that the fits are OK. \nWe could keep marginals and/or the dependence structure empirical, through e.g., EmpiricalCopula.","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"elliptical/generalities/#elliptical_copulas_header","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"","category":"section"},{"location":"elliptical/generalities/#Definition","page":"Elliptical Copulas","title":"Definition","text":"","category":"section"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"The easiest families of copulas are the one derived from known families of random vectors, and the first presented one are, generally, the Elliptical families (in particular, the Gaussian and Student families are very standard in the litterature). ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Definition (Spherical and elliptical random vectors): A random vector bm X is said to be spherical if for all orthogonal matrix bm A in O_d(mathbb R), bm Abm X sim bm X. For every matrix bm B and vector bm c, the random vector bm B bm X + bm c is then said to be elliptical.","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Spherical random vectors have several interesting properties. First, the shape of the distribution must be the same in every direction since it is stable by rotations. Moreover, their characteristic functions (c.f.) only depend on the norm of their arguments. Indeed, for any bm A in O_d(mathbb R), ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"phi(bm t) = mathbb Eleft(e^langle bm t bm X rangleright)= mathbb Eleft(e^langle bm t bm Abm X rangleright) = mathbb Eleft(e^langle bm Abm t bm X rangleright) = phi(bm Abm t)","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"We can therefore express this characteristic function as phi(bm t) = psi(lVert bm t rVert_2^2), where psi is a function that characterizes the spherical family, called the generator of the family. Any characteristic function that can be expressed as a function of the norm of its argument is the characteristic function of a spherical random vector, since lVert bm A bm t rVert_2 = lVert bm t rVert_2 for any orthogonal matrix bm A. ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"This class contains the (multivariate) Normal and Student distributions, and it is easy to construct others if needed. This is a generalization of the family of Gaussian random vectors, and they benefit from several nice properties of the former, among which, particularly interesting, the stability by convolution. Indeed, convolutions correspond to product of characteristic functions, and","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"phi(bm t) = prod_i=1^n phi_i(bm t) = prod_i=1^n psi_i(lVert bm t rVert_2^2) = psi(lVert bm t rVert_2^2)","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"which is still a function of only the norm of bm t. ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"To fix ideas, for Gaussian random vectors, psi(t) = e^-fract^22.","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"note: Sampling with `Distributions.jl`\nElliptical random vectors in the Gaussian and Student families are available from Distributions.jl:using Distributions\nΣ = [1 0.5\n    0.5 1] # variance-covariance matrix.\nν = 3 # number of degrees of freedom for the student.\nN = MvNormal(Σ)T = MvTDist(ν,Σ)","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Elliptical copulas are simply copulas of elliptical distributions. This simplicity of definition is paid for in the expression of the copulas itself: the obtained function has usually no better expression than: ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"C = F circ (F_1^-1F_d^-1)","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"where F_i^-1 denotes the almost-inverse of F_i, that is: ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"forall u in 01F_i^-1(u) = infleftx  F_i(x) ge uright","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"and F_i is usually hard to express from the elliptical assumptions.","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Moreover, the form of dependence structures that can be reached inside this class is restricted. The elliptical copulas are parametrized by the corresponding univariate spherical generator and a correlation matrix, which is a very simple structure. See also [13–15] for details on these copulas. ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"On the other hand, there exist performant estimators of high-dimensional covariance matrices, and a large theory is built on the elliptical assumption of high dimensional random vectors, see e.g., [16–18] among others. See also [19] for a recent work on nonparametric estimation of the underlying univariate spherical distribution. ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"note: Note on internal implementation\nIf the exposition we just did on characteristic functions of Elliptical random vectors is fundamental to the definition of elliptical copulas, the package does not use this at all to function, and rather rely on the existence of multivariate and corresponding univariate families of distributions in Distributions.jl. ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"You can obtain these elliptical copulas by the following code: ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"using Copulas\nΣ = [1 0.5\n     0.5 1] # variance-covariance matrix.\nν = 3 # number of degrees of freedom for the student.\nC_N = GaussianCopula(Σ)\nC_T = TCopula(ν,Σ)","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"As already stated, the underlying code simply applies Sklar. In all generalities, you may define another elliptical copula by the following structure: ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"struct MyElliptical{d,T} <: EllipticalCopula{d,T}\n    θ:T\nend\nU(::Type{MyElliptical{d,T}}) where {d,T} # Distribution of the univaraite marginals, Normal() for the Gaussian case. \nN(::Type{MyElliptical{d,T}}) where {d,T} # Distribution of the mutlivariate random vector, MvNormal(\\Sigma) for the Gaussian case. ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"However, not much other cases than the Gaussian and Elliptical one are really used in the literature.","category":"page"},{"location":"elliptical/generalities/#Examples","page":"Elliptical Copulas","title":"Examples","text":"","category":"section"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"To construct, e.g., a Student copula, you need to provide the Correlation matrix and the number of degree of freedom, as follows: ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"using Copulas, Distributions\nΣ = [1 0.5\n    0.5 1] # variance-covariance matrix.\nν = 3 # number of degrees of freedom\nC = TCopula(ν,Σ)","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"You can sample it and compute its density and distribution functions via the standard interface. We could try to fit a GaussianCopula on the sampled data, even if we already know that the tails will not be properly taken into account: ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"u = rand(C,1000)\nĈ = fit(GaussianCopula,u) # to fit on the sampled data. ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"We see that the estimation we have on the correlation matrix is quite good, but rest assured that the tails of the distributions are not the same at all. To see that, let's plot the lower tail function (see [3]) for both copulas: ","category":"page"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"using Plots\nchi(C,u) = 2 * log(1-u) / log(1 - 2u + cdf(C,[u,u])) -1\nu = 0.5:0.03:0.99\nplot(u,  chi.(Ref(C),u), label=\"True student copula\")\nplot!(u, chi.(Ref(Ĉ),u), label=\"Estimated Gaussian copula\")","category":"page"},{"location":"elliptical/generalities/#Implementation","page":"Elliptical Copulas","title":"Implementation","text":"","category":"section"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"EllipticalCopula","category":"page"},{"location":"elliptical/generalities/#Copulas.EllipticalCopula","page":"Elliptical Copulas","title":"Copulas.EllipticalCopula","text":"EllipticalCopula{d,MT}\n\nThis is an abstract type. It implements an interface for all Elliptical copulas. We construct internally elliptical copulas using the sklar's theorem, by considering the copula C to be defined as : \n\nC = F circ (F_1^-1F_d^-1)\n\nwhere F and F_1F_d are respectively the multivariate distribution function of some elliptical random vector and the univariate distribution function of its marginals.  For a type MyCop <: EllipitcalCopula, it is necessary to implement the following methods: \n\nN(::Type{MyCOp}), returning the constructor of the elliptical random vector from its correlation matrix. For example, N(GaussianCopula) simply returns MvNormal from Distributions.jl.\nU(::Type{MyCOp}), returning the constructor for the univariate marginal, usually in standardized form. For example, U(GaussianCopula) returns Normal from Distributions.jl.\n\nFrom these two functions, the abstract type provides a fully functional copula. \n\nDetails\n\nRecall the definition of spherical random vectors: \n\nDefinition (Spherical and elliptical random vectors): A random vector bm X is said to be spherical if for all orthogonal matrix bm A in O_d(mathbb R), bm Abm X sim bm X. For every matrix bm B and vector bm c, the random vector bm B bm X + bm c is then said to be elliptical.\n\nRecall that spherical random vectors are random vectors which characteristic functions (c.f.) only depend on the norm of their arguments. Indeed, for any bm A in O_d(mathbb R), \n\nphi(bm t) = mathbb Eleft(e^langle bm t bm X rangleright)= mathbb Eleft(e^langle bm t bm Abm X rangleright) = mathbb Eleft(e^langle bm Abm t bm X rangleright) = phi(bm Abm t)\n\nWe can therefore express this characteristic function as phi(bm t) = psi(lVert bm t rVert_2^2), where psi is a function that characterizes the spherical family, called the generator of the family. Any characteristic function that can be expressed as a function of the norm of its argument is the characteristic function of a spherical random vector, since lVert bm A bm t rVert_2 = lVert bm t rVert_2 for any orthogonal matrix bm A. \n\nHowever, note that this is not how the underlying code is working, we do not check for validity of the proposed generator (we dont even use it). You can construct such an elliptical family using simply Sklar: \n\nstruct MyElliptical{d,T} <: EllipticalCopula{d,T}\n    θ:T\nend\nU(::Type{MyElliptical{d,T}}) where {d,T} # Distribution of the univaraite marginals, Normal() for the Gaussian case. \nN(::Type{MyElliptical{d,T}}) where {d,T} # Distribution of the mutlivariate random vector, MvNormal(C.Σ) for the Gaussian case. \n\nThese two functions are enough to implement the rest of the interface. \n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"elliptical/generalities/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"R. B. Nelsen. An Introduction to Copulas. 2nd ed Edition, Springer Series in Statistics (Springer, New York, 2006).\n\n\n\nG. Frahm, M. Junker and A. Szimayer. Elliptical Copulas: Applicability and Limitations. Statistics & Probability Letters 63, 275–286 (2003).\n\n\n\nE. Gómez, M. A. Gómez-villegas and J. M. Marín. A Survey on Continuous Elliptical Vector Distributions. Revista Matemática Complutense 16, 345–361 (2003).\n\n\n\nM.-P. Côté and C. Genest. Dependence in a Background Risk Model. Journal of Multivariate Analysis 172, 28–46 (2019).\n\n\n\nG. Elidan. Copulas in Machine Learning. In: Copulae in Mathematical and Quantitative Finance, Vol. 213, edited by P. Jaworski, F. Durante and W. K. Härdle (Springer Berlin Heidelberg, Berlin, Heidelberg, 2013); pp. 39–60.\n\n\n\nJ. Friedman, T. Hastie and R. Tibshirani. Applications of the Lasso and Grouped Lasso to the Estimation of Sparse Graphical Models (Technical report, Stanford University, 2010).\n\n\n\nD. Müller and C. Czado. Dependence Modelling in Ultra High Dimensions with Vine Copulas and the Graphical Lasso. Computational Statistics & Data Analysis 137, 211–232 (2019).\n\n\n\nA. Derumigny and J.-D. Fermanian. Identifiability and Estimation of Meta-Elliptical Copula Generators. Journal of Multivariate Analysis, 104962 (2022).\n\n\n\n","category":"page"},{"location":"empirical/available_models/","page":"Empirical Copulas","title":"Empirical Copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"empirical/available_models/#Empirical-Copulas","page":"Empirical Copulas","title":"Empirical Copulas","text":"","category":"section"},{"location":"empirical/available_models/#EmpiricalCopula","page":"Empirical Copulas","title":"EmpiricalCopula","text":"","category":"section"},{"location":"empirical/available_models/","page":"Empirical Copulas","title":"Empirical Copulas","text":"EmpiricalCopula","category":"page"},{"location":"empirical/available_models/#Copulas.EmpiricalCopula","page":"Empirical Copulas","title":"Copulas.EmpiricalCopula","text":"EmpiricalCopula{d,MT}\n\nFields:\n\nu::MT - the matrix of observations. \n\nConstructor\n\nEmpiricalCopula(u;pseudos=true)\n\nThe EmpiricalCopula in dimension d is parameterized by a pseudo-data matrix which should have shape (d,N). Its expression is given as :  \n\nC(mathbf x) = frac1Nsum_i=1^n mathbf 1_mathbf u_i le mathbf x\n\nThis function is very practical, be be aware that this is not a true copula (since mathbf u are only pseudo-observations). The constructor allows you to pass dirctly pseudo-observations (the default) or will compute them for you. You can then compute the cdf of the copula, and sample it through the standard interface.\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"empirical/available_models/#BernsteinCopula","page":"Empirical Copulas","title":"BernsteinCopula","text":"","category":"section"},{"location":"empirical/available_models/","page":"Empirical Copulas","title":"Empirical Copulas","text":"note: Not implemented yet!\nDo not hesitate to come talk on our GitHub !","category":"page"},{"location":"empirical/available_models/#CheckerboardCopula","page":"Empirical Copulas","title":"CheckerboardCopula","text":"","category":"section"},{"location":"empirical/available_models/","page":"Empirical Copulas","title":"Empirical Copulas","text":"note: Not implemented yet!\nDo not hesitate to come talk on our GitHub !","category":"page"},{"location":"empirical/available_models/#BetaCopula","page":"Empirical Copulas","title":"BetaCopula","text":"","category":"section"},{"location":"empirical/available_models/","page":"Empirical Copulas","title":"Empirical Copulas","text":"note: Not implemented yet!\nDo not hesitate to come talk on our GitHub !","category":"page"},{"location":"Vines/","page":"-","title":"-","text":"One more noticeable class of copulas are the Vines copulas. These distributions use a graph of conditional distributions to encode the distribution of the random vector. To define such a model, working with conditional densities, and given any ordered partition bm i_1bm i_p of 1d, we write:  f(bm x) = f(x_bm i_1) prodlimits_j=1^p-1 f(x_bm i_j+1  x_bm i_j)","category":"page"},{"location":"Vines/","page":"-","title":"-","text":"Of course, the choice of the partition, of its order, and of the conditional models is left to the practitioner. The goal when dealing with such dependency graphs is to tailor the graph to reduce the error of approximation, which can be a tricky task. There exists simplifying assumptions that help with this matter, and we refer to ~\\cite{durante2017a,nagler2016,nagler2018,czado2013,czado2019,graler2014} for a deep dive into the vine theory, along with some nice results and extensions. ","category":"page"},{"location":"examples/fitting_sklar/#Fitting-compound-distributions","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"","category":"section"},{"location":"examples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"Through the SklarDist interface, there is the possibility to fit directly distributions that are constructed from a copula and some marginals:","category":"page"},{"location":"examples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"using Copulas\nusing Distributions\n\n# Let's sample some datas:\nX₁ = LogNormal()\nX₂ = Pareto()\nX₃ = Gamma()\nX₄ = Normal()\nC = SurvivalCopula(FrankCopula(4,7),(2,4))\nD = SklarDist(C,(X₁,X₂,X₃,X₄))\ndata = rand(D,1000)","category":"page"},{"location":"examples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"The fit function uses a type as its first argument that describes the structure of the model : ","category":"page"},{"location":"examples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"MyCop = SurvivalCopula{4,ClaytonCopula,(2,4)}\nMyMargs = Tuple{LogNormal,Pareto,Gamma,Normal}\nMyD = SklarDist{MyCop, MyMargs}\nfitted_model = fit(MyD,data)","category":"page"},{"location":"examples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"Another possibility is to use an empirical copula and only fit the marginals: ","category":"page"},{"location":"examples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"other_fitted_model = fit(SklarDist{EmpiricalCopula,MyMargs},data)","category":"page"},{"location":"examples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"This simple interface leverages indeed the fit function from Distributions.jl. From their documentation, this function is not supposed to use a particular method but to fit \"dirt and quick\" some distributions. ","category":"page"},{"location":"examples/fitting_sklar/","page":"Fitting compound distributions","title":"Fitting compound distributions","text":"So you have to be careful: the fit method might not be the same for different copulas or different marginals. For example, the Archimedean copulas are fitted through an inversion of the Kendall tau function, while the Gaussian copula is fitted by maximum likelihood. ","category":"page"},{"location":"examples/ifm1/#Influence-of-the-method-of-estimation","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"","category":"section"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"The possibility to fit directly the copula and the marginals through the SklarDist interface is very practical if you want a quick and dirty fit to be produce for a given dataset. It works as follows: ","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"using Copulas, Distributions\nX₁ = Normal()\nX₂ = LogNormal()\nX₃ = Gamma()\nC = GaussianCopula([\n    1.0 0.4 0.1\n    0.4 1.0 0.8\n    0.1 0.8 1.0\n])\nD = SklarDist(C,(X₁,X₂,X₃))\nx = rand(D,100)","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"And we can fit the same model directly as follows: ","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"quick_fit = fit(SklarDist{GaussianCopula, Tuple{Normal,LogNormal,Gamma}}, x)","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"However, we should be clear about what this is doing. There are several way of estimating compound parametric models: ","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"Joint estimation (JMLE): This method simply compute the joint loglikelyhood log f_D of the random vector D and maximize, jointly, w.r.t. the parameters of the dependence structure and the parameters of the marginals. This is the easiest to understand, but not the easiest numerically as the produces loglikelihood can be highly non-linear and computations can be tedious. \nInference functions for margins (IFM): This method splits up the process into two parts: the marginal distributions F_i i in 1d are estimated first, separately from each other, through maximum likelihood on marginal data. Denote hatF_i these estimators. Then, we fit the copula on pseudo-observations, but these pseudo-observations could be computed in two different ways: \nIFM1: We use empirical ranks to compute the pseudo-observations.\nIFM2: We leverage the estimated distribution functions hatF_i for the marginals to compute the pseudo-observations as u_ij = hatF_i(x_ij).","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"The fit(SklarDist{...},...) method in the Copulas.jl package is implemented as follows: ","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"function Distributions.fit(::Type{SklarDist{CT,TplMargins}},x) where {CT,TplMargins}\n    # The first thing to do is to fit the marginals : \n    @assert length(TplMargins.parameters) == size(x,1)\n    m = Tuple(Distributions.fit(TplMargins.parameters[i],x[i,:]) for i in 1:size(x,1))\n    u = pseudos(x)\n    C = Distributions.fit(CT,u)\n    return SklarDist(C,m)\nend","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"and so clearly performs IFM1 estimation. IFM2 is not much harder to implement, it could be done for our model as follows:","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"# Marginal fits are the same than IFM1, so we just used those to compute IFM2 ranks:\nu = similar(x)\nfor i in 1:length(C)\n    u[i,:] .= cdf.(Ref(quick_fit.m[i]), x[i,:])\nend\n\n# estimate a Gaussian copula: \nifm2_cop = fit(GaussianCopula,u)","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"Let us compare the two obtained correlation matrices: ","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"ifm2_cop.Σ .- quick_fit.C.Σ","category":"page"},{"location":"examples/ifm1/","page":"Influence of the method of estimation","title":"Influence of the method of estimation","text":"We see that the estimated parameter is not exactly the same, which is normal. However, even in this contrived example, the difference between the two is not striking. Whether one method is better than the other is unclear, but the JMLE method is clearly superior by definition. However, due to its complexity, most software do not perform such an estimation. ","category":"page"},{"location":"examples/turing/#Bayesian-inference-with-Turing.jl","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"","category":"section"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"The compatibility with Distributions.jl's API allows a lot of interactions with the broader ecosystem. One of the firsts examples that we discovered was the possibility to do Bayesian inference of model parameters (copula included) with Turing.jl. ","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"Consider that we have a given model with a certain copula and certain marginals, all having parameters to be fitted. Then we can use Turing's @addlogprob! to compute the loglikelihood of our model and maximize it around the parameters alongside the chain as follows: ","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"using Copulas\nusing Distributions\nusing Random\nusing Turing\nusing StatsPlots\n\nRandom.seed!(123)\ntrue_θ = 7\ntrue_θ₁ = 1\ntrue_θ₂ = 3\ntrue_θ₃ = 2\nD = SklarDist(ClaytonCopula(3,true_θ), (Exponential(true_θ₁), Pareto(true_θ₂), Exponential(true_θ₃)))\ndraws = rand(D, 2000)\n\n@model function copula(X)\n    # Priors\n    θ  ~ TruncatedNormal(1.0, 1.0, -1/3, Inf)\n    θ₁ ~ TruncatedNormal(1.0, 1.0, 0, Inf)\n    θ₂ ~ TruncatedNormal(1.0, 1.0, 0, Inf)\n    θ₃ ~ TruncatedNormal(1.0, 1.0, 0, Inf)\n\n    # Build the parametric model\n    C = ClaytonCopula(3,θ)\n    X₁ = Exponential(θ₁)\n    X₂ = Pareto(θ₂)\n    X₃ = Exponential(θ₃)\n    D = SklarDist(C, (X₁, X₂, X₃))\n\n    # Compute the final loglikelyhood\n    Turing.Turing.@addlogprob! loglikelihood(D, X)\nend\n\nsampler = NUTS() # MH() works too\nchain = sample(copula(draws), sampler, MCMCThreads(), 100, 4)","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"Note that we truncated the θ parameter at -1/3 and not 0 as the ClaytonCopula can handle negative dependence structures. We only ran 100 steps for efficiency reasons, you can increase this number easily if needed. The upper code outputs summary of the chain : ","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"Summary Statistics:","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"parameters true value mean std mcse ess_bulk ess_tail rhat esspersec\nSymbol Float64 Float64 Float64 Float64 Float64 Float64 Float64 Float64\nθ 7.0 6.9319 0.1150 0.0067 291.8858 267.1353 1.0061 0.7238\nθ₁ 1.0 0.9954 0.0209 0.0019 116.6941 94.3070 1.0347 0.2894\nθ₂ 3.0 2.9839 0.0639 0.0062 108.9185 105.5284 1.0390 0.2701\nθ₃ 2.0 2.0055 0.0418 0.0039 114.7324 109.5396 1.0328 0.2845","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"Quantiles: ","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"parameters 2.5% 25.0% 50.0% 75.0% 97.5%\nSymbol Float64 Float64 Float64 Float64 Float64\nθ 6.7286 6.8438 6.9330 7.0150 7.1436\nθ₁ 0.9555 0.9818 0.9953 1.0093 1.0386\nθ₂ 2.8606 2.9426 2.9859 3.0196 3.1186\nθ₃ 1.9254 1.9758 2.0056 2.0336 2.0923","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"And then plot(chain) produces the following plot:","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"(Image: Turing results)","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"Similar approaches could be used to fit many other dependence structures in a Bayesian settings. The upper example showcases a parametric estimation of a sampling model, but a Bayesian regression with an error structure given by a parametric copula is as easy to implement. ","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"This was run on the following environment: ","category":"page"},{"location":"examples/turing/","page":"Bayesian inference with Turing.jl","title":"Bayesian inference with Turing.jl","text":"julia> versioninfo()\nJulia Version 1.10.0\nCommit 3120989f39 (2023-12-25 18:01 UTC)\n[...]\n\n(env) pkg> status\n  [ae264745] Copulas v0.1.20\n  [31c24e10] Distributions v0.25.107\n  [f3b207a7] StatsPlots v0.15.6\n  [fce5fe82] Turing v0.30.3\n  [9a3f8284] Random","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"empirical/generalities/#General-Discussion","page":"Empirical Copulas","title":"General Discussion","text":"","category":"section"},{"location":"empirical/generalities/#Pseudo-observations","page":"Empirical Copulas","title":"Pseudo-observations","text":"","category":"section"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Through the statistical process leading to the estimation of copulas, one usually observes the data and information on the marginals scale and not on the copula scale. This discrepancy between the observed information and the modeled distribution must be taken into account. A key concept is that of pseudo-observations. ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Definition (Pseudo-observations): If bm x in mathbb R^Ntimes d is a N-sample of a d-variate real-valued random vector bm X, then the pseudo-observations are the normalized ranks of the marginals of bm x, defined as : bm u in mathbb 01^Ntimes d u_ij = fracmathrmRank(x_ijbm x_cdotj)N+1 = frac1N+1sum_k=1^N mathbb 1_x_kj le x_ijwhere mathrmRank(ybm x)  = sumlimits_x_i in bm x mathbb 1_x_i le y.","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"In Copulas.jl, we provide a function pseudos that implement this transformation directly. ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"pseudos","category":"page"},{"location":"empirical/generalities/#Copulas.pseudos","page":"Empirical Copulas","title":"Copulas.pseudos","text":"pseudos(sample)\n\nCompute the pseudo-observations of a multivariate sample. Note that the sample has to be given in wide format (d,n), where d is the dimension and n the number of observations.\n\nWarning: the order used is ordinal ranking like https://en.wikipedia.org/wiki/Ranking#Ordinalranking.28.221234.22_ranking.29, see StatsBase.ordinalrank for the ordering we use. If you want more flexibility, checkout NormalizeQuantiles.sampleranks.\n\n\n\n\n\n","category":"function"},{"location":"empirical/generalities/#Deheuvel's-empirical-copula","page":"Empirical Copulas","title":"Deheuvel's empirical copula","text":"","category":"section"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"From these pseudo-observations, an empirical copula is defined as follows:","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Definition (Deheuvel's empirical copula [34]): The empirical distribution function of the normalized ranks,hatC_N(bm u) = frac1N sum_i=1^N mathbb 1_bm u_i le bm uis called the empirical copula function.","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Theorem (Exhaustivity and consistency [34]): hatC_N is an exhaustive estimator of C, and moreover for any normalizing constants phi_N Nin mathbb N such that limlimits_N to infty phi_N sqrtN^-1ln ln N = 0, limlimits_Ntoinfty phi_N sup_bm u in 01^d lverthatC_N(bm u) - C(bm u) rvert = 0 text as","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"hatC_N","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"then converges (weakly) to C, the true copula of the random vector bm X, when the number of observations N goes to infinity. ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"note: The empirical copula is not a true copula\nDespite its name, hatC_N is not a copula since it does not have uniform marginals. Be careful. ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"In the package, this copula is implemented as the EmpiricalCopula: ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"EmpiricalCopula","category":"page"},{"location":"empirical/generalities/#Copulas.EmpiricalCopula-empirical-generalities","page":"Empirical Copulas","title":"Copulas.EmpiricalCopula","text":"EmpiricalCopula{d,MT}\n\nFields:\n\nu::MT - the matrix of observations. \n\nConstructor\n\nEmpiricalCopula(u;pseudos=true)\n\nThe EmpiricalCopula in dimension d is parameterized by a pseudo-data matrix which should have shape (d,N). Its expression is given as :  \n\nC(mathbf x) = frac1Nsum_i=1^n mathbf 1_mathbf u_i le mathbf x\n\nThis function is very practical, be be aware that this is not a true copula (since mathbf u are only pseudo-observations). The constructor allows you to pass dirctly pseudo-observations (the default) or will compute them for you. You can then compute the cdf of the copula, and sample it through the standard interface.\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"empirical/generalities/#Beta-copula","page":"Empirical Copulas","title":"Beta copula","text":"","category":"section"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"The empirical copula function is not a copula. An easy way to fix this problem is to smooth out the marginals with beta distribution functions: ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Definition (Beta Copula [35]): Denoting F_nr(x) = sum_s=r^n binomns x^s(1-x)^n-s the distribution function of a mathrmBeta(rn+1-r) random variable, the functionhatC_N^beta  bm x mapsto frac1N sum_i=1^N prodlimits_j=1^d F_n(N+1)u_ij(x_j)is a genuine copula, called the Beta copula. ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Property (Proximity of hatC_N and hatC_N^beta [35]):suplimits_bm u in 01^d lvert hatC_N(bm u) - hatC_N^beta(bm u) rvert le dleft(sqrtfracln nn + sqrtfrac1n + frac1nright)","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"note: Not implemented yet!\nDo not hesitate to come talk on our GitHub !","category":"page"},{"location":"empirical/generalities/#Bernstein-Copula","page":"Empirical Copulas","title":"Bernstein Copula","text":"","category":"section"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Bernstein copula are simply another smoothing of the empirical copula using Bernstein polynomials. ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"note: Not implemented yet!\nDo not hesitate to come talk on our GitHub !","category":"page"},{"location":"empirical/generalities/#Checkerboard-Copulas","page":"Empirical Copulas","title":"Checkerboard Copulas","text":"","category":"section"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"There are other nonparametric estimators of the copula function that are true copulas. Of interest to our work is the Checkerboard construction (see [36, 37]), detailed below.","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"First, for any bm m in mathbb N^d, let leftB_bm ibm m bm i  bm mright be a partition of the unit hypercube defined by","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"B_bm i bm m = leftfracbm ibm m fracbm i+1bm mright","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Furthermore, for any copula C (or more generally distribution function F), we denote mu_C (resp mu_F) the associated measure.  For example, for the independence copula Pi, mu_Pi(A) = lambda(A cup bm 0 bm 1) where lambda is the Lebesgue measure.","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Definition (Empirical Checkerboard copulas [36]): Let bm m in mathbb N^d. The bm m-Checkerboard copula hatC_Nbm m, defined by hatC_Nbm m(bm x) = bm m^bm 1 sum_bm i  bm m mu_hatC_N(B_bm i bm m) mu_Pi(B_bm i bm m cap 0bm x)is a genuine copula as soon as m_1m_d all divide N.","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Property (Consistency of hatC_Nbm m [36]): If all m_1m_d divide N,suplimits_bm u in 01^d lvert hatC_Nbm m(bm u) - C(bm u) rvert le fracd2m + mathcal O_mathbb Pleft(n^-frac12right)","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"This copula is called Checkerboard, as it fills the unit hypercube with hyperrectangles of same shapes B_bm i bm m, conditionally on which the distribution is uniform, and the mixing weights are the empirical frequencies of the hyperrectangles. ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"It can be noted that there is no need for the hyperrectangles to be filled with a uniform distribution (mu_Pi), as soon as they are filled with copula measures and weighted according to the empirical measure in them (or to any other copula). The direct extension is then the more general patchwork copulas, whose construction is detailed below.","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Denoting B_bm i bm m(bm x) = B_bm i bm m cap 0bm x, we have : ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"beginalign\n  m^dmu_Pi(B_bm i bm m cap 0bm x) = fracmu_Pi(B_bm i bm m cap 0bm x)mu_Pi(B_bm i bm m)\n  = fracmu_Pi(B_bm i bm m(bm x))mu_Pi(B_bm i bm m)\n  = mu_Pi(bm m B_bm i bm m(bm x))\nendalign","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"where we intend bm m bm a bm b =  bm m bm a bm m bm b (products between vectors are componentwise).","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"This allows for an easy generalization in the framework of patchwork copulas: ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Definition (Patchwork copulas [38–40]:) Let bm m in mathbb N^d all divide N, and let mathcal C = C_bm i bm i  bm m be a given collection of copulas. The distribution function:hatC_Nbm m mathcal C(bm x) = sum_bm i  bm m mu_hatC_N(B_bm i bm m) mu_C_bm i(bm m B_bm i bm m(bm x))is a copula. ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"In fact, replacing hatC_N by any copula in the patchwork construct still yields a genuine copula, with no more conditions that all components of bm m divide N. The Checkerboard grids are practical in the sense that computations associated to a Checkerboard copula can be really fast: if the grid is large, the number of boxes is small, and otherwise if the grid is very refined, many boxes are probably empty. On the other hand, the grid is fixed a priori, see [41] for a construction with an adaptive grid.","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"Convergence results for this kind of copulas can be found in [40], with a slightly different parametrization. ","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"note: Not implemented yet!\nDo not hesitate to come talk on our GitHub !","category":"page"},{"location":"empirical/generalities/","page":"Empirical Copulas","title":"Empirical Copulas","text":"R. B. Nelsen. An Introduction to Copulas. 2nd ed Edition, Springer Series in Statistics (Springer, New York, 2006).\n\n\n\nP. Deheuvels. La Fonction de Dépendance Empirique et Ses Propriétés. Académie Royale de Belgique. Bulletin de la Classe des Sciences 65, 274–292 (1979).\n\n\n\nJ. Segers, M. Sibuya and H. Tsukahara. The Empirical Beta Copula. Journal of Multivariate Analysis 155, 35–51 (2017).\n\n\n\nA. Cuberos, E. Masiello and V. Maume-Deschamps. Copulas Checker-Type Approximations: Application to Quantiles Estimation of Sums of Dependent Random Variables. Communications in Statistics - Theory and Methods, 1–19 (2019).\n\n\n\nP. Mikusiński and M. D. Taylor. Some Approximations of N-Copulas. Metrika 72, 385–414 (2010).\n\n\n\nF. Durante, E. Foscolo, J. A. Rodríguez-Lallena and M. Úbeda-Flores. A Method for Constructing Higher-Dimensional Copulas. Statistics 46, 387–404 (2012).\n\n\n\nF. Durante, J. Fernández Sánchez and C. Sempi. Multivariate Patchwork Copulas: A Unified Approach with Applications to Partial Comonotonicity. Insurance: Mathematics and Economics 53, 897–905 (2013).\n\n\n\nF. Durante, J. Fernández-Sánchez, J. J. Quesada-Molina and M. Úbeda-Flores. Convergence Results for Patchwork Copulas. European Journal of Operational Research 247, 525–531 (2015).\n\n\n\nO. Laverny. Empirical and Non-Parametric Copula Models with the Cort R Package. Journal of Open Source Software 5, 2653 (2020).\n\n\n\n","category":"page"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"CurrentModule = Copulas","category":"page"},{"location":"sklar/#Sklar's-Distribution","page":"Sklar's Distributions","title":"Sklar's Distribution","text":"","category":"section"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"Recall the following theorem from [9]: ","category":"page"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"Theorem (Sklar): For every random vector bm X, there exists a copula C such that forall bm xin mathbb R^d F(bm x) = C(F_1(x_1)F_d(x_d))The copula C is uniquely determined on mathrmRan(F_1) times  times mathrmRan(F_d), where mathrmRan(F_i) denotes the range of the function F_i. In particular, if all marginals are absolutely continuous, C is unique.","category":"page"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"The implementation we have of this theorem allows building multivariate distributions by specifying separately their marginals and dependence structures as follows:","category":"page"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"using Copulas, Distributions, Random\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution","category":"page"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"Although the output is not formatted, the model is constructed, and can be used in different ways: ","category":"page"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"u = rand(D,10)","category":"page"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"pdf(D, u)","category":"page"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"cdf(D, u)","category":"page"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"From this construction, the object D is a genuine multivariate random vector following Distributions.jl's API, and can be sampled (rand()), can have its probability density function and its distribution function evaluated (respectively pdf and cdf), etc.","category":"page"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"SklarDist","category":"page"},{"location":"sklar/#Copulas.SklarDist","page":"Sklar's Distributions","title":"Copulas.SklarDist","text":"SklarDist{CT,TplMargins}\n\nFields:\n\nC::CT - The copula\nm::TplMargins - a Tuple representing the marginal distributions\n\nConstructor\n\nSklarDist(C,m)\n\nThis function allows to construct a random vector specified, through the Sklar Theorem, by its marginals and its copula separately. See Sklar's theorem:\n\nTheorem (Sklar 1959): For every random vector bm X, there exists a copula C such that forall bm xin mathbb R^d F(bm x) = C(F_1(x_1)F_d(x_d)) The copula C is uniquely determined on mathrmRan(F_1) times  times mathrmRan(F_d), where mathrmRan(F_i) denotes the range of the function F_i. In particular, if all marginals are absolutely continuous, C is unique.\n\nThe obtain random vector follows Distributions.jl's API and can be sampled, pdf and cdf can be evaluated, etc... We even provide a fit function. See the folowing exemple code : \n\nusing Copulas, Distributions, Random\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution\n\nsimu = rand(D,1000) # Generate a dataset\n\n# You may estimate a copula using the `fit` function:\nD̂ = fit(SklarDist{ClaytonCopula,Tuple{Gamma,Normal,LogNormal}}, simu)\n\nReferences: \n\n[9] Sklar, M. (1959). Fonctions de répartition à n dimensions et leurs marges. In Annales de l'ISUP (Vol. 8, No. 3, pp. 229-231).\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"sklar/","page":"Sklar's Distributions","title":"Sklar's Distributions","text":"R. B. Nelsen. An Introduction to Copulas. 2nd ed Edition, Springer Series in Statistics (Springer, New York, 2006).\n\n\n\nA. Sklar. Fonctions de Repartition à n Dimension et Leurs Marges. Université Paris 8, 1–3 (1959).\n\n\n\n","category":"page"},{"location":"transformations/","page":"Transformed Copulas","title":"Transformed Copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"transformations/#Transformed-Copulas","page":"Transformed Copulas","title":"Transformed Copulas","text":"","category":"section"},{"location":"transformations/#SurvivalCopula","page":"Transformed Copulas","title":"SurvivalCopula","text":"","category":"section"},{"location":"transformations/","page":"Transformed Copulas","title":"Transformed Copulas","text":"SurvivalCopula","category":"page"},{"location":"transformations/#Copulas.SurvivalCopula","page":"Transformed Copulas","title":"Copulas.SurvivalCopula","text":"SurvivalCopula(C,indices)\n\nComputes the survival version of any copula on given indices. From a copula C in dimension d, and some indices i_1i_k in 1d, the survival copula associated simply reverses its arguments on chosen indices. For exemple, for d=4 and indices (23), we have: \n\nS(u_1u_4) = C(u_11-u_21-u3u_4)\n\nThis constructor allows to derive new \"survival\" families. For exemple, in bivariate cases, this allows to do \"rotations\". The obtained models can be treated as the starting one, i.e. as a random vector in [0,1]^d with uniforms marginals.\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"examples/other_usecases/#Other-known-use-cases.","page":"Other known use cases.","title":"Other known use cases.","text":"","category":"section"},{"location":"examples/other_usecases/","page":"Other known use cases.","title":"Other known use cases.","text":"There are a few other use cases of our package that are scatter around the ecosystem. Instead of reproducing these here, we simply link to a few of them : ","category":"page"},{"location":"examples/other_usecases/","page":"Other known use cases.","title":"Other known use cases.","text":"GlobalSensitivity.jl exploits Copulas.jl to provide Shapley effects implementation, see there example there. \nEconomicScenarioGenerators.jl uses Copulas.jl's dependence structures to construct multivariate financial assets, see their example there.","category":"page"},{"location":"examples/other_usecases/","page":"Other known use cases.","title":"Other known use cases.","text":"If you want to add a link to your work here do not hesitate to contact us or simply open a PR. ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"archimedean/generalities/#archimedean_copulas_header","page":"Archimedean Copulas","title":"General Discussion","text":"","category":"section"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"An important parametric class of copulas is the class of Archimedean copulas. To define Archimedean copulas, we must take a look at their generators, which are unrelated to spherical generators, and must be d-monotone functions. ","category":"page"},{"location":"archimedean/generalities/#Generators-and-d-monotony","page":"Archimedean Copulas","title":"Generators and d-monotony","text":"","category":"section"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Archimedean generators can be defined as follows:","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Definition (Archimedean generator): A d-Archimedean generator is a d-monotone function phi mathbb R_+ to 01such that phi(0) = 1 and phi(+infty) = 0.","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"where the notion of d-monotone function can be defined as follows: ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Definition (d-monotony [20]): A function phi is said to be d-monotone if it has d-2 derivatives which satisfy (-1)^k phi^(k) ge 0 forall k in 1d-2and if (-1)^d-2phi^(d-2) is a non-increasing and convex function. A function that is d-monotone for all d is called completely monotone.","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"In this package, there is an abstract class Generator that contains those generators. Many Archimedean generators are already implemented for you ! See the list of implemented archimedean generator to get an overview. ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"If you do not find the one you need, you may define it yourself by subtyping Generator. The API does not ask for much information, which is really convenient. Only the two following methods are required:","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"The ϕ(G::MyGenerator,t) function returns the value of the archimedean generator itself. \nThe max_monotony(G::MyGenerator) returns its maximum monotony, that is the greater integer d making the generator d-monotonous.","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Thus, a new generator implementation may simply look like:","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"struct MyGenerator{T} <: Generator\n    θ::T\nend\nϕ(G::MyGenerator,t) = exp(-G.θ * t) # can you recognise this one ?\nmax_monotony(G::MyGenerator) = Inf","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"tip: Win-Win strategy\nThese two functions are enough to sample the corresponding Archimedean copula (see how in the Inverse Williamson d-transforms section of the documentation). However, if you know a bit more about your generator, implementing a few more simple methods can largely fasten the algorithms. You'll find more details on these methods in the Generator docstring.","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"For example, Here is a graph of a few Clayton Generators: ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"using Copulas: ϕ,ClaytonGenerator,IndependentGenerator\nusing Plots\nplot( x -> ϕ(ClaytonGenerator(-0.5),x), xlims=(0,5), label=\"ClaytonGenerator(-0.5)\")\nplot!(x -> ϕ(IndependentGenerator(),x), label=\"IndependentGenerator()\")\nplot!(x -> ϕ(ClaytonGenerator(0.5),x), label=\"ClaytonGenerator(0.5)\")\nplot!(x -> ϕ(ClaytonGenerator(1),x), label=\"ClaytonGenerator(1)\")\nplot!(x -> ϕ(ClaytonGenerator(5),x), label=\"ClaytonGenerator(5)\")","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"And the corresponding inverse functions: ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"using Copulas: ϕ⁻¹,ClaytonGenerator,IndependentGenerator\nusing Plots\nplot( x -> ϕ⁻¹(ClaytonGenerator(-0.5),x), xlims=(0,1), ylims=(0,5), label=\"ClaytonGenerator(-0.5)\")\nplot!(x -> ϕ⁻¹(IndependentGenerator(),x), label=\"IndependentGenerator()\")\nplot!(x -> ϕ⁻¹(ClaytonGenerator(0.5),x), label=\"ClaytonGenerator(0.5)\")\nplot!(x -> ϕ⁻¹(ClaytonGenerator(1),x), label=\"ClaytonGenerator(1)\")\nplot!(x -> ϕ⁻¹(ClaytonGenerator(5),x), label=\"ClaytonGenerator(5)\")","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Generator","category":"page"},{"location":"archimedean/generalities/#Copulas.Generator","page":"Archimedean Copulas","title":"Copulas.Generator","text":"Generator\n\nAbstract type. Implements the API for archimedean generators. \n\nAn Archimedean generator is simply a function  phi mathbb R_+ to 01 such that phi(0) = 1 and phi(+infty) = 0. \n\nTo generate an archimedean copula in dimension d, the function also needs to be d-monotone, that is : \n\nphi is d-2 times derivable.\n(-1)^k phi^(k) ge 0 forall k in 1d-2 and if (-1)^d-2phi^(d-2) is a non-increasing and convex function. \n\nThe access to the function phi itself is done through the interface: \n\nϕ(G::Generator, t)\n\nWe do not check algorithmically that the proposed generators are d-monotonous. Instead, it is up to the person implementing the generator to tell the interface how big can d be through the function \n\nmax_monotony(G::MyGenerator) = # some integer, the maximum d so that the generator is d-monotonous.\n\nMore methods can be implemented for performance, althouhg there are implement defaults in the package : \n\nϕ⁻¹( G::Generator, x) gives the inverse function of the generator.\nϕ⁽¹⁾(G::Generator, t) gives the first derivative. \nϕ⁽ᵏ⁾(G::Generator, k, t) gives the kth derivative. \nwilliamson_dist(G::Generator, d) gives the Wiliamson d-transform of the generator, see WilliamsonTransforms.jl.\n\nReferences: \n\n[20] McNeil, A. J., & Nešlehová, J. (2009). Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Note that the rate at which these functions are reaching 0 (and their inverse reaching infinity on the left boundary) can vary a lot from one to the other. Note also that the difference between each of them is easier to grasp on the inverse plot. ","category":"page"},{"location":"archimedean/generalities/#Williamson-d-transform","page":"Archimedean Copulas","title":"Williamson d-transform","text":"","category":"section"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"An easy way to construct new d-monotonous generators is the use of the Williamson d-transform.","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Definition (Williamson d-transformation): For a univariate non-negative random variable X, with cumulative distribution function F and an integer dge 2, the Williamson-d-transform of X is the real function supported on 0infty given by:phi(t) = 𝒲_d(X)(t)=int_t^infty left(1 - fractxright)^d-1 dF(x)= mathbb Eleft( (1 - fractX)^d-1_+right) mathbb 1_t  0 + left(1 - F(0)right)mathbb 1_t 0","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"In this package, we implemented it through the WilliamsonGenerator class. It can be used as follows: ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"WilliamsonGenerator(X::UnivariateRandomVariable, d).","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"This function computes the Williamson d-transform of the provided random variable X using the WilliamsonTransforms.jl package. See [20, 21] for the literature. ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"warn: `max_monotony` of Williamson generators\nThe d-transform of a positive random variable is d-monotonous but not k-monotonous for any k  d. Its max monotony is therefore d. This has a few implications, one of the biggest one is that the d-variate Archimedean copula that corresponds has no density. More genrally, if you want your Archimedean copula to have a density, you have to use a generator that is more-monotonous that the dimension of your model. ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"WilliamsonGenerator","category":"page"},{"location":"archimedean/generalities/#Copulas.WilliamsonGenerator","page":"Archimedean Copulas","title":"Copulas.WilliamsonGenerator","text":"WilliamsonGenerator{TX}\ni𝒲{TX}\n\nFields:\n\nX::TX – a random variable that represents its Williamson d-transform\nd::Int – the dimension of the transformation. \n\nConstructor\n\nWilliamsonGenerator(X::Distributions.UnivariateDistribution, d)\ni𝒲(X::Distributions.UnivariateDistribution,d)\n\nThe WilliamsonGenerator (alias i𝒲) allows to construct a d-monotonous archimedean generator from a positive random variable X::Distributions.UnivariateDistribution. The transformation, which is called the inverse Williamson transformation, is implemented in WilliamsonTransforms.jl. \n\nFor a univariate non-negative random variable X, with cumulative distribution function F and an integer dge 2, the Williamson-d-transform of X is the real function supported on 0infty given by:\n\nphi(t) = 𝒲_d(X)(t) = int_t^infty left(1 - fractxright)^d-1 dF(x) = mathbb Eleft( (1 - fractX)^d-1_+right) mathbb 1_t  0 + left(1 - F(0)right)mathbb 1_t 0\n\nThis function has several properties: \n\nWe have that phi(0) = 1 and phi(Inf) = 0\nphi is d-2 times derivable, and the signs of its derivatives alternates : forall k in 0d-2 (-1)^k phi^(k) ge 0.\nphi^(d-2) is convex.\n\nThese properties makes this function what is called a d-monotone archimedean generator, able to generate archimedean copulas in dimensions up to d. Our implementation provides this through the Generator interface: the function phi can be accessed by \n\nG = WilliamsonGenerator(X, d)\nϕ(G,t)\n\nNote that you'll always have:\n\nmax_monotony(WilliamsonGenerator(X,d)) === d\n\nReferences: \n\n[21] Williamson, R. E. (1956). Multiply monotone functions and their Laplace transforms. Duke Math. J. 23 189–207. MR0077581\n[20] McNeil, Alexander J., and Johanna Nešlehová. \"Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\" (2009): 3059-3097.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/generalities/#w_trans_section","page":"Archimedean Copulas","title":"Inverse Williamson d-transform","text":"","category":"section"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"The Williamson d-transform is a bijective transformation[1] from the set of positive random variables to the set of generators. It therefore has an inverse transformation (called, surprisingly, the inverse Williamson d-transform) that construct the positive random variable R from a generator phi.","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"[1]: This bijection is to be taken carefuly: the bijection is between random variables with unit scales and generators with common value at 1, sicne on both rescaling does not change the underlying copula. ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"This transformation is implemented through one method in the Generator interface that is worth talking a bit about : williamson_dist(G::Generator, d). This function computes the inverse Williamson d-transform of the d-monotone archimedean generator ϕ, still using the WilliamsonTransforms.jl package. See [20, 21].","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"To put it in a nutshell, for phi a d-monotone archimedean generator, the inverse Williamson-d-transform of phi is the cumulative distribution function F of a non-negative random variable R, defined by : ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"F(x) = 𝒲_d^-1(phi)(x) = 1 - frac(-x)^d-1 phi_+^(d-1)(x)k - sum_k=0^d-2 frac(-x)^k phi^(k)(x)k","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"The WilliamsonTransforms.jl package implements this transformation (and its inverse, the Williamson d-transfrom) in all generality. It returns this cumulative distribution function in the form of the corresponding random variable <:Distributions.ContinuousUnivariateDistribution from Distributions.jl. You may then compute : ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"The cdf via Distributions.cdf\nThe pdf via Distributions.pdf and the logpdf via Distributions.logpdf\nSamples from the distribution via rand(X,n).","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"As an example of a generator produced by the Williamson transformation and its inverse, we propose to construct a generator from a LogNormal distribution:","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"using Distributions\nusing Copulas: i𝒲, ϕ⁻¹, IndependentGenerator\nusing Plots\nG = i𝒲(LogNormal(), 2)\nplot(x -> ϕ⁻¹(G,x), xlims=(0.1,0.9), label=\"G\")\nplot!(x -> ϕ⁻¹(IndependentGenerator(),x), label=\"Independence\")","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"The i𝒲 alias stands for WiliamsonGenerator. To stress the generality of the approach, remark that any positive distribution is allowed, including discrete ones: ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"using Distributions\nusing Copulas: i𝒲, ϕ⁻¹\nusing Plots\nG1 = i𝒲(Binomial(10,0.3), 2)\nG2 = i𝒲(Binomial(10,0.3), 3)\nplot(x -> ϕ⁻¹(G1,x), xlims=(0.1,0.9), label=\"G1\")\nplot!(x -> ϕ⁻¹(G2,x), xlims=(0.1,0.9), label=\"G2\")","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"As obvious from the definition of the Williamson transform, using a discrete distribution produces piecewise-linear generators, where the number of pieces is dependent on the order of the transformation. ","category":"page"},{"location":"archimedean/generalities/#Archimedean-copulas","page":"Archimedean Copulas","title":"Archimedean copulas","text":"","category":"section"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Let's first define formally archimedean copulas: ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Definition (Archimedean copula): If phi is a d-monotonous Archimedean generator, then the function C(bm u) = phileft(sumlimits_i=1^d phi^-1(u_i)right)is a copula. ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"There are a few archimedean generators that are worth noting since they correspond to known archimedean copulas families: ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"IndependentGenerator: phi(t) =e^-t text generates  Pi.\nClaytonGenerator: phi_theta(t) = left(1+tthetaright)^-theta^-1 generates the mathrmClayton(theta) copula.\nGumbelGenerator: phi_theta(t) = exp-t^theta^-1 generates the mathrmGumbel(theta) copula.\nFrankGenerator: phi_theta(t) = -theta^-1lnleft(1+e^-t-theta-e^-tright) generates the mathrmFranck(theta) copula.","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"There are a lot of others implemented in the package, see our large list of implemented archimedean generator. ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Archimedean copulas have a nice decomposition, called the Radial-simplex decomposition: ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Property (Radial-simplex decomposition [20, 22]): A d-variate random vector bm U following an Archimedean copula with generator phi can be decomposed into bm U = phi(bm S R)where bm S is uniform on the d-variate simplex and R is a non-negative random variable, independent form bm S, defined as the inverse Williamson d-transform of phi.  ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"This is why williamson_dist(G::Generator,d) is such an important function in the API: it allows to generator the radial part and sample the Archimedean copula. You may call this function directly to see what distribution will be used: ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"using Copulas: williamson_dist, FrankCopula\nwilliamson_dist(FrankCopula(3,7))","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"For the Frank Copula, as for many classic copulas, the distribution used is known. We pull some of them from Distributions.jl but implement a few more, as this Logarithmic one. Another useful example are negatively-dependent Clayton copulas: ","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"using Copulas: williamson_dist, ClaytonCopula\nwilliamson_dist(ClaytonCopula(3,-0.2))","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"for which the corresponding distribution is known but has no particular name, thus we implemented it under the ClaytonWilliamsonDistribution name.","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"note: Frailty decomposition for completely monotonous generators\nIt is well-known that completely monotone generators are Laplace transforms of non-negative random variables. This gives rise to another decomposition:Property (Frailty decomposition [23]: When phi is completely monotone, it is the Laplace transform of a non-negative random variable W such thatbm U = phi(bm Y  W)where bm Y is a vector of independent and identically distributed (i.i.d.) exponential distributions.The link between the distribution of R and the distribution of W can be explicited. We exploit this link and provide the WilliamsonFromFrailty() constructor that construct the distribution of R from the distribution of W and returns the corresponding  WilliamsonGenerator from the frailty distribution itself. The corresponding ϕ is simply the laplace transform of W. This is another potential way of constructing new archimedean copulas !  We use this fraily approach for several generators, since sometimes it is faster, including e.g. the Clayton one with positive dependence:using Copulas: williamson_dist, ClaytonCopula\nwilliamson_dist(ClaytonCopula(3,10))","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"ArchimedeanCopula","category":"page"},{"location":"archimedean/generalities/#Copulas.ArchimedeanCopula","page":"Archimedean Copulas","title":"Copulas.ArchimedeanCopula","text":"ArchimedeanCopula{d, TG}\n\nFields:      - G::TG : the generator <: Generator. \n\nConstructor: \n\nArchimedeanCopula(d::Int,G::Generator)\n\nFor some Archimedean Generator G::Generator and some dimenson d, this class models the archimedean copula which has this generator. The constructor checks for validity by ensuring that max_monotony(G) ≥ d. The d-variate archimedean copula with generator phi writes: \n\nC(mathbf u) = phi^-1left(sum_i=1^d phi(u_i)right)\n\nThe default sampling method is the Radial-simplex decomposition using the Williamson transformation of phi. \n\nThere exists several known parametric generators that are implement in the package. For every NamedGenerator <: Generator implemented in the package, we provide a type alias `NamedCopula{d,...} = ArchimedeanCopula{d,NamedGenerator{...}} to be able to manipulate the classic archimedean copulas without too much hassle for known and usefull special cases. \n\nA generic archimdean copula can be constructed as follows: \n\nstruct MyGenerator <: Generator end\nϕ(G::MyGenerator,t) = exp(-t) # your archimedean generator, can be any d-monotonous function.\nmax_monotony(G::MyGenerator) = Inf # could depend on generators parameters. \nC = ArchimedeanCopula(d,MyGenerator())\n\nThe obtained model can be used as follows: \n\nspl = rand(C,1000)   # sampling\ncdf(C,spl)           # cdf\npdf(C,spl)           # pdf\nloglikelihood(C,spl) # llh\n\nBonus: If you know the Williamson d-transform of your generator and not your generator itself, you may take a look at WilliamsonGenerator that implements them. If you rather know the frailty distribution, take a look at WilliamsonFromFrailty.\n\nReferences:\n\n[21] Williamson, R. E. (1956). Multiply monotone functions and their Laplace transforms. Duke Math. J. 23 189–207. MR0077581\n[20] McNeil, A. J., & Nešlehová, J. (2009). Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"<!–  TODO: Make a few graphs of bivariate archimedeans pdfs and cdfs. And provide a few more standard tools for these copulas ?  –>","category":"page"},{"location":"archimedean/generalities/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"A. J. McNeil and J. Nešlehová. Multivariate Archimedean Copulas, d -Monotone Functions and L1 -Norm Symmetric Distributions. The Annals of Statistics 37, 3059–3097 (2009).\n\n\n\nR. E. Williamson. On multiply monotone functions and their laplace transforms (Mathematics Division, Office of Scientific Research, US Air Force, 1955).\n\n\n\nA. J. McNeil. Sampling Nested Archimedean Copulas. Journal of Statistical Computation and Simulation 78, 567–581 (2008).\n\n\n\nM. Hofert, M. Mächler and A. J. McNeil. Archimedean Copulas in High Dimensions: Estimators and Numerical Challenges Motivated by Financial Applications. Journal de la Société Française de Statistique 154, 25–63 (2013).\n\n\n\n","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"CurrentModule = Copulas","category":"page"},{"location":"dev_roadmap/#Development-roadmap","page":"Dev Roadmap","title":"Development roadmap","text":"","category":"section"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"We hope to implement a few more copula models into this package. The next ones to be implemented will probably be: ","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"Extreme values copulas. \nNested Archimedeans (for any generators, with automatic nesting conditions checks). \nBernstein copula and more general Beta copula as smoothing of the Empirical copula. \nCheckerboardCopula (and more generally PatchworkCopula)","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"More precisely, the following directions could be pursued:","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"Next:","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"More documentation and tests for the current implementation. \nDocs: show how to use the WilliamsonCopula to implement generic Archimedeans.\nGive the user the choice of fitting method via fit(dist,data; method=\"MLE\") or fit(dist,data; method=\"itau\") or fit(dist,data; method=\"irho\").\nFitting a generic archimedean with an empirically produced generator\nAutomatic checks of generator d-monotony ? Dunno if it is even possible. ","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"Maybe later:","category":"page"},{"location":"dev_roadmap/","page":"Dev Roadmap","title":"Dev Roadmap","text":"NestedArchimedean, with automatic checking of nesting conditions for generators. \nVines?\nArchimax ?\nBernsteinCopula and BetaCopula could also be implemented. \nPatchworkCopula and CheckerboardCopula: could be nice things to have :)\nGoodness of fits tests ?","category":"page"},{"location":"idx/","page":"Package Index","title":"Package Index","text":"CurrentModule = Copulas","category":"page"},{"location":"idx/#Reference","page":"Package Index","title":"Reference","text":"","category":"section"},{"location":"idx/","page":"Package Index","title":"Package Index","text":"All docstrings are copied here as a general reference.","category":"page"},{"location":"idx/","page":"Package Index","title":"Package Index","text":"Modules = [Copulas]","category":"page"},{"location":"idx/#Copulas.AMHGenerator-idx","page":"Package Index","title":"Copulas.AMHGenerator","text":"AMHGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nAMHGenerator(θ)\nAMHCopula(d,θ)\n\nThe AMH copula in dimension d is parameterized by theta in -11). It is an Archimedean copula with generator : \n\nphi(t) = 1 - frac1-thetae^-t-theta\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.ArchimedeanCopula-idx","page":"Package Index","title":"Copulas.ArchimedeanCopula","text":"ArchimedeanCopula{d, TG}\n\nFields:      - G::TG : the generator <: Generator. \n\nConstructor: \n\nArchimedeanCopula(d::Int,G::Generator)\n\nFor some Archimedean Generator G::Generator and some dimenson d, this class models the archimedean copula which has this generator. The constructor checks for validity by ensuring that max_monotony(G) ≥ d. The d-variate archimedean copula with generator phi writes: \n\nC(mathbf u) = phi^-1left(sum_i=1^d phi(u_i)right)\n\nThe default sampling method is the Radial-simplex decomposition using the Williamson transformation of phi. \n\nThere exists several known parametric generators that are implement in the package. For every NamedGenerator <: Generator implemented in the package, we provide a type alias `NamedCopula{d,...} = ArchimedeanCopula{d,NamedGenerator{...}} to be able to manipulate the classic archimedean copulas without too much hassle for known and usefull special cases. \n\nA generic archimdean copula can be constructed as follows: \n\nstruct MyGenerator <: Generator end\nϕ(G::MyGenerator,t) = exp(-t) # your archimedean generator, can be any d-monotonous function.\nmax_monotony(G::MyGenerator) = Inf # could depend on generators parameters. \nC = ArchimedeanCopula(d,MyGenerator())\n\nThe obtained model can be used as follows: \n\nspl = rand(C,1000)   # sampling\ncdf(C,spl)           # cdf\npdf(C,spl)           # pdf\nloglikelihood(C,spl) # llh\n\nBonus: If you know the Williamson d-transform of your generator and not your generator itself, you may take a look at WilliamsonGenerator that implements them. If you rather know the frailty distribution, take a look at WilliamsonFromFrailty.\n\nReferences:\n\n[21] Williamson, R. E. (1956). Multiply monotone functions and their Laplace transforms. Duke Math. J. 23 189–207. MR0077581\n[20] McNeil, A. J., & Nešlehová, J. (2009). Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.ClaytonGenerator-idx","page":"Package Index","title":"Copulas.ClaytonGenerator","text":"ClaytonGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nClaytonGenerator(θ)\nClaytonCopula(d,θ)\n\nThe Clayton copula in dimension d is parameterized by theta in -1(d-1)infty). It is an Archimedean copula with generator : \n\nphi(t) = left(1+mathrmsign(theta)*tright)^-1frac1theta\n\nIt has a few special cases: \n\nWhen θ = -1/(d-1), it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 0, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.EllipticalCopula-idx","page":"Package Index","title":"Copulas.EllipticalCopula","text":"EllipticalCopula{d,MT}\n\nThis is an abstract type. It implements an interface for all Elliptical copulas. We construct internally elliptical copulas using the sklar's theorem, by considering the copula C to be defined as : \n\nC = F circ (F_1^-1F_d^-1)\n\nwhere F and F_1F_d are respectively the multivariate distribution function of some elliptical random vector and the univariate distribution function of its marginals.  For a type MyCop <: EllipitcalCopula, it is necessary to implement the following methods: \n\nN(::Type{MyCOp}), returning the constructor of the elliptical random vector from its correlation matrix. For example, N(GaussianCopula) simply returns MvNormal from Distributions.jl.\nU(::Type{MyCOp}), returning the constructor for the univariate marginal, usually in standardized form. For example, U(GaussianCopula) returns Normal from Distributions.jl.\n\nFrom these two functions, the abstract type provides a fully functional copula. \n\nDetails\n\nRecall the definition of spherical random vectors: \n\nDefinition (Spherical and elliptical random vectors): A random vector bm X is said to be spherical if for all orthogonal matrix bm A in O_d(mathbb R), bm Abm X sim bm X. For every matrix bm B and vector bm c, the random vector bm B bm X + bm c is then said to be elliptical.\n\nRecall that spherical random vectors are random vectors which characteristic functions (c.f.) only depend on the norm of their arguments. Indeed, for any bm A in O_d(mathbb R), \n\nphi(bm t) = mathbb Eleft(e^langle bm t bm X rangleright)= mathbb Eleft(e^langle bm t bm Abm X rangleright) = mathbb Eleft(e^langle bm Abm t bm X rangleright) = phi(bm Abm t)\n\nWe can therefore express this characteristic function as phi(bm t) = psi(lVert bm t rVert_2^2), where psi is a function that characterizes the spherical family, called the generator of the family. Any characteristic function that can be expressed as a function of the norm of its argument is the characteristic function of a spherical random vector, since lVert bm A bm t rVert_2 = lVert bm t rVert_2 for any orthogonal matrix bm A. \n\nHowever, note that this is not how the underlying code is working, we do not check for validity of the proposed generator (we dont even use it). You can construct such an elliptical family using simply Sklar: \n\nstruct MyElliptical{d,T} <: EllipticalCopula{d,T}\n    θ:T\nend\nU(::Type{MyElliptical{d,T}}) where {d,T} # Distribution of the univaraite marginals, Normal() for the Gaussian case. \nN(::Type{MyElliptical{d,T}}) where {d,T} # Distribution of the mutlivariate random vector, MvNormal(C.Σ) for the Gaussian case. \n\nThese two functions are enough to implement the rest of the interface. \n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.EmpiricalCopula-idx","page":"Package Index","title":"Copulas.EmpiricalCopula","text":"EmpiricalCopula{d,MT}\n\nFields:\n\nu::MT - the matrix of observations. \n\nConstructor\n\nEmpiricalCopula(u;pseudos=true)\n\nThe EmpiricalCopula in dimension d is parameterized by a pseudo-data matrix which should have shape (d,N). Its expression is given as :  \n\nC(mathbf x) = frac1Nsum_i=1^n mathbf 1_mathbf u_i le mathbf x\n\nThis function is very practical, be be aware that this is not a true copula (since mathbf u are only pseudo-observations). The constructor allows you to pass dirctly pseudo-observations (the default) or will compute them for you. You can then compute the cdf of the copula, and sample it through the standard interface.\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.FGMCopula-idx","page":"Package Index","title":"Copulas.FGMCopula","text":"FGMCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nFGMCopula(d, θ)\n\nThe Multivariate Farlie-Gumbel-Morgenstern (FGM) copula of dimension d has 2^d-d-1 parameters theta and function\n\nC(boldsymbolu)=prod_i=1^du_i left1+ sum_k=2^dsum_1 leq j_1  cdots  j_k leq d theta_j_1 cdots j_k baru_j_1cdots baru_j_k right\n\nwhere baru=1-u.\n\nMore details about Farlie-Gumbel-Morgenstern (FGM) copula are found in :\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.38.\n\nWe use the stochastic representation of the copula to obtain random samples.\n\nBlier-Wong, C., Cossette, H., & Marceau, E. (2022). Stochastic representation of FGM copulas using multivariate Bernoulli random variables. Computational Statistics & Data Analysis, 173, 107506.\n\nIt has a few special cases:\n\nWhen d=2 and θ = 0, it is the IndependentCopula.\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.FrankGenerator-idx","page":"Package Index","title":"Copulas.FrankGenerator","text":"FrankGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nFrankGenerator(θ)\nFrankCopula(d,θ)\n\nThe Frank copula in dimension d is parameterized by theta in -inftyinfty). It is an Archimedean copula with generator : \n\nphi(t) = -fraclogleft(1+e^-t(e^-theta-1)right)\theta\n\nIt has a few special cases: \n\nWhen θ = -∞, it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.GaussianCopula-idx","page":"Package Index","title":"Copulas.GaussianCopula","text":"GaussianCopula{d,MT}\n\nFields:\n\nΣ::MT - covariance matrix\n\nConstructor\n\nGaussianCopula(Σ)\n\nThe Gaussian Copula is the  copula of a Multivariate normal distribution. It is constructed as: \n\nC(mathbfx boldsymbolSigma) = F_Sigma(F_Sigmai^-1(x_i)iin 1d)\n\nwhere F_Sigma is a cdf of a gaussian random vector and F_Sigmai is the ith marginal cdf, while Sigma is the covariance matrix. \n\nIt can be constructed in Julia via:  \n\nC = GaussianCopula(Σ)\n\nYou can sample it, compute pdf and cdf, or even fit the distribution via: \n\nu = rand(C,1000)\nRandom.rand!(C,u) # other calling syntax for rng.\npdf(C,u) # to get the density\ncdf(C,u) # to get the distribution function \nĈ = fit(GaussianCopula,u) # to fit on the sampled data. \n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.Generator-idx","page":"Package Index","title":"Copulas.Generator","text":"Generator\n\nAbstract type. Implements the API for archimedean generators. \n\nAn Archimedean generator is simply a function  phi mathbb R_+ to 01 such that phi(0) = 1 and phi(+infty) = 0. \n\nTo generate an archimedean copula in dimension d, the function also needs to be d-monotone, that is : \n\nphi is d-2 times derivable.\n(-1)^k phi^(k) ge 0 forall k in 1d-2 and if (-1)^d-2phi^(d-2) is a non-increasing and convex function. \n\nThe access to the function phi itself is done through the interface: \n\nϕ(G::Generator, t)\n\nWe do not check algorithmically that the proposed generators are d-monotonous. Instead, it is up to the person implementing the generator to tell the interface how big can d be through the function \n\nmax_monotony(G::MyGenerator) = # some integer, the maximum d so that the generator is d-monotonous.\n\nMore methods can be implemented for performance, althouhg there are implement defaults in the package : \n\nϕ⁻¹( G::Generator, x) gives the inverse function of the generator.\nϕ⁽¹⁾(G::Generator, t) gives the first derivative. \nϕ⁽ᵏ⁾(G::Generator, k, t) gives the kth derivative. \nwilliamson_dist(G::Generator, d) gives the Wiliamson d-transform of the generator, see WilliamsonTransforms.jl.\n\nReferences: \n\n[20] McNeil, A. J., & Nešlehová, J. (2009). Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.GumbelBarnettGenerator-idx","page":"Package Index","title":"Copulas.GumbelBarnettGenerator","text":"GumbelBarnettGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelBarnettGenerator(θ)\nGumbelBarnettCopula(d,θ)\n\nThe Gumbel-Barnett copula is an archimdean copula with generator:\n\nphi(t) = expθ^-1(1-e^t) 0 leq theta leq 1\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\nReferences:\n\n[4] Joe, H. (2014). Dependence modeling with copulas. CRC press, Page.437\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.GumbelGenerator-idx","page":"Package Index","title":"Copulas.GumbelGenerator","text":"GumbelGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelGenerator(θ)\nGumbelCopula(d,θ)\n\nThe Gumbel copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = exp-t^frac1θ\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.IndependentGenerator-idx","page":"Package Index","title":"Copulas.IndependentGenerator","text":"IndependentGenerator\n\nConstructor\n\nIndependentGenerator()\nIndependentCopula(d)\n\nThe Independent Copula in dimension d is the simplest copula, that has the form : \n\nC(mathbfx) = prod_i=1^d x_i\n\nIt happends to be an Archimedean Copula, with generator : \n\nphi(t) = exp-t\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.InvGaussianGenerator-idx","page":"Package Index","title":"Copulas.InvGaussianGenerator","text":"InvGaussianGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nInvGaussianGenerator(θ)\nInvGaussianCopula(d,θ)\n\nThe Inverse Gaussian copula in dimension d is parameterized by theta in 0infty). It is an Archimedean copula with generator :\n\nphi(t) = expfrac1-sqrt1+2θ^2tθ\n\nMore details about Inverse Gaussian Archimedean copula are found in :\n\nMai, Jan-Frederik, and Matthias Scherer. Simulating copulas: stochastic models, sampling algorithms, and applications. Vol. 6. # N/A, 2017. Page 74.\n\nIt has a few special cases:\n\nWhen θ = 0, it is the IndependentCopula\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.JoeGenerator-idx","page":"Package Index","title":"Copulas.JoeGenerator","text":"JoeGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nJoeGenerator(θ)\nJoeCopula(d,θ)\n\nThe Joe copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = 1 - left(1 - e^-tright)^frac1theta\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.MGenerator-idx","page":"Package Index","title":"Copulas.MGenerator","text":"MGenerator\n\nConstructor\n\nMGenerator()\nMCopula(d)\n\nThe Upper Frechet-Hoeffding bound is the copula with the greatest value among all copulas. It correspond to comonotone random vectors. \n\nFor any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas.\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.PlackettCopula-idx","page":"Package Index","title":"Copulas.PlackettCopula","text":"PlackettCopula{P}\n\nFields:     - θ::Real - parameter\n\nConstructor\n\nPlackettCopula(θ)\n\nParameterized by theta  0 The Plackett copula is\n\nC_theta(uv) = fracleft 1+(theta-1)(u+v)right- sqrt1+(theta-1)(u+v)^2-4uvtheta(theta-1)2(theta-1)\n\nand for theta = 1\n\nC_1(uv) = uv \n\nIt has a few special cases: \n\nWhen θ = 0, is is the MCopula (Upper Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the WCopula (Lower Frechet-Hoeffding bound) \n\nReferences:\n\n[4] Joe, H. (2014). Dependence modeling with copulas. CRC press, Page.164\n[45] Johnson, Mark E. Multivariate statistical simulation: A guide to selecting and generating continuous multivariate distributions. Vol. 192. John Wiley & Sons, 1987. Page 193.\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.38.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.RafteryCopula-idx","page":"Package Index","title":"Copulas.RafteryCopula","text":"RafteryCopula{d, P}\n\nFields:     - θ::Real - parameter\n\nConstructor\n\nRafteryCopula(d, θ)\n\nThe Multivariate Raftery Copula of dimension d is parameterized by theta in 01 \n\nC_theta(mathbfu) = u_(1) + frac(1 - theta)(1 - d)1 - theta - d left(prod_j=1^d u_jright)^frac11-theta - sum_i=2^d fractheta(1-theta)(1-theta-i)(2-theta-i) left(prod_j=1^i-1u_(j)right)^frac11-thetau_(i)^frac2-theta-i1-theta\n\nwhere u_(1) ldots  u_(d) denote the order statistics of u_1 ldots u_d. More details about Multivariate Raftery Copula are found in the references below.\n\nIt has a few special cases:\n\nWhen θ = 0, it is the IndependentCopula.\nWhen θ = 1, it is the the Fréchet upper bound\n\nReferences: \n\n[46] Saali, T., M. Mesfioui, and A. Shabri, 2023: Multivariate Extension of Raftery Copula. Mathematics, 11, 414, https://doi.org/10.3390/math11020414. \n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.6. \n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.SklarDist-idx","page":"Package Index","title":"Copulas.SklarDist","text":"SklarDist{CT,TplMargins}\n\nFields:\n\nC::CT - The copula\nm::TplMargins - a Tuple representing the marginal distributions\n\nConstructor\n\nSklarDist(C,m)\n\nThis function allows to construct a random vector specified, through the Sklar Theorem, by its marginals and its copula separately. See Sklar's theorem:\n\nTheorem (Sklar 1959): For every random vector bm X, there exists a copula C such that forall bm xin mathbb R^d F(bm x) = C(F_1(x_1)F_d(x_d)) The copula C is uniquely determined on mathrmRan(F_1) times  times mathrmRan(F_d), where mathrmRan(F_i) denotes the range of the function F_i. In particular, if all marginals are absolutely continuous, C is unique.\n\nThe obtain random vector follows Distributions.jl's API and can be sampled, pdf and cdf can be evaluated, etc... We even provide a fit function. See the folowing exemple code : \n\nusing Copulas, Distributions, Random\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution\n\nsimu = rand(D,1000) # Generate a dataset\n\n# You may estimate a copula using the `fit` function:\nD̂ = fit(SklarDist{ClaytonCopula,Tuple{Gamma,Normal,LogNormal}}, simu)\n\nReferences: \n\n[9] Sklar, M. (1959). Fonctions de répartition à n dimensions et leurs marges. In Annales de l'ISUP (Vol. 8, No. 3, pp. 229-231).\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.SurvivalCopula-idx","page":"Package Index","title":"Copulas.SurvivalCopula","text":"SurvivalCopula(C,indices)\n\nComputes the survival version of any copula on given indices. From a copula C in dimension d, and some indices i_1i_k in 1d, the survival copula associated simply reverses its arguments on chosen indices. For exemple, for d=4 and indices (23), we have: \n\nS(u_1u_4) = C(u_11-u_21-u3u_4)\n\nThis constructor allows to derive new \"survival\" families. For exemple, in bivariate cases, this allows to do \"rotations\". The obtained models can be treated as the starting one, i.e. as a random vector in [0,1]^d with uniforms marginals.\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.TCopula-idx","page":"Package Index","title":"Copulas.TCopula","text":"TCopula{d,MT}\n\nFields:\n\ndf::Int - number of degree of freedom\nΣ::MT - covariance matrix\n\nConstructor\n\nTCopula(df,Σ)\n\nThe Student's T Copula is the  copula of a Multivariate Student distribution. It is constructed as : \n\nC(mathbfx boldsymbolnSigma) = F_nSigma(F_nSigmai^-1(x_i)iin 1d)\n\nwhere F_nSigma is a cdf of a multivariate student random vector with covariance matrix Sigma and n degrees of freedom. and F_{n,\\Sigma,i} is the ith marignal cdf. \n\nIt can be constructed in Julia via:  \n\nC = TCopula(2,Σ)\n\nYou can sample it, compute pdf and cdf, or even fit the distribution via: \n\nu = rand(C,1000)\nRandom.rand!(C,u) # other calling syntax for rng.\npdf(C,u) # to get the density\ncdf(C,u) # to get the distribution function \nĈ = fit(TCopula,u) # to fit on the sampled data. \n\nExcept that currently it does not work since fit(Distributions.MvTDist,data) does not dispatch. \n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.WGenerator-idx","page":"Package Index","title":"Copulas.WGenerator","text":"WGenerator\n\nConstructor\n\nWGenerator()\nWCopula(d)\n\nThe Lower Frechet-Hoeffding bound is the copula with the lowest value among all copulas. Note that W is only a proper copula when d=2, in greater dimensions it is still the (pointwise) lower bound, but not a copula anymore. For any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas.\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.WilliamsonGenerator-idx","page":"Package Index","title":"Copulas.WilliamsonGenerator","text":"WilliamsonGenerator{TX}\ni𝒲{TX}\n\nFields:\n\nX::TX – a random variable that represents its Williamson d-transform\nd::Int – the dimension of the transformation. \n\nConstructor\n\nWilliamsonGenerator(X::Distributions.UnivariateDistribution, d)\ni𝒲(X::Distributions.UnivariateDistribution,d)\n\nThe WilliamsonGenerator (alias i𝒲) allows to construct a d-monotonous archimedean generator from a positive random variable X::Distributions.UnivariateDistribution. The transformation, which is called the inverse Williamson transformation, is implemented in WilliamsonTransforms.jl. \n\nFor a univariate non-negative random variable X, with cumulative distribution function F and an integer dge 2, the Williamson-d-transform of X is the real function supported on 0infty given by:\n\nphi(t) = 𝒲_d(X)(t) = int_t^infty left(1 - fractxright)^d-1 dF(x) = mathbb Eleft( (1 - fractX)^d-1_+right) mathbb 1_t  0 + left(1 - F(0)right)mathbb 1_t 0\n\nThis function has several properties: \n\nWe have that phi(0) = 1 and phi(Inf) = 0\nphi is d-2 times derivable, and the signs of its derivatives alternates : forall k in 0d-2 (-1)^k phi^(k) ge 0.\nphi^(d-2) is convex.\n\nThese properties makes this function what is called a d-monotone archimedean generator, able to generate archimedean copulas in dimensions up to d. Our implementation provides this through the Generator interface: the function phi can be accessed by \n\nG = WilliamsonGenerator(X, d)\nϕ(G,t)\n\nNote that you'll always have:\n\nmax_monotony(WilliamsonGenerator(X,d)) === d\n\nReferences: \n\n[21] Williamson, R. E. (1956). Multiply monotone functions and their Laplace transforms. Duke Math. J. 23 189–207. MR0077581\n[20] McNeil, Alexander J., and Johanna Nešlehová. \"Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\" (2009): 3059-3097.\n\n\n\n\n\n","category":"type"},{"location":"idx/#Copulas.pseudos-Tuple{Any}-idx","page":"Package Index","title":"Copulas.pseudos","text":"pseudos(sample)\n\nCompute the pseudo-observations of a multivariate sample. Note that the sample has to be given in wide format (d,n), where d is the dimension and n the number of observations.\n\nWarning: the order used is ordinal ranking like https://en.wikipedia.org/wiki/Ranking#Ordinalranking.28.221234.22_ranking.29, see StatsBase.ordinalrank for the ordering we use. If you want more flexibility, checkout NormalizeQuantiles.sampleranks.\n\n\n\n\n\n","category":"method"},{"location":"idx/","page":"Package Index","title":"Package Index","text":"R. B. Nelsen. An Introduction to Copulas. 2nd ed Edition, Springer Series in Statistics (Springer, New York, 2006).\n\n\n\nH. Joe. Dependence Modeling with Copulas (CRC press, 2014).\n\n\n\nA. Sklar. Fonctions de Repartition à n Dimension et Leurs Marges. Université Paris 8, 1–3 (1959).\n\n\n\nA. J. McNeil and J. Nešlehová. Multivariate Archimedean Copulas, d -Monotone Functions and L1 -Norm Symmetric Distributions. The Annals of Statistics 37, 3059–3097 (2009).\n\n\n\nR. E. Williamson. On multiply monotone functions and their laplace transforms (Mathematics Division, Office of Scientific Research, US Air Force, 1955).\n\n\n\nM. E. Johnson. Multivariate statistical simulation: A guide to selecting and generating continuous multivariate distributions. Vol. 192 (John Wiley & Sons, 1987).\n\n\n\nT. Saali, M. Mesfioui and A. Shabri. Multivariate extension of Raftery copula. Mathematics 11, 414 (2023).\n\n\n\n","category":"page"},{"location":"Liouville/","page":"Liouville Copulas","title":"Liouville Copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"Liouville/#Liouville-Copulas","page":"Liouville Copulas","title":"Liouville Copulas","text":"","category":"section"},{"location":"Liouville/","page":"Liouville Copulas","title":"Liouville Copulas","text":"note: Not merged yet !\nLiouville copulas are coming in this PR : https://github.com/lrnv/Copulas.jl/pull/83, but this is not merged yet. ","category":"page"},{"location":"Liouville/","page":"Liouville Copulas","title":"Liouville Copulas","text":"Archimedean copulas have been widely used in the literature due to their nice decomposition properties and easy parametrization. The interested reader can refer to the extensive literature [24–30, 30–33] on Archimedean copulas, their nesting extensions and most importantly their estimation. ","category":"page"},{"location":"Liouville/","page":"Liouville Copulas","title":"Liouville Copulas","text":"One major drawback of the Archimedean family is that these copulas have exchangeable marginals (i.e., C(bm u) = C(mathrmp(bm u)) for any permutation p(bm u) of u_1u_d): the dependence structure is symmetric, which might not be a wanted property. However, from the Radial-simplex expression, we can easily extrapolate a little and take for bm S a non-uniform distribution on the simplex. ","category":"page"},{"location":"Liouville/","page":"Liouville Copulas","title":"Liouville Copulas","text":"Liouville's copulas share many properties with Archimedean copulas, but are not exchangeable anymore. This is an easy way to produce non-exchangeable dependence structures. See [15] for a practical use of this property.","category":"page"},{"location":"Liouville/","page":"Liouville Copulas","title":"Liouville Copulas","text":"Note that Dirichlet distributions are constructed as bm S = fracbm Glangle bm 1 bm Grangle, where bm G is a vector of independent Gamma distributions with unit scale (and potentially different shapes: taking all shapes equal yields the Archimedean case). ","category":"page"},{"location":"Liouville/","page":"Liouville Copulas","title":"Liouville Copulas","text":"M.-P. Côté and C. Genest. Dependence in a Background Risk Model. Journal of Multivariate Analysis 172, 28–46 (2019).\n\n\n\nM. Hofert. Sampling Nested Archimedean Copulas with Applications to CDO Pricing. Ph.D. Thesis, Universität Ulm (2010).\n\n\n\nM. Hofert and D. Pham. Densities of Nested Archimedean Copulas. Journal of Multivariate Analysis 118, 37–52 (2013).\n\n\n\nA. J. McNeil and J. Nešlehová. From Archimedean to Liouville Copulas. Journal of Multivariate Analysis 101, 1772–1790 (2010).\n\n\n\nH. Cossette, S.-P. Gadoury, E. Marceau and I. Mtalai. Hierarchical Archimedean Copulas through Multivariate Compound Distributions. Insurance: Mathematics and Economics 76, 1–13 (2017).\n\n\n\nH. Cossette, E. Marceau, I. Mtalai and D. Veilleux. Dependent Risk Models with Archimedean Copulas: A Computational Strategy Based on Common Mixtures and Applications. Insurance: Mathematics and Economics 78, 53–71 (2018).\n\n\n\nC. Genest, J. Nešlehová and J. Ziegel. Inference in Multivariate Archimedean Copula Models. TEST 20, 223–256 (2011).\n\n\n\nE. Di Bernardino and D. Rulliere. On Certain Transformations of Archimedean Copulas: Application to the Non-Parametric Estimation of Their Generators. Dependence Modeling 1, 1–36 (2013).\n\n\n\nE. Di Bernardino and D. Rullière. On an Asymmetric Extension of Multivariate Archimedean Copulas Based on Quadratic Form. Dependence Modeling 4 (2016).\n\n\n\nK. Cooray. Strictly Archimedean Copulas with Complete Association for Multivariate Dependence Based on the Clayton Family. Dependence Modeling 6, 1–18 (2018).\n\n\n\nJ. Spreeuw. Archimedean Copulas Derived from Utility Functions. Insurance: Mathematics and Economics 59, 235–242 (2014).\n\n\n\n","category":"page"},{"location":"elliptical/available_models/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"elliptical/available_models/#Elliptical-Copulas","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"","category":"section"},{"location":"elliptical/available_models/#GaussianCopula","page":"Elliptical Copulas","title":"GaussianCopula","text":"","category":"section"},{"location":"elliptical/available_models/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"GaussianCopula","category":"page"},{"location":"elliptical/available_models/#Copulas.GaussianCopula","page":"Elliptical Copulas","title":"Copulas.GaussianCopula","text":"GaussianCopula{d,MT}\n\nFields:\n\nΣ::MT - covariance matrix\n\nConstructor\n\nGaussianCopula(Σ)\n\nThe Gaussian Copula is the  copula of a Multivariate normal distribution. It is constructed as: \n\nC(mathbfx boldsymbolSigma) = F_Sigma(F_Sigmai^-1(x_i)iin 1d)\n\nwhere F_Sigma is a cdf of a gaussian random vector and F_Sigmai is the ith marginal cdf, while Sigma is the covariance matrix. \n\nIt can be constructed in Julia via:  \n\nC = GaussianCopula(Σ)\n\nYou can sample it, compute pdf and cdf, or even fit the distribution via: \n\nu = rand(C,1000)\nRandom.rand!(C,u) # other calling syntax for rng.\npdf(C,u) # to get the density\ncdf(C,u) # to get the distribution function \nĈ = fit(GaussianCopula,u) # to fit on the sampled data. \n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"elliptical/available_models/#TCopula","page":"Elliptical Copulas","title":"TCopula","text":"","category":"section"},{"location":"elliptical/available_models/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"TCopula","category":"page"},{"location":"elliptical/available_models/#Copulas.TCopula","page":"Elliptical Copulas","title":"Copulas.TCopula","text":"TCopula{d,MT}\n\nFields:\n\ndf::Int - number of degree of freedom\nΣ::MT - covariance matrix\n\nConstructor\n\nTCopula(df,Σ)\n\nThe Student's T Copula is the  copula of a Multivariate Student distribution. It is constructed as : \n\nC(mathbfx boldsymbolnSigma) = F_nSigma(F_nSigmai^-1(x_i)iin 1d)\n\nwhere F_nSigma is a cdf of a multivariate student random vector with covariance matrix Sigma and n degrees of freedom. and F_{n,\\Sigma,i} is the ith marignal cdf. \n\nIt can be constructed in Julia via:  \n\nC = TCopula(2,Σ)\n\nYou can sample it, compute pdf and cdf, or even fit the distribution via: \n\nu = rand(C,1000)\nRandom.rand!(C,u) # other calling syntax for rng.\npdf(C,u) # to get the density\ncdf(C,u) # to get the distribution function \nĈ = fit(TCopula,u) # to fit on the sampled data. \n\nExcept that currently it does not work since fit(Distributions.MvTDist,data) does not dispatch. \n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = Copulas","category":"page"},{"location":"getting_started/#Multivariate-random-vectors","page":"Getting Started","title":"Multivariate random vectors","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This section gives some general definitions and tools about dependence structures, multivariate random vectors and copulas. Along this journey through the mathematical theory of copulas, we link to the rest of the documentation for more specific and detailed arguments on particular points, or simply to the technical documentation of the actual implementation.  The interested theoretical reader can take a look at the standard books on the subject [1–4] or more recently [5–8]. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We start here by defining a few concepts about dependence structures and copulas. Consider a real valued random vector bm X = left(X_1X_dright) Omega to mathbb R^d. The random variables X_1X_d are called the marginals of the random vector bm X. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"info: Constructing random variables in Julia via `Distributions.jl`\nRecall that you can construct random variables in Julia by the following code : using Distributions\nX₁ = Normal()       # A standard gaussian random variable\nX₂ = Gamma(2,3)     # A Gamma random variable\nX₃ = Pareto(1)      # A Pareto random variable with no variance.\nX₄ = LogNormal(0,1) # A Lognormal random variable \nnothing # hideWe refer to Distributions.jl's documentation for more details on what you can do with these objects. We assume here that you are familiar with their API.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The probability distribution of the random vector bm X can be characterized by its distribution function F: ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"beginalign*\n  F(bm x) = mathbb Pleft(bm X le bm xright)\n  = mathbb Pleft(forall i in 1d X_i le x_iright)\nendalign*","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"For a function F to be the distribution function of some random vector, it should be d-increasing, right-continuous and left-limited.  For i in 1d, the random variables X_1X_d, called the marginals of the random vector, also have distribution functions denoted F_1F_d and defined by : ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"F_i(x_i) = F(+infty+inftyx_i+infty+infty)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that the range mathrmRan(F) of a distribution function F, univariate or multivariate, is always contained in 01. When the random vector or random variable is absolutely continuous with respect to (w.r.t.) the Lebesgue measure restricted to its domain, the range is exactly 01. When the distribution is discrete with n atoms, the range is a finite set of n+1 values in 01.","category":"page"},{"location":"getting_started/#Copulas-and-Sklar's-Theorem","page":"Getting Started","title":"Copulas and Sklar's Theorem","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"There is a fundamental functional link between the function F and its marginals F_1F_d. This link is expressed by the mean of copulas. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Definition (Copula) : A copula, usually denoted C, is the distribution function of a random vector with marginals that are all uniform on 01, i.e.C_i(u) = umathbb 1_u in 01 text for all i in 1d","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"note: Vocabulary\nIn this documentation but more largely in the literature, the term Copula refers both to the random vector and its distribution function. Usually, the distinction is clear from context. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"You may define a copula object in Julia by simply calling its constructor: ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Copulas\nd = 4 # The dimension of the model\nθ = 7 # Parameter\nC = ClaytonCopula(4,7) # A 4-dimensional clayton copula with parameter θ = 7.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This object is a random vector, and behaves exactly as you would expect a random vector from Distributions.jl to behave: you may sample it with rand(C,100), compute its pdf or cdf with pdf(C,x) and cdf(C,x), etc:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"u = rand(C,10)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"cdf(C,u)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"One of the reasons that makes copulas so useful is discovered by Sklar [9] in 1959:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Theorem (Sklar): For every random vector bm X, there exists a copula C such that forall bm xin mathbb R^d F(bm x) = C(F_1(x_1)F_d(x_d))The copula C is uniquely determined on mathrmRan(F_1) times  times mathrmRan(F_d), where mathrmRan(F_i) denotes the range of the function F_i. In particular, if all marginals are absolutely continuous, C is unique.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This result allows to decompose the distribution of bm X into several components: the marginal distributions on one side, and the copula on the other side, which governs the dependence structure between the marginals. This object is central in our work, and therefore deserves a moment of attention. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Example (Independence): The function Pi  bm x mapsto prod_i=1^d x_i = bm x^bm 1is a copula, corresponding to independent random vectors.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The independence copula can be constructed using the IndependentCopula(d) syntax as follows: ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Π = IndependentCopula(d) # A 4-variate independence structure.\nnothing # hide","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We leverage the Sklar theorem to construct multivariate random vectors from a copula-marginals specification. This can be used as follows: ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"MyDistribution = SklarDist(Π, (X₁,X₂,X₃,X₄))\nMyOtherDistribution = SklarDist(C, (X₁,X₂,X₃,X₄))\nnothing # hide","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"And the API is still the same: ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"rand(MyDistribution,10)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"rand(MyOtherDistribution,10)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"On the other hand, the pseudo() function computes ranks, effectively using Sklar's theorem the other way around (from the marginal space to the unit hypercube).","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"note: Independent random vectors\nDistributions.jl proposes the product_distribution function to create those independent random vectors with given marginals. But you can already see that our approach generalizes to other dependence structres, and is thus much powerfull. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Copulas are bounded functions with values in [0,1] since they correspond to probabilities. But their range can be bounded more precisely:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Property (Fréchet-Hoeffding bounds [10]): For all bm x in 01^d, every copula C satisfies : langle bm 1 bm x - 1 + d^-1rangle_+ le C(bm x) le min bm xwhere y_+ = max(0y).","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The function M  bm x mapsto minbm x, called the upper Fréchet-Hoeffding bound, is a copula. The function W  bm x mapsto langle bm 1 bm x - 1 + d^-1rangle_+, called the lower Fréchet-Hoeffding bound, is on the other hand a copula only when d=2.  These two copulas can be constructed through MCopula(d) and WCopula(2). ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The upper Fréchet-Hoeffding bound corresponds to the case of comonotone random vector: a random vector bm X is said to be comonotone, i.e., to have copula M, when each of its marginals can be written as a non-decreasing transformation of the same random variable (say with mathcal Uleft(01right) distribution). This is a simple but important dependence structure. See e.g.,[11, 12] on this particular copula. Note that the implementation of their sampler was straightforward due to their particular shapes:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"rand(MCopula(2),10) # sampled values are all equal, this is comonotony","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"u = rand(WCopula(2),10)\nsum(u, dims=1) # sum is always equal to one, this is anticomonotony","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Since copulas are distribution functions, like distribution functions of real-valued random variables and random vectors, there exists classical and useful parametric families of copulas. This is mostly the content of this package, and we refer to the rest of the documentation for more details on the models and their implementations. ","category":"page"},{"location":"getting_started/#Fitting-copulas-and-compound-distributions.","page":"Getting Started","title":"Fitting copulas and compound distributions.","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Distributions.jl's API contains a fit function for random vectors and random variables. We propose an implementation of it for copulas and multivariate compound distributions (composed of a copula and some given marginals). It can be used as follows: ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Copulas, Distributions, Random\n# Construct a given model:\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution\n\nsimu = rand(D,1000) # Generate a dataset\n\n# You may estimate a copula using the `fit` function:\nD̂ = fit(SklarDist{ClaytonCopula,Tuple{Gamma,Normal,LogNormal}}, simu)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We see on the output that the parameters were correctly estimated from this sample. More details on the estimator, including, e.g., standard errors, may be obtained with more complicated estimation routines. For a Bayesian approach using  Turing.jl, see this example.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"info: Fitting procedures are not part of the API\nDistributions.jl documentation states that: The fit function will choose a reasonable way to fit the distribution, which, in most cases, is maximum likelihood estimation.The results of this fitting function should then only be used as \"quick-and-dirty\" fits, since the fitting method is \"hidden\" to the user and might even change without breaking releases. We embrace this philosophy: from one copula to the other, the fitting method might not be the same. ","category":"page"},{"location":"getting_started/#Going-further","page":"Getting Started","title":"Going further","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"There are a lot of available copula families in the package, that can be regrouped into a few classes:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Elliptical Copulas, including the Gaussian and Student cases. \nArchimedean Copulas, leveraging their Archimedean Generators\nFréchet-Hoeffding bounds, \nOther Copulas","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Each of these classes more-or-less correspond to an abstract type in our type hierarchy, and to a section of this documentation. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"H. Joe. Multivariate Models and Multivariate Dependence Concepts (CRC press, 1997).\n\n\n\nU. Cherubini, E. Luciano and W. Vecchiato. Copula Methods in Finance (John Wiley & Sons, 2004).\n\n\n\nR. B. Nelsen. An Introduction to Copulas. 2nd ed Edition, Springer Series in Statistics (Springer, New York, 2006).\n\n\n\nH. Joe. Dependence Modeling with Copulas (CRC press, 2014).\n\n\n\nJ.-F. Mai, M. Scherer and C. Czado. Simulating Copulas: Stochastic Models, Sampling Algorithms, and Applications. 2nd edition Edition, Vol. 6 of Series in Quantitative Finance (World Scientific, New Jersey, 2017).\n\n\n\nF. Durante and C. Sempi. Principles of Copula Theory (Chapman and Hall/CRC, 2015).\n\n\n\nC. Czado. Analyzing Dependent Data with Vine Copulas: A Practical Guide With R. Vol. 222 of Lecture Notes in Statistics (Springer International Publishing, Cham, 2019).\n\n\n\nJ. Größer and O. Okhrin. Copulae: An Overview and Recent Developments. WIREs Computational Statistics (2021).\n\n\n\nA. Sklar. Fonctions de Repartition à n Dimension et Leurs Marges. Université Paris 8, 1–3 (1959).\n\n\n\nT. Lux and A. Papapantoleon. Improved Fréchet-Hoeffding Bounds on d-Copulas and Applications in Model-Free Finance, arXiv:1602.08894 math, q-fin.\n\n\n\nR. Kaas, J. Dhaene, D. Vyncke, M. J. Goovaerts and M. Denuit. A Simple Geometric Proof That Comonotonic Risks Have the Convex-Largest Sum. ASTIN Bulletin: The Journal of the IAA 32, 71–80 (2002).\n\n\n\nL. Hua and H. Joe. Multivariate Dependence Modeling Based on Comonotonic Factors. Journal of Multivariate Analysis 155, 317–333 (2017).\n\n\n\n","category":"page"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"miscellaneous/#Other-Copulas","page":"Other Copulas","title":"Other Copulas","text":"","category":"section"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"A few copulas, while necessary in certain cases and really useful, are hard to classify. We gather them here for simplicity. ","category":"page"},{"location":"miscellaneous/#PlackettCopula","page":"Other Copulas","title":"PlackettCopula","text":"","category":"section"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"PlackettCopula","category":"page"},{"location":"miscellaneous/#Copulas.PlackettCopula","page":"Other Copulas","title":"Copulas.PlackettCopula","text":"PlackettCopula{P}\n\nFields:     - θ::Real - parameter\n\nConstructor\n\nPlackettCopula(θ)\n\nParameterized by theta  0 The Plackett copula is\n\nC_theta(uv) = fracleft 1+(theta-1)(u+v)right- sqrt1+(theta-1)(u+v)^2-4uvtheta(theta-1)2(theta-1)\n\nand for theta = 1\n\nC_1(uv) = uv \n\nIt has a few special cases: \n\nWhen θ = 0, is is the MCopula (Upper Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the WCopula (Lower Frechet-Hoeffding bound) \n\nReferences:\n\n[4] Joe, H. (2014). Dependence modeling with copulas. CRC press, Page.164\n[45] Johnson, Mark E. Multivariate statistical simulation: A guide to selecting and generating continuous multivariate distributions. Vol. 192. John Wiley & Sons, 1987. Page 193.\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.38.\n\n\n\n\n\n","category":"type"},{"location":"miscellaneous/#FGMCopula","page":"Other Copulas","title":"FGMCopula","text":"","category":"section"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"Farlie-Gumbel-Morgenstern (FGM) copula","category":"page"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"FGMCopula","category":"page"},{"location":"miscellaneous/#Copulas.FGMCopula","page":"Other Copulas","title":"Copulas.FGMCopula","text":"FGMCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nFGMCopula(d, θ)\n\nThe Multivariate Farlie-Gumbel-Morgenstern (FGM) copula of dimension d has 2^d-d-1 parameters theta and function\n\nC(boldsymbolu)=prod_i=1^du_i left1+ sum_k=2^dsum_1 leq j_1  cdots  j_k leq d theta_j_1 cdots j_k baru_j_1cdots baru_j_k right\n\nwhere baru=1-u.\n\nMore details about Farlie-Gumbel-Morgenstern (FGM) copula are found in :\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.38.\n\nWe use the stochastic representation of the copula to obtain random samples.\n\nBlier-Wong, C., Cossette, H., & Marceau, E. (2022). Stochastic representation of FGM copulas using multivariate Bernoulli random variables. Computational Statistics & Data Analysis, 173, 107506.\n\nIt has a few special cases:\n\nWhen d=2 and θ = 0, it is the IndependentCopula.\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"miscellaneous/#RafteryCopula","page":"Other Copulas","title":"RafteryCopula","text":"","category":"section"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"RafteryCopula","category":"page"},{"location":"miscellaneous/#Copulas.RafteryCopula","page":"Other Copulas","title":"Copulas.RafteryCopula","text":"RafteryCopula{d, P}\n\nFields:     - θ::Real - parameter\n\nConstructor\n\nRafteryCopula(d, θ)\n\nThe Multivariate Raftery Copula of dimension d is parameterized by theta in 01 \n\nC_theta(mathbfu) = u_(1) + frac(1 - theta)(1 - d)1 - theta - d left(prod_j=1^d u_jright)^frac11-theta - sum_i=2^d fractheta(1-theta)(1-theta-i)(2-theta-i) left(prod_j=1^i-1u_(j)right)^frac11-thetau_(i)^frac2-theta-i1-theta\n\nwhere u_(1) ldots  u_(d) denote the order statistics of u_1 ldots u_d. More details about Multivariate Raftery Copula are found in the references below.\n\nIt has a few special cases:\n\nWhen θ = 0, it is the IndependentCopula.\nWhen θ = 1, it is the the Fréchet upper bound\n\nReferences: \n\n[46] Saali, T., M. Mesfioui, and A. Shabri, 2023: Multivariate Extension of Raftery Copula. Mathematics, 11, 414, https://doi.org/10.3390/math11020414. \n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.6. \n\n\n\n\n\n","category":"type"},{"location":"miscellaneous/","page":"Other Copulas","title":"Other Copulas","text":"M.-P. Côté and C. Genest. Dependence in a Background Risk Model. Journal of Multivariate Analysis 172, 28–46 (2019).\n\n\n\nM. Hofert. Sampling Nested Archimedean Copulas with Applications to CDO Pricing. Ph.D. Thesis, Universität Ulm (2010).\n\n\n\nM. Hofert and D. Pham. Densities of Nested Archimedean Copulas. Journal of Multivariate Analysis 118, 37–52 (2013).\n\n\n\nA. J. McNeil and J. Nešlehová. From Archimedean to Liouville Copulas. Journal of Multivariate Analysis 101, 1772–1790 (2010).\n\n\n\nH. Cossette, S.-P. Gadoury, E. Marceau and I. Mtalai. Hierarchical Archimedean Copulas through Multivariate Compound Distributions. Insurance: Mathematics and Economics 76, 1–13 (2017).\n\n\n\nH. Cossette, E. Marceau, I. Mtalai and D. Veilleux. Dependent Risk Models with Archimedean Copulas: A Computational Strategy Based on Common Mixtures and Applications. Insurance: Mathematics and Economics 78, 53–71 (2018).\n\n\n\nC. Genest, J. Nešlehová and J. Ziegel. Inference in Multivariate Archimedean Copula Models. TEST 20, 223–256 (2011).\n\n\n\nE. Di Bernardino and D. Rulliere. On Certain Transformations of Archimedean Copulas: Application to the Non-Parametric Estimation of Their Generators. Dependence Modeling 1, 1–36 (2013).\n\n\n\nE. Di Bernardino and D. Rullière. On an Asymmetric Extension of Multivariate Archimedean Copulas Based on Quadratic Form. Dependence Modeling 4 (2016).\n\n\n\nK. Cooray. Strictly Archimedean Copulas with Complete Association for Multivariate Dependence Based on the Clayton Family. Dependence Modeling 6, 1–18 (2018).\n\n\n\nJ. Spreeuw. Archimedean Copulas Derived from Utility Functions. Insurance: Mathematics and Economics 59, 235–242 (2014).\n\n\n\n","category":"page"},{"location":"dependence_measures/#Measures-of-dependency","page":"Dependence measures","title":"Measures of dependency","text":"","category":"section"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"Although the copula is an object that summarizes completely the dependence structure of any random vector, it is an infinite dimensional object and the interpretation of its properties can be difficult when the dimension gets high. Therefore, the literature has come up with some quantification of the dependence structure that might be used as univariate summaries, of course imperfect, of certain properties of the copula at hand. ","category":"page"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"note: Unfinished work\nUnfortunately these dependence measures are not yet well-specified in the package and their implementation is experimental for the moment. These functions might change in the future, in particular see https://github.com/lrnv/Copulas.jl/issues/134 for future improvements. ","category":"page"},{"location":"dependence_measures/#Kendall's-Tau","page":"Dependence measures","title":"Kendall's Tau","text":"","category":"section"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"Definition (Kendall' τ): For a copula C with a density c, Kendall's τ is defined as: tau = 4 int C(bm u)  c(bm u) dbm u -1","category":"page"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"Kendall's tau can be obtained through τ(C::Copula). Its value only depends on the dependence structure and not the marginals. ","category":"page"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"warn: Multivariate case\nThere exists several multivariate extensions of Kendall's tau. The one implemented here is the one we just defined what ever the dimension d, be careful as the normalization might differ from other places in the literature.","category":"page"},{"location":"dependence_measures/#Spearman's-Rho","page":"Dependence measures","title":"Spearman's Rho","text":"","category":"section"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"Definition (Spearman's ρ): For a copula C with a density c, the Spearman's ρ is defined as: rho = 12 int C(bm u) dbm u -3","category":"page"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"Spearman's Rho can be obtained through ρ(C::Copula). Its value only depends on the dependence structure and not the marginals. ","category":"page"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"warn: Multivariate case\nThere exists several multivariate extensions of Spearman's rho. The one implemented here is the one we just defined what ever the dimension d, be careful as the normalization might differ from other places in the literature.","category":"page"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"note: Specific values of tau and rho\nKendall's tau and Spearman's rho have values between -1 and 1, and are -1 in case of complete anticomonotony and 1 in case of comonotony. Moreover, they are 0 in case of independence. This is  why we say that they measure the 'strength' of the dependency.","category":"page"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"tip: More-that-bivariate cases\nThese two dependence measures make more sense in the bivariate case than in other cases, and therefore we sometimes refer to the Kendall's matrix or the Spearman's matrix for the collection of bivariate coefficients associated to a multivariate copula. Many copula estimators are based on these coefficients, see e.g., [42–44].","category":"page"},{"location":"dependence_measures/#Tail-dependency","page":"Dependence measures","title":"Tail dependency","text":"","category":"section"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"Many people are interested in the tail behavior of their dependence structures. Tail coefficients summarize this tail behavior.","category":"page"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"Definition (Tail dependency): For a copula C, we define (when they exist): beginalign\n   lambda = limlimits_u to 1 frac1 - 2u - C(uu)1- u in 01\n   chi(u) = frac2 ln(1-u)ln(1-2u-C(uu)) -1\n   chi = limlimits_u to 1 chi(u) in -11\n endalignWhen lambda  0, we say that there is a strong upper tail dependency, and chi = 1. When lambda = 0, we say that there is no strong upper tail dependency, and if furthermore chi neq 0 we say that there is weak upper tail dependency.","category":"page"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"The graph of u to chi(u) over frac121 is an interesting tool to assess the existence and strength of the tail dependency. The same kind of tools can be constructed for the lower tail. ","category":"page"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"All these coefficients quantify the behavior of the dependence structure, generally or in the extremes, and are therefore widely used in the literature either as verification tools to assess the quality of fits, or even as parameters. Many parametric copulas families have simple surjections, injections, or even bijections between these coefficients and their parametrization, allowing matching procedures of estimation (a lot like moments matching algorithm for fitting standard random variables).","category":"page"},{"location":"dependence_measures/","page":"Dependence measures","title":"Dependence measures","text":"C. Genest, J. Nešlehová and N. Ben Ghorbal. Estimators Based on Kendall's Tau in Multivariate Copula Models. Australian & New Zealand Journal of Statistics 53, 157–177 (2011).\n\n\n\nG. A. Fredricks and R. B. Nelsen. On the Relationship between Spearman's Rho and Kendall's Tau for Pairs of Continuous Random Variables. Journal of Statistical Planning and Inference 137, 2143–2150 (2007).\n\n\n\nA. Derumigny and J.-D. Fermanian. À propos des tests de l'hypothèse simplificatrice pour les copules conditionnelles. JDS2017, 6 (2017).\n\n\n\n","category":"page"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"CurrentModule = Copulas","category":"page"},{"location":"archimedean/available_models/#available_archimedean_models","page":"Archimedean Generators","title":"Archimedean Generators","text":"","category":"section"},{"location":"archimedean/available_models/#WilliamsonGenerator","page":"Archimedean Generators","title":"WilliamsonGenerator","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"WilliamsonGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.WilliamsonGenerator-archimedean-available_models","page":"Archimedean Generators","title":"Copulas.WilliamsonGenerator","text":"WilliamsonGenerator{TX}\ni𝒲{TX}\n\nFields:\n\nX::TX – a random variable that represents its Williamson d-transform\nd::Int – the dimension of the transformation. \n\nConstructor\n\nWilliamsonGenerator(X::Distributions.UnivariateDistribution, d)\ni𝒲(X::Distributions.UnivariateDistribution,d)\n\nThe WilliamsonGenerator (alias i𝒲) allows to construct a d-monotonous archimedean generator from a positive random variable X::Distributions.UnivariateDistribution. The transformation, which is called the inverse Williamson transformation, is implemented in WilliamsonTransforms.jl. \n\nFor a univariate non-negative random variable X, with cumulative distribution function F and an integer dge 2, the Williamson-d-transform of X is the real function supported on 0infty given by:\n\nphi(t) = 𝒲_d(X)(t) = int_t^infty left(1 - fractxright)^d-1 dF(x) = mathbb Eleft( (1 - fractX)^d-1_+right) mathbb 1_t  0 + left(1 - F(0)right)mathbb 1_t 0\n\nThis function has several properties: \n\nWe have that phi(0) = 1 and phi(Inf) = 0\nphi is d-2 times derivable, and the signs of its derivatives alternates : forall k in 0d-2 (-1)^k phi^(k) ge 0.\nphi^(d-2) is convex.\n\nThese properties makes this function what is called a d-monotone archimedean generator, able to generate archimedean copulas in dimensions up to d. Our implementation provides this through the Generator interface: the function phi can be accessed by \n\nG = WilliamsonGenerator(X, d)\nϕ(G,t)\n\nNote that you'll always have:\n\nmax_monotony(WilliamsonGenerator(X,d)) === d\n\nReferences: \n\n[21] Williamson, R. E. (1956). Multiply monotone functions and their Laplace transforms. Duke Math. J. 23 189–207. MR0077581\n[20] McNeil, Alexander J., and Johanna Nešlehová. \"Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\" (2009): 3059-3097.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#IndependentGenerator","page":"Archimedean Generators","title":"IndependentGenerator","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"IndependentGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.IndependentGenerator","page":"Archimedean Generators","title":"Copulas.IndependentGenerator","text":"IndependentGenerator\n\nConstructor\n\nIndependentGenerator()\nIndependentCopula(d)\n\nThe Independent Copula in dimension d is the simplest copula, that has the form : \n\nC(mathbfx) = prod_i=1^d x_i\n\nIt happends to be an Archimedean Copula, with generator : \n\nphi(t) = exp-t\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#MGenerator","page":"Archimedean Generators","title":"MGenerator","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"MGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.MGenerator","page":"Archimedean Generators","title":"Copulas.MGenerator","text":"MGenerator\n\nConstructor\n\nMGenerator()\nMCopula(d)\n\nThe Upper Frechet-Hoeffding bound is the copula with the greatest value among all copulas. It correspond to comonotone random vectors. \n\nFor any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas.\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#WGenerator","page":"Archimedean Generators","title":"WGenerator","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"WGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.WGenerator","page":"Archimedean Generators","title":"Copulas.WGenerator","text":"WGenerator\n\nConstructor\n\nWGenerator()\nWCopula(d)\n\nThe Lower Frechet-Hoeffding bound is the copula with the lowest value among all copulas. Note that W is only a proper copula when d=2, in greater dimensions it is still the (pointwise) lower bound, but not a copula anymore. For any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas.\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#ClaytonGenerator","page":"Archimedean Generators","title":"ClaytonGenerator","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"ClaytonGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.ClaytonGenerator","page":"Archimedean Generators","title":"Copulas.ClaytonGenerator","text":"ClaytonGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nClaytonGenerator(θ)\nClaytonCopula(d,θ)\n\nThe Clayton copula in dimension d is parameterized by theta in -1(d-1)infty). It is an Archimedean copula with generator : \n\nphi(t) = left(1+mathrmsign(theta)*tright)^-1frac1theta\n\nIt has a few special cases: \n\nWhen θ = -1/(d-1), it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 0, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#FrankGenerator","page":"Archimedean Generators","title":"FrankGenerator","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"FrankGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.FrankGenerator","page":"Archimedean Generators","title":"Copulas.FrankGenerator","text":"FrankGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nFrankGenerator(θ)\nFrankCopula(d,θ)\n\nThe Frank copula in dimension d is parameterized by theta in -inftyinfty). It is an Archimedean copula with generator : \n\nphi(t) = -fraclogleft(1+e^-t(e^-theta-1)right)\theta\n\nIt has a few special cases: \n\nWhen θ = -∞, it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#GumbelGenerator","page":"Archimedean Generators","title":"GumbelGenerator","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"GumbelGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.GumbelGenerator","page":"Archimedean Generators","title":"Copulas.GumbelGenerator","text":"GumbelGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelGenerator(θ)\nGumbelCopula(d,θ)\n\nThe Gumbel copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = exp-t^frac1θ\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#AMHGenerator","page":"Archimedean Generators","title":"AMHGenerator","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"AMHGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.AMHGenerator","page":"Archimedean Generators","title":"Copulas.AMHGenerator","text":"AMHGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nAMHGenerator(θ)\nAMHCopula(d,θ)\n\nThe AMH copula in dimension d is parameterized by theta in -11). It is an Archimedean copula with generator : \n\nphi(t) = 1 - frac1-thetae^-t-theta\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#JoeGenerator","page":"Archimedean Generators","title":"JoeGenerator","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"JoeGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.JoeGenerator","page":"Archimedean Generators","title":"Copulas.JoeGenerator","text":"JoeGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nJoeGenerator(θ)\nJoeCopula(d,θ)\n\nThe Joe copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = 1 - left(1 - e^-tright)^frac1theta\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#GumbelBarnettGenerator","page":"Archimedean Generators","title":"GumbelBarnettGenerator","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"GumbelBarnettGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.GumbelBarnettGenerator","page":"Archimedean Generators","title":"Copulas.GumbelBarnettGenerator","text":"GumbelBarnettGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelBarnettGenerator(θ)\nGumbelBarnettCopula(d,θ)\n\nThe Gumbel-Barnett copula is an archimdean copula with generator:\n\nphi(t) = expθ^-1(1-e^t) 0 leq theta leq 1\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\nReferences:\n\n[4] Joe, H. (2014). Dependence modeling with copulas. CRC press, Page.437\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#InvGaussianGenerator","page":"Archimedean Generators","title":"InvGaussianGenerator","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"InvGaussianGenerator","category":"page"},{"location":"archimedean/available_models/#Copulas.InvGaussianGenerator","page":"Archimedean Generators","title":"Copulas.InvGaussianGenerator","text":"InvGaussianGenerator{T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nInvGaussianGenerator(θ)\nInvGaussianCopula(d,θ)\n\nThe Inverse Gaussian copula in dimension d is parameterized by theta in 0infty). It is an Archimedean copula with generator :\n\nphi(t) = expfrac1-sqrt1+2θ^2tθ\n\nMore details about Inverse Gaussian Archimedean copula are found in :\n\nMai, Jan-Frederik, and Matthias Scherer. Simulating copulas: stochastic models, sampling algorithms, and applications. Vol. 6. # N/A, 2017. Page 74.\n\nIt has a few special cases:\n\nWhen θ = 0, it is the IndependentCopula\n\nReferences:\n\n[3] Nelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/","page":"Archimedean Generators","title":"Archimedean Generators","text":"R. B. Nelsen. An Introduction to Copulas. 2nd ed Edition, Springer Series in Statistics (Springer, New York, 2006).\n\n\n\nH. Joe. Dependence Modeling with Copulas (CRC press, 2014).\n\n\n\nA. J. McNeil and J. Nešlehová. Multivariate Archimedean Copulas, d -Monotone Functions and L1 -Norm Symmetric Distributions. The Annals of Statistics 37, 3059–3097 (2009).\n\n\n\nR. E. Williamson. On multiply monotone functions and their laplace transforms (Mathematics Division, Office of Scientific Research, US Air Force, 1955).\n\n\n\n","category":"page"},{"location":"examples/lambda_viz/#Empirical-Kendall-function-and-Archimedean's-λ-function.","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"","category":"section"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"The Kendall function is an important function in dependence structure analysis. The Kendall function associated with a d-variate copula C is defined by letting bm U = left(U_1U_nright) sim C and setting:","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"K(t) = mathbb P left( C(U_1U_d) le t right)","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"From a computational point of view, we often do not access to true observations of the random vector m U sim C but rather only observations on the marginal scales. Fortunately, this is not an issue and we can estimate the K function directly through a sample duplication trick.  For that, suppose for the sake of the argument that we have a multivariate sample on marignal scales left(X_ijright)_i in 1d j in 1n with dependence structure C.  A standard way to approximate K is to compute first","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"Z_j = frac1n-1 sum_k neq j bm 1_X_ij  X_ik forall i in 1d","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"Indeed, K can be approximated as the empirical distribution function of Z_1Z_n.  Here is a sketch implementation (not optimized) of this concept:","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"struct KendallFunction{T}\n    z::Vector{T}\n    function KendallFunction(x)\n    d,n = size(x)\n    z = zeros(n)\n    for i in 1:n\n        for j in 1:n\n            if j ≠ i\n                z[i] += reduce(&, x[:,j] .< x[:,i])\n            end\n        end\n    end\n    z ./= (n-1)\n    sort!(z) # unnecessary\n    return  new{eltype(z)}(z)\n    end\nend\nfunction (K::KendallFunction)(t)\n    # Then the K function is simply the empirical cdf of the Z sample:\n    return sum(K.z .≤ t)/length(K.z)\nend\nnothing # hide","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"Let us try it on a random example: ","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"using Copulas, Distributions, Plots\nX = SklarDist(ClaytonCopula(2,2.7),(Normal(),Pareto()))\nx = rand(X,1000)\nK = KendallFunction(x)\nplot(u -> K(u), xlims = (0,1), title=\"Empirical Kendall function\")","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"One notable detail on the Kendall function is that is does not characterize the copula in all generality. On the other hand, for an Archimedean copula with generator ϕ, we have:","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"K(t) = t - phiphi^-1(t) phi^-1(t)","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"Due to this partical relationship, the Kendall function actually characterizes the generator of the archimedean copula. In fact, this relationship is generally expressed in term of a λ function defined as lambda(t) = t - K(t) which, for archimedean copulas, writes lambda(t) = phiphi^-1(t) phi^-1(t).","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"Common λ functions can be easily derived by hand for standard archimedean generators. For any archimedean generator in the package, however, it is even easier to let Julia do the derivation. ","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"Let's try to compare the empirical λ function from our dataset to a few theoretical ones. For that, we setup parameters of the relevant generators to match the kendall τ of the dataset (because we can). We include for the record the independent and completely monotonous cases.","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"using Copulas: ϕ⁽¹⁾, ϕ⁻¹, τ⁻¹, ClaytonGenerator, GumbelGenerator\nusing StatsBase: corkendall\nλ(G,t) = ϕ⁽¹⁾(G,ϕ⁻¹(G,t)) * ϕ⁻¹(G,t)\nplot(u -> u - K(u), xlims = (0,1), label=\"Empirical λ function\")\nκ = corkendall(x')[1,2] # empirical kendall tau\nθ_cl = τ⁻¹(ClaytonGenerator,κ)\nθ_gb = τ⁻¹(GumbelGenerator,κ)\nplot!(u -> λ(ClaytonGenerator(θ_cl),u), label=\"Clayton\")\nplot!(u -> λ(GumbelGenerator(θ_gb),u), label=\"Gumbel\")\nplot!(u -> 0, label=\"Comonotony\")\nplot!(u -> u*log(u), label=\"Independence\")","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"The variance of the empirical λ function is notable on this example. In particular, we note that the estimated parameter","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"θ_cl","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"is not very far for the true 27 we used to generate the dataset. A few more things could be tried before closing up the analysis on a real dataset: ","category":"page"},{"location":"examples/lambda_viz/","page":"Empirical Kendall function and Archimedean's λ function.","title":"Empirical Kendall function and Archimedean's λ function.","text":"Empirical validation of the archimedean property of the data, and then\nNon-parametric estimation of the generator from the empirical Kendall function, or through other means.\nNon-archimedean parametric models.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Copulas","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Copulas.jl package provides a large collection of models for dependence structures between random variables, so-called copulas, with a good selection of features: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"random number generation\nevaluation of (log)density and distribution functions\ncopula-based multivariate distributions through Sklar's theorem\nfitting procedures, including marginal models or not","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since copulas are distribution functions, we fully comply with the Distributions.jl API. This compliance allows direct interoperability with other packages based on this API such as, e.g., Turing.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Usually, people that use and work with copulas turn to the R package copula. While still well-maintained and regularly updated, the R package copula is a complicated code base for readability, extensibility, reliability, and maintenance. This is an attempt to provide a very light, fast, reliable and maintainable copula implementation in native Julia. Among others, one of the notable benefits of such a native implementation is the floating point type agnosticism, i.e., compatibility with BigFloat, DoubleFloats, MultiFloats and other kind of numbers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package revolves around two main types: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copula, the abstract mother type of all copulas\nSklarDist, the type for multivariate compound distribution through Sklar's theorem. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is available on Julia's general registry, and can be installed as follows: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add Copulas","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are welcomed ! If you want to contribute to the package, ask a question, found a bug or simply want to chat, do not hesitate to open an issue on this repo. General guidelines on collaborative practices (colprac) are available at https://github.com/SciML/ColPrac.","category":"page"},{"location":"#Cite-this-work","page":"Home","title":"Cite this work","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please use the following BibTeX if you want to cite this work: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"@software{oskar_laverny_2023_10084669,\n  author       = {Oskar Laverny},\n  title        = {Copulas.jl: A fully `Distributions.jl`-compliant copula package},\n  year         = 2022+,\n  doi          = {10.5281/zenodo.6652672},\n  url          = {https://doi.org/10.5281/zenodo.6652672}\n}","category":"page"}]
}
