"""
    ClaytonGenerator{T}

Fields:
  - Œ∏::Real - parameter

Constructor

    ClaytonGenerator(Œ∏)
    ClaytonCopula(d, Œ∏)

The [Clayton](https://en.wikipedia.org/wiki/Copula_(probability_theory)#Most_important_Archimedean_copulas) copula in dimension ``d`` is parameterized by ``\\theta \\in [-1/(d-1),\\infty)`` (with the independence case as the limit ``\\theta\\to 0``). It is an Archimedean copula with generator

```math
\\phi(t) = \\left(1 + \\theta t\\right)^{-1/\\theta}
```

with the continuous extension ``\\phi(t) = e^{-t}`` at ``\\theta = 0``.

Special cases (for the copula in dimension ``d``):
- When ``\\theta = -1/(d-1)``, it is the WCopula (Lower Fr√©chet‚ÄìHoeffding bound)
- When ``\\theta \\to 0``, it is the IndependentCopula
- When ``\\theta \\to \\infty``, it is the MCopula (Upper Fr√©chet‚ÄìHoeffding bound)

References:
* [nelsen2006](@cite) Nelsen, Roger B. An introduction to copulas. Springer, 2006.
"""
struct ClaytonGenerator{T} <: AbstractUnivariateGenerator
    Œ∏::T
    function ClaytonGenerator(Œ∏)
        if Œ∏ < -1
            throw(ArgumentError("Theta must be greater than -1"))
        elseif Œ∏ == -1
            return WGenerator()
        elseif Œ∏ == 0
            return IndependentGenerator()
        elseif Œ∏ == Inf
            return MGenerator()
        else
            Œ∏, _ = promote(Œ∏, 1.0)
            return new{typeof(Œ∏)}(Œ∏)
        end
    end
end
const ClaytonCopula{d, T} = ArchimedeanCopula{d, ClaytonGenerator{T}}
Distributions.params(G::ClaytonGenerator) = (Œ∏ = G.Œ∏,)
_unbound_params(::Type{<:ClaytonGenerator}, d, Œ∏) = [log(Œ∏.Œ∏ + 1/(d-1))] # Œ∏ > -1/(d-1) ‚áí Œ∏+1/(d-1)>0
_rebound_params(::Type{<:ClaytonGenerator}, d, Œ±) = (; Œ∏ = exp(Œ±[1]) - 1/(d-1))
_Œ∏_bounds(::Type{<:ClaytonGenerator}, d) = (-1/(d-1), Inf)


max_monotony(G::ClaytonGenerator) = G.Œ∏ >= 0 ? Inf : (1 - 1/G.Œ∏)
œï(  G::ClaytonGenerator, t) = max(1+G.Œ∏*t,zero(t))^(-1/G.Œ∏)
œï‚Åª¬π(G::ClaytonGenerator, t) = (t^(-G.Œ∏)-1)/G.Œ∏
œï‚ÅΩ¬π‚Åæ(G::ClaytonGenerator, t) = (1+G.Œ∏*t) ‚â§ 0 ? 0 : - (1+G.Œ∏*t)^(-1/G.Œ∏ -1)
œï‚Åª¬π‚ÅΩ¬π‚Åæ(G::ClaytonGenerator, t) = -t^(-G.Œ∏-1)
œï‚ÅΩ·µè‚Åæ(G::ClaytonGenerator, k::Int, t) = (1+G.Œ∏*t) ‚â§ 0 ? 0 : (1 + G.Œ∏ * t)^(-1/G.Œ∏ - k) * prod(-1-‚Ñì*G.Œ∏ for ‚Ñì in 0:k-1; init=1)
œï‚ÅΩ·µè‚Åæ‚Åª¬π(G::ClaytonGenerator, k::Int, t; start_at=t) = ((t / prod(-1-‚Ñì*G.Œ∏ for ‚Ñì in 0:k-1; init=1))^(1/(-1/G.Œ∏ - k)) -1)/G.Œ∏    

œÑ(G::ClaytonGenerator) = ifelse(isfinite(G.Œ∏), G.Œ∏/(G.Œ∏+2), 1)
œÑ‚Åª¬π(::Type{<:ClaytonGenerator},œÑ) = ifelse(œÑ == 1,Inf,2œÑ/(1-œÑ))
ùí≤‚Çã‚ÇÅ(G::ClaytonGenerator, d::Int) = G.Œ∏ >= 0 ? WilliamsonFromFrailty(Distributions.Gamma(1/G.Œ∏,G.Œ∏), d) : ClaytonWilliamsonDistribution(G.Œ∏,d)

frailty(G::ClaytonGenerator) = G.Œ∏ >= 0 ? Distributions.Gamma(1/G.Œ∏, G.Œ∏) : throw(ArgumentError("Clayton frailty is only defined for Œ∏ ‚â• 0 (positive dependence). Got Œ∏ = $(G.Œ∏)."))
function Distributions._rand!(rng::Distributions.AbstractRNG, C::ClaytonCopula, A::DenseMatrix{<:Real})
    A[:] = inverse_rosenblatt(C, rand(rng, size(A)...))
    return A
end
function Distributions._logpdf(C::ClaytonCopula{d,TG}, u) where {d,TG<:ClaytonGenerator}
    # Check if all elements are in (0,1) and if Œ∏ < 0, check the sum condition
    if !all(0 .< u .< 1) || (C.G.Œ∏ < 0 && sum(u .^ -(C.G.Œ∏)) < (d - 1))
        return eltype(u)(-Inf)
    end

    Œ∏ = C.G.Œ∏
    # Compute the sum of transformed variables
    S1 = sum(t ^ (-Œ∏) for t in u)
    S2 = sum(log(t) for t in u)
    # Compute the log of the density according to the explicit formula for Clayton copula
    # See McNeil & Neslehova (2009), eq. (13)
    S1==d-1 && return eltype(u)(-Inf)
    return log(Œ∏ + 1) * (d - 1) - (Œ∏ + 1) * S2 + (-1 / Œ∏ - d) * log(S1 - d + 1)
end
### only for test...
@inline function _C_clayton(u::Float64, v::Float64, Œ∏::Real)
    s = u^(-Œ∏) + v^(-Œ∏) - 1
    if Œ∏ < 0
        return (s <= 0) ? 0.0 : s^(-1/Œ∏)   # soporte recortado para Œ∏<0
    else
        return s^(-1/Œ∏)                    # para Œ∏>0 siempre s‚â•1
    end
end
# Spearman (v√≠a CDF) ‚Äî with _safett Integral
function œÅ(G::ClaytonGenerator; rtol=1e-8, atol=1e-10)
    Œ∏ = float(G.Œ∏)
    Œ∏ ‚â§ -1 && throw(ArgumentError("Para Clayton: Œ∏ > -1."))
    iszero(Œ∏) && return 0.0
    I = HCubature.hcubature(x -> _C_clayton(x[1], x[2], Œ∏),
                            [0.0,0.0], [1.0,1.0];
                            rtol=rtol, atol=atol)[1]
    return 12I - 3
end

# Inverse œÅ ‚Üí Œ∏ for Clayton (without trimming to [0,1])
function œÅ‚Åª¬π(::Type{<:ClaytonGenerator}, œÅÃÇ; atol=1e-10)
    _œÅ = float(œÅÃÇ)
    if isapprox(_œÅ, 0.0; atol=1e-14)
        return 0.0
    end

    # Seeds: we approximate œÑ ‚âà (2/3)œÅ and Œ∏ ‚âà 2œÑ/(1-œÑ)
    œÑ0 = clamp((2/3)*_œÅ, -0.99, 0.99)
    Œ∏0 = 2*œÑ0/(1 - œÑ0)
    Œ∏0 = clamp(Œ∏0, -1 + sqrt(eps(Float64)), 1e6)
    Œ∏1 = Œ∏0 + (_œÅ > 0 ? 0.25 : -0.25)        # second seed towards the right side

    f(Œ∏) = œÅ(ClaytonGenerator(Œ∏)) - _œÅ
    # Two-seeded blotter; no bracketing required
    Œ∏ = Roots.find_zero(f, (Œ∏0, Œ∏1), Roots.Order2(); xatol=atol)
    return Œ∏
end