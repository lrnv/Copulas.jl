var documenterSearchIndex = {"docs":
[{"location":"elliptical/generalities/","page":"General Discussion","title":"General Discussion","text":"CurrentModule = Copulas","category":"page"},{"location":"elliptical/generalities/#General-Discussion","page":"General Discussion","title":"General Discussion","text":"","category":"section"},{"location":"elliptical/generalities/","page":"General Discussion","title":"General Discussion","text":"Details about the elliptical Copulas","category":"page"},{"location":"elliptical/generalities/","page":"General Discussion","title":"General Discussion","text":"explain how we could define a generic elliptical copulas, and methods that are related to them. ","category":"page"},{"location":"elliptical/generalities/","page":"General Discussion","title":"General Discussion","text":"EllipticalCopula","category":"page"},{"location":"elliptical/generalities/#Copulas.EllipticalCopula","page":"General Discussion","title":"Copulas.EllipticalCopula","text":"EllipticalCopula{d,MT}\n\nAbstract type.\n\n[The description of the API should be here...]\n\n\n\n\n\n","category":"type"},{"location":"sklar/our_implementation/","page":"Implementation","title":"Implementation","text":"CurrentModule = Copulas","category":"page"},{"location":"sklar/our_implementation/#Implementation","page":"Implementation","title":"Implementation","text":"","category":"section"},{"location":"sklar/our_implementation/","page":"Implementation","title":"Implementation","text":"The Sklar Theorem allows to compute distributions, satisfying the Distriutions.jl API, thaty are \"compound\" with a given copula and given marginals. ","category":"page"},{"location":"sklar/our_implementation/","page":"Implementation","title":"Implementation","text":"SklarDist","category":"page"},{"location":"sklar/our_implementation/#Copulas.SklarDist","page":"Implementation","title":"Copulas.SklarDist","text":"SklarDist{CT,TplMargins}\n\nFields:\n\nC::CT - The copula\nm::TplMargins - a Tuple representing the marginal distributions\n\nConstructor\n\nSklarDist(C,m)\n\nThis function allows to construct a random vector specified, through the Sklar Theorem, by its marginals and its copula separately. See Sklar's theorem. \n\nThe obtain random vector follows Distributions.jl's API and can be sampled, pdf and cdf can be evaluated, etc... We even provide a fit function. See the folowing exemple code : \n\nusing Copulas, Distributions, Random\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution\n\n# This generates a (3,1000)-sized dataset from the multivariate distribution D\nsimu = rand(D,1000)\n\n# While the following estimates the parameters of the model from a dataset: \nD̂ = fit(SklarDist{FrankCopula,Tuple{Gamma,Normal,LogNormal}}, simu)\n# Increase the number of observations to get a beter fit (or not?)  \n\n\n\n\n\n","category":"type"},{"location":"archimedean/implement_your_own/","page":"Implement your own","title":"Implement your own","text":"CurrentModule = Copulas","category":"page"},{"location":"archimedean/implement_your_own/#Implement-your-own","page":"Implement your own","title":"Implement your own","text":"","category":"section"},{"location":"archimedean/implement_your_own/","page":"Implement your own","title":"Implement your own","text":"If you think that the WilliamsonCopula interface is too barebone and does not provide you with enough flexibility in your modeling of an archimedean copula, you might be intersted in the possiiblity to directly subtype ArchimedeanCopula and implement your own. This is actually a fairly easy process and you only need to implement a few functions. Let's here together try to reimplement come archimedean copula with the follçowing generator: ","category":"page"},{"location":"archimedean/implement_your_own/","page":"Implement your own","title":"Implement your own","text":"my_generator","category":"page"},{"location":"archimedean/implement_your_own/","page":"Implement your own","title":"Implement your own","text":"(describe the process...)","category":"page"},{"location":"archimedean/implement_your_own/","page":"Implement your own","title":"Implement your own","text":"struct MyAC{d,T} <: ArchimedeanCopula{d}\n    par::T\nend\nϕ(C::MyAC{d},x)\nϕ⁻¹(C::MyAC{d},x)\nτ(C::MyAC{d})\nτ⁻¹(::MyAC{d},τ)\nwilliamson_dist(C::MyAC{d})","category":"page"},{"location":"archimedean/generalities/","page":"General discussion","title":"General discussion","text":"CurrentModule = Copulas","category":"page"},{"location":"archimedean/generalities/#General-discussion","page":"General discussion","title":"General discussion","text":"","category":"section"},{"location":"archimedean/generalities/","page":"General discussion","title":"General discussion","text":"Archimedean copulas are a large class of copulas that are defined as : ... [ details needed...]","category":"page"},{"location":"archimedean/generalities/","page":"General discussion","title":"General discussion","text":"Adding a new ArchimedeanCopula is very easy. The Clayton implementation is as short as: ","category":"page"},{"location":"archimedean/generalities/","page":"General discussion","title":"General discussion","text":"struct ClaytonCopula{d,T} <: ArchimedeanCopula{d}\n    θ::T\n    function ClaytonCopula(d,θ)\n        if θ < -1/(d-1)\n            throw(ArgumentError(\"Theta must be greater than -1/(d-1)\"))\n        elseif θ == -1/(d-1)\n            return WCopula(d)\n        elseif θ == 0\n            return IndependentCopula(d)\n        elseif θ == Inf\n            return MCopula(d)\n        else\n            return new{d,typeof(θ)}(θ)\n        end\n    end\nend\nϕ(  C::ClaytonCopula,      t) = max(1+C.θ*t,zero(t))^(-1/C.θ)\nϕ⁻¹(C::ClaytonCopula,      t) = (t^(-C.θ)-1)/C.θ\nτ(C::ClaytonCopula) = ifelse(isfinite(C.θ), C.θ/(C.θ+2), 1)\nτ⁻¹(::Type{ClaytonCopula},τ) = ifelse(τ == 1,Inf,2τ/(1-τ))\nwilliamson_dist(C::ClaytonCopula{d,T}) where {d,T} = C.θ >= 0 ? WilliamsonFromFrailty(Distributions.Gamma(1/C.θ,1),d) : ClaytonWilliamsonDistribution(C.θ,d)","category":"page"},{"location":"archimedean/generalities/","page":"General discussion","title":"General discussion","text":"Not everything is necessary however, depending on the features you need. Indeed, the Archimedean API is modular: ","category":"page"},{"location":"archimedean/generalities/","page":"General discussion","title":"General discussion","text":"To sample an archimedean, only ϕ is required. Indeed, the williamson_dist has a generic fallback that uses WilliamsonTransforms.jl for any generator. Note however that providing the williamson_dist yourself if you know it will allow sampling to be an order of magnitude faster: see how in the ClaytonCopula case we provided a sampler that is different for positive parameters (the generator is completely monotonous, and thus the frailty distribution is known, so we used WiliamsonFromFrailty), and the negative dependent cases, where only the CDF is known and implemented in ClaytonWilliamsonDistribution.\nTo evaluate the cdf and (log-)density in any dimension, only ϕ and ϕ⁻¹ are needed.\nCurrently, to fit the copula τ⁻¹ is needed as we use the inverse tau moment method. But we plan on also implementing inverse rho and MLE (density needed). \nNote that the generator ϕ follows the convention ϕ(0)=1, while others (e.g., https://en.wikipedia.org/wiki/Copula(probabilitytheory)#Archimedean_copulas) use ϕ⁻¹ as the generator.","category":"page"},{"location":"archimedean/generalities/","page":"General discussion","title":"General discussion","text":"ArchimedeanCopula","category":"page"},{"location":"archimedean/generalities/#Copulas.ArchimedeanCopula","page":"General discussion","title":"Copulas.ArchimedeanCopula","text":"ArchimedeanCopula{d}\n\nAbstract type.\n\n[ The description of the APi done here could be more detailled]\n\nThe archimedean copulas are all `<:ArchimedeanCopula{d} for some dimension d. This type serves as an internal interface to handle all archimdean copulas at once. \n\nAdding a new ArchimedeanCopula is very easy. The Clayton implementation is as short as: \n\nstruct ClaytonCopula{d,T} <: Copulas.ArchimedeanCopula{d}\n    θ::T\nend\nClaytonCopula(d,θ)            = ClaytonCopula{d,typeof(θ)}(θ)     # Constructor\nϕ(C::ClaytonCopula, t)        = (1+sign(C.θ)*t)^(-1/C.θ)          # Generator\nϕ⁻¹(C::ClaytonCopula,t)       = sign(C.θ)*(t^(-C.θ)-1)            # Inverse Generator\nτ(C::ClaytonCopula)           = C.θ/(C.θ+2)                       # θ -> τ\nτ⁻¹(::Type{ClaytonCopula},τ)  = 2τ/(1-τ)                          # τ -> θ\nwilliamson_dist(C::ClaytonCopula{d,T}) where {d,T} = WilliamsonFromFrailty(Distributions.Gamma(1/C.θ,1),d) # Radial distribution\n\nThe Archimedean API is modular: \n\nTo sample an archimedean, only williamson_dist and ϕ are needed.\nTo evaluate the cdf and (log-)density in any dimension, only ϕ and ϕ⁻¹ are needed.\nCurrently, to fit the copula τ⁻¹ is needed as we use the inverse tau moment method. But we plan on also implementing inverse rho and MLE (density needed). \nNote that the generator ϕ follows the convention ϕ(0)=1, while others (e.g., https://en.wikipedia.org/wiki/Copula(probabilitytheory)#Archimedean_copulas) use ϕ⁻¹ as the generator.\nWe plan on implementing the Williamson transformations so that radial-dist can be automaticlaly deduced from ϕ and vice versa, if you dont know much about your archimedean family\n\nIf you only know the generator of your copula, take a look at WilliamsonCopula that allows to generate automatically the associated williamson distribution.  If on the other hand you have a univaraite positive random variable with no atom at zero, then the williamson transform can produce an archimdean copula out of it, with the same constructor. \n\n\n\n\n\n","category":"type"},{"location":"archimedean/generalities/#The-WilliamsonCopula-concept","page":"General discussion","title":"The WilliamsonCopula concept","text":"","category":"section"},{"location":"archimedean/generalities/","page":"General discussion","title":"General discussion","text":"In this package, there is the possibility to directly implement, sample, and evaluate the pdf and cdf of an archimedean copula by only providing its generator, in an efficient way.","category":"page"},{"location":"archimedean/generalities/","page":"General discussion","title":"General discussion","text":"WilliamsonCopula","category":"page"},{"location":"archimedean/generalities/#Copulas.WilliamsonCopula","page":"General discussion","title":"Copulas.WilliamsonCopula","text":"WilliamsonCopula{d,Tϕ,TX}\n\nFields:     - ϕ::Tϕ – a function representing the archimedean generator.     - X::TX – a random variable that represents its williamson d-transform\n\nConstructors\n\nWilliamsonCopula(X::Distributions.UnivariateDistribution, d)\nWilliamsonCopula(ϕ::Function, d)\nWilliamsonCopula(ϕ::Function, X::Distributions.UnivariateDistribution, d)\n\nThe WilliamsonCopula is the barebone Archimedean Copula that directly leverages the Williamson transform and inverse transform (in their greatest generalities), that are implemented in WilliamsonTransforms.jl. You can construct it by providing the Williamson-d-tranform as a (non-negative) random variable X::Distributions.UnivariateDistribution, or by providing the d-monotone generator ϕ::Function as a function from mathbb R_+ to 01, decreasing and d-monotone. The other component will be computed automatically. You also have the option to provide both, which will probably be faster if you have an analytical expression for both. \n\nAbout WilliamsonCopula(X::Distributions.UnivariateDistribution, d): For a univariate non-negative random variable X, with cumulative distribution function F and an integer dge 2, the Williamson-d-transform of X is the real function supported on 0infty given by:\n\nphi(t) = 𝒲_d(X)(t) = int_t^infty left(1 - fractxright)^d-1 dF(x) = mathbb Eleft( (1 - fractX)^d-1_+right) mathbb 1_t  0 + left(1 - F(0)right)mathbb 1_t 0\n\nThis function has several properties: \n\nWe have that phi(0) = 1 and phi(Inf) = 0\nphi is d-2 times derivable, and the signs of its derivatives alternates : forall k in 0d-2 (-1)^k phi^(k) ge 0.\nphi^(d-2) is convex.\n\nThese properties makes this function what is called an archimedean generator, able to generate archimedean copulas in dimensions up to d. \n\nAbout WilliamsonCopula(ϕ::Function, d): On the other hand, WilliamsonCopula(ϕ::Function, d) Computes the inverse Williamson d-transform of the d-monotone archimedean generator ϕ. \n\nA d-monotone archimedean generator is a function phi on mathbb R_+ that has these three properties:\n\nphi(0) = 1 and phi(Inf) = 0\nphi is d-2 times derivable, and the signs of its derivatives alternates : forall k in 0d-2 (-1)^k phi^(k) ge 0.\nphi^(d-2) is convex.\n\nFor such a function phi, the inverse Williamson-d-transform of phi is the cumulative distribution function F of a non-negative random variable X, defined by : \n\nF(x) = 𝒲_d^-1(phi)(x) = 1 - frac(-x)^d-1 phi_+^(d-1)(x)k - sum_k=0^d-2 frac(-x)^k phi^(k)(x)k\n\nWe return this cumulative distribution function in the form of the corresponding random variable <:Distributions.ContinuousUnivariateDistribution from Distributions.jl. You may then compute :      - The cdf via Distributions.cdf     - The pdf via Distributions.pdf and the logpdf via Distributions.logpdf     - Samples from the distribution via rand(X,n)\n\nReferences:      Williamson, R. E. (1956). Multiply monotone functions and their Laplace transforms. Duke Math. J. 23 189–207. MR0077581     McNeil, Alexander J., and Johanna Nešlehová. \"Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\" (2009): 3059-3097.\n\n\n\n\n\n","category":"type"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = Copulas","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"All docstrings are copied here as a general reference.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [Copulas]","category":"page"},{"location":"reference/#Copulas.Copulas-reference","page":"Reference","title":"Copulas.Copulas","text":"<h1 align=center>Copulas.jl</h1> <p align=center><i>A fully Distributions.jl-compliant copula package</i></p>\n\n<p align=center>     <a href=\"https://lrnv.github.io/Copulas.jl/stable\"><img src=\"https://img.shields.io/badge/docs-stable-blue.svg\" alt=\"Stable\" /></a>     <a href=\"https://lrnv.github.io/Copulas.jl/dev\"><img src=\"https://img.shields.io/badge/docs-dev-blue.svg\" alt=\"Dev\" /></a> <br />     <a href=\"https://www.repostatus.org/#active\"><img src=\"https://www.repostatus.org/badges/latest/active.svg\" alt=\"Project Status: Active – The project has reached a stable, usable state and is being actively developed.\" /></a>      <a href=\"https://github.com/lrnv/Copulas.jl/actions/workflows/CI.yml?query=branch%3Amain\"><img src=\"https://github.com/lrnv/Copulas.jl/actions/workflows/CI.yml/badge.svg?branch=main\" alt=\"Build Status\" /></a> <br />      <a href=\"https://codecov.io/gh/lrnv/Copulas.jl\"><img src=\"https://codecov.io/gh/lrnv/Copulas.jl/branch/main/graph/badge.svg\"/></a>      <a href=\"https://github.com/JuliaTesting/Aqua.jl\"><img src=\"https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg\" alt=\"Aqua QA\" /></a>     <!– <a href=\"https://benchmark.tansongchen.com/TaylorDiff.jl\"><img src=\"https://img.shields.io/buildkite/2c801728055463e7c8baeeb3cc187b964587235a49b3ed39ab/main.svg?label=benchmark\" alt=\"Benchmark Status\" /></a> –> <br />     <a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"License: MIT\" /></a>     <a href=\"https://zenodo.org/badge/latestdoi/456485213\"><img src=\"https://zenodo.org/badge/456485213.svg\" alt=\"DOI\" /></a> <br />     <a href=\"https://github.com/SciML/ColPrac\"><img src=\"https://img.shields.io/badge/contributor's%20guide-ColPrac-blueviolet\" alt=\"ColPrac: Contributor's Guide on Collaborative Practices for Community Packages\" /></a>     <a href=\"https://github.com/invenia/BlueStyle\"><img src=\"https://img.shields.io/badge/code%20style-blue-4495d1.svg\" alt=\"Code Style: Blue\" /></a> </p>\n\n<!– <p align=center>   <a href=\"https://github.com/codespaces/new?hidereposelect=true&ref=main&repo=563952901&machine=standardLinux32gb&devcontainerpath=.devcontainer%2Fdevcontainer.json&location=EastUshttps://github.com/codespaces/new?hidereposelect=true&ref=main&repo=563952901&machine=standardLinux32gb&devcontainerpath=.devcontainer%2Fdevcontainer.json&location=EastUs\"><img src=\"https://github.com/codespaces/badge.svg\" alt=\"Open in GitHub Codespaces\" /></a> </p> –>\n\nCopulas.jl brings most standard copula features into native Julia: random number generation, pdf and cdf, fitting, copula-based multivariate distributions through Sklar's theorem, etc. Since copulas are distribution functions, we fully comply with the Distributions.jl API. This complience allows interoperability with other packages based on this API such as, e.g., Turing.jl.\n\nUsually, people that use and work with copulas turn to R, because of the amazing R package copula. While it is still well maintained and regularly updated, the R poackage copula is a mixture of obscure, heavily optimized C code and more standard R cde, which makes it a complicated code base for readability, extensibility, reliability and maintenance.\n\nThis is an attempt to provide a very light, fast, reliable and maintainable copula implementation in native Julia. Among others, one of the notable benefits of such a native implementatioon is the floating point type agnosticity, i.e. compatibility with BigFloat, DoubleFloats, MultiFloats and other kind of numbers.\n\nThe package revolves around two main types: \n\nCopula, an abstract mother type for all the copulas in the package\nSklarDist, a distribution type that allows construction of a multivariate distribution by specifying the copula and the marginals through Sklar's theorem. \n\nWarning: This is fairly untested and experimental work and the API might change without notice.\n\nInstalation\n\n] add Copulas\n\nUsage\n\nThe API contains random number generation, cdf and pdf evaluation, and the fit function from Distributions.jl. A typical use case might look like this: \n\nusing Copulas, Distributions, Random\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution\n\n# This generates a (3,1000)-sized dataset from the multivariate distribution D\nsimu = rand(D,1000)\n\n# While the following estimates the parameters of the model from a dataset: \nD̂ = fit(SklarDist{FrankCopula,Tuple{Gamma,Normal,LogNormal}}, simu)\n# Increase the number of observations to get a beter fit (or not?)  \n\nAvailable copula families are:\n\nEllipticalCopulas: GaussianCopula and TCopula\nArchimedeanCopula: WilliamsonCopula (for any generator), but also ClaytonCopula,FrankCopula, AMHCopula, JoeCopula, GumbelCopula, supporting the full ranges in every dimensions (e.g. ClaytonCopula can be sampled with negative dependence in any dimension, not just d=2). \nWCopula, IndependentCopula and MCopula, which are Fréchet-Hoeffding bounds,\nPlackettCopula, see ref?\nEmpiricalCopula to follow closely a given dataset.\n\nThe next ones to be implemented will probably be: \n\nExtreme values copulas. \nNested archimedeans (for any generators, with automatic nesting conditions checking). \nBernstein copula and more general Beta copula as smoothing of the Empirical copula. \nCheckerboardCopula (and more generally PatchworkCopula)\n\nAdding a new ArchimedeanCopula is very easy. The Clayton implementation is as short as: \n\nstruct ClaytonCopula{d,T} <: Copulas.ArchimedeanCopula{d}\n    θ::T\nend\nClaytonCopula(d,θ)            = ClaytonCopula{d,typeof(θ)}(θ)     # Constructor\nϕ(C::ClaytonCopula, t)        = (1+sign(C.θ)*t)^(-1/C.θ)          # Generator\nϕ⁻¹(C::ClaytonCopula,t)       = sign(C.θ)*(t^(-C.θ)-1)            # Inverse Generator\nτ(C::ClaytonCopula)           = C.θ/(C.θ+2)                       # θ -> τ\nτ⁻¹(::Type{ClaytonCopula},τ)  = 2τ/(1-τ)                          # τ -> θ\nwilliamson_dist(C::ClaytonCopula{d,T}) where {d,T} = WilliamsonFromFrailty(Distributions.Gamma(1/C.θ,1),d) # Radial distribution\n\nThe Archimedean API is modular: \n\nTo sample an archimedean, only ϕ is required. Indeed, the williamson_dist has a generic fallback that uses WilliamsonTransforms.jl for any generator. Note however that providing the williamson_dist yourself if you know it will allow sampling to be an order of magnitude faster.\nTo evaluate the cdf and (log-)density in any dimension, only ϕ and ϕ⁻¹ are needed.\nCurrently, to fit the copula τ⁻¹ is needed as we use the inverse tau moment method. But we plan on also implementing inverse rho and MLE (density needed). \nNote that the generator ϕ follows the convention ϕ(0)=1, while others (e.g., https://en.wikipedia.org/wiki/Copula(probabilitytheory)#Archimedean_copulas) use ϕ⁻¹ as the generator.\n\nPlease take a look at the documentation for more details. \n\nDev Roadmap\n\nNext:\n\n[ ] More documentation and tests for the current implementation. \n[ ] Docs: show how to use the WilliamsonCopula to implement generic archimedeans.\n[ ] Give the user the choice of fitting method via fit(dist,data; method=\"MLE\") or fit(dist,data; method=\"itau\") or fit(dist,data; method=\"irho\").\n[ ] Fitting a generic archimedean with an empirically produced generarator\n[ ] Automatic checking of generator d-monotonicity ? Dunno if it is even possible. \n\nMaybe later:\n\n[ ] NestedArchimedean, with automatic checking of nesting conditions for generators. \n[ ] Vines?\n[ ] Archimax ?\n[ ] BernsteinCopula and BetaCopula could also be implemented. \n[ ] PatchworkCopula and CheckerboardCopula: could be nice things to have :)\n[ ] Goodness of fits tests ?\n\nContributions are welcome\n\nIf you want to contribute to the package, found a bug in it or simply want to chat, do not hesitate to open an issue on this repo. \n\nCitation\n\n@software{oskar_laverny_2023_10084669,\n  author       = {Oskar Laverny},\n  title        = {Copulas.jl: A fully `Distributions.jl`-compliant copula package},\n  year         = 2022+,\n  doi          = {10.5281/zenodo.6652672},\n  url          = {https://doi.org/10.5281/zenodo.6652672}\n}\n\n\n\n\n\n","category":"module"},{"location":"reference/#Copulas.AMHCopula-reference","page":"Reference","title":"Copulas.AMHCopula","text":"AMHCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nAMHCopula(d, θ)\n\nThe AMH copula in dimension d is parameterized by theta in -11). It is an Archimedean copula with generator : \n\nphi(t) = 1 - frac1-thetae^-t-theta\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.ArchimedeanCopula-reference","page":"Reference","title":"Copulas.ArchimedeanCopula","text":"ArchimedeanCopula{d}\n\nAbstract type.\n\n[ The description of the APi done here could be more detailled]\n\nThe archimedean copulas are all `<:ArchimedeanCopula{d} for some dimension d. This type serves as an internal interface to handle all archimdean copulas at once. \n\nAdding a new ArchimedeanCopula is very easy. The Clayton implementation is as short as: \n\nstruct ClaytonCopula{d,T} <: Copulas.ArchimedeanCopula{d}\n    θ::T\nend\nClaytonCopula(d,θ)            = ClaytonCopula{d,typeof(θ)}(θ)     # Constructor\nϕ(C::ClaytonCopula, t)        = (1+sign(C.θ)*t)^(-1/C.θ)          # Generator\nϕ⁻¹(C::ClaytonCopula,t)       = sign(C.θ)*(t^(-C.θ)-1)            # Inverse Generator\nτ(C::ClaytonCopula)           = C.θ/(C.θ+2)                       # θ -> τ\nτ⁻¹(::Type{ClaytonCopula},τ)  = 2τ/(1-τ)                          # τ -> θ\nwilliamson_dist(C::ClaytonCopula{d,T}) where {d,T} = WilliamsonFromFrailty(Distributions.Gamma(1/C.θ,1),d) # Radial distribution\n\nThe Archimedean API is modular: \n\nTo sample an archimedean, only williamson_dist and ϕ are needed.\nTo evaluate the cdf and (log-)density in any dimension, only ϕ and ϕ⁻¹ are needed.\nCurrently, to fit the copula τ⁻¹ is needed as we use the inverse tau moment method. But we plan on also implementing inverse rho and MLE (density needed). \nNote that the generator ϕ follows the convention ϕ(0)=1, while others (e.g., https://en.wikipedia.org/wiki/Copula(probabilitytheory)#Archimedean_copulas) use ϕ⁻¹ as the generator.\nWe plan on implementing the Williamson transformations so that radial-dist can be automaticlaly deduced from ϕ and vice versa, if you dont know much about your archimedean family\n\nIf you only know the generator of your copula, take a look at WilliamsonCopula that allows to generate automatically the associated williamson distribution.  If on the other hand you have a univaraite positive random variable with no atom at zero, then the williamson transform can produce an archimdean copula out of it, with the same constructor. \n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.ClaytonCopula-reference","page":"Reference","title":"Copulas.ClaytonCopula","text":"ClaytonCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nClaytonCopula(d, θ)\n\nThe Clayton copula in dimension d is parameterized by theta in -1(d-1)infty). It is an Archimedean copula with generator : \n\nphi(t) = left(1+mathrmsign(theta)*tright)^-1frac1theta\n\nIt has a few special cases: \n\nWhen θ = -1/(d-1), it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 0, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.EllipticalCopula-reference","page":"Reference","title":"Copulas.EllipticalCopula","text":"EllipticalCopula{d,MT}\n\nAbstract type.\n\n[The description of the API should be here...]\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.EmpiricalCopula-reference","page":"Reference","title":"Copulas.EmpiricalCopula","text":"EmpiricalCopula{d,MT}\n\nFields:\n\nu::MT - the matrix of observations. \n\nConstructor\n\nEmpiricalCopula(u;pseudos=true)\n\nThe EmpiricalCopula in dimension d is parameterized by a pseudo-data matrix wich should have shape (d,N). Its expression is given as :  \n\nC(mathbf x) = frac1Nsum_i=1^n mathbf 1_mathbf u_i le mathbf x\n\nThis function is very practical, be be aware that this is not a true copula (since mathbf u are only pseudo-observations). The constructor allows you to pass dirctly pseudo-observations (the default) or will compute them for you. You can then compute the cdf of the copula, and sample it through the standard interface.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.FrankCopula-reference","page":"Reference","title":"Copulas.FrankCopula","text":"FrankCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nFrankCopula(d, θ)\n\nThe Frank copula in dimension d is parameterized by theta in -inftyinfty). It is an Archimedean copula with generator : \n\nphi(t) = -fraclogleft(1+e^-t(e^-theta-1)right)\theta\n\nIt has a few special cases: \n\nWhen θ = -∞, it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.GaussianCopula-reference","page":"Reference","title":"Copulas.GaussianCopula","text":"GaussianCopula{d,MT}\n\nFields:\n\nΣ::MT - covariance matrix\n\nConstructor\n\nGaussianCopula(Σ)\n\nThe Gaussian Copula is the  copula of a Multivariate normal distribution. It is constructed as : \n\nC(mathbfx boldsymbolSigma) = F_Sigma(F_Sigmai^-1(x_i)iin 1d)\n\nwhere F_Sigma is a cdf of a gaussina random vector and F_{\\Sigma,i} is the ith marignal cdf, while `Sigma is the covariance matrix. \n\nIt can be constructed in Julia via:  \n\nC = GaussianCopula(Σ)\n\nThe random number generation works as expected:\n\nrand(C,1000)\n# or\nRandom.rand!(C,u)\n\nAnd yo can fit the distribution via : \n\nfit(GaussianCopula,data)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.GumbelBarnettCopula-reference","page":"Reference","title":"Copulas.GumbelBarnettCopula","text":"GumbelBarnettCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelBarnettCopula(d, θ)\n\nThe Gumbel-Barnett copula is an archimdean copula with generator:\n\nphi(t) = expθ^-1(1-e^t) 0 leq theta leq 1\n\nMore details about Gumbel-Barnett copula are found in:\n\nJoe, H. (2014). Dependence modeling with copulas. CRC press, Page.437\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.GumbelCopula-reference","page":"Reference","title":"Copulas.GumbelCopula","text":"GumbelCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelCopula(d, θ)\n\nThe Gumbel copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = exp-t^frac1θ\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.IndependentCopula-reference","page":"Reference","title":"Copulas.IndependentCopula","text":"IndependentCopula{d,T}\n\nConstructor\n\nIndependentCopula(d, θ)\n\nThe Independent Copula in dimension d is the simplest copula, that has the form : \n\nC(mathbfx) = prod_i=1^d x_i\n\nIt happends to be an Archimedean Copula, with generator : \n\nphi(t) = exp-t\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.InvGaussianCopula-reference","page":"Reference","title":"Copulas.InvGaussianCopula","text":"InvGaussianCopulaCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nInvGaussianCopula(d, θ)\n\nThe Inverse Gaussian copula is an archimdean copula with generator:\n\nphi(t) = exp(1-sqrt1+2θ^2t)θ theta  0\n\nMore details about Inverse Gaussian Archimedean copula are found in :     Mai, Jan-Frederik, and Matthias Scherer.      Simulating copulas: stochastic models, sampling algorithms, and applications. Vol. 6. # N/A, 2017. Page 74.\n\nIt has no known special cases.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.JoeCopula-reference","page":"Reference","title":"Copulas.JoeCopula","text":"JoeCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nJoeCopula(d, θ)\n\nThe Joe copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = 1 - left(1 - e^-tright)^frac1theta\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.MCopula-reference","page":"Reference","title":"Copulas.MCopula","text":"MCopula{d}\n\nConstructor\n\nMCopula(d)\n\nThe Upper Frechet-Hoeffding bound is the copula with the greatest value among all copulas. It correspond to comonotone random vectors. \n\nFor any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas, although this link is not represetned by the hierachy of types in the package for preformances reasons. \n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.PlackettCopula-reference","page":"Reference","title":"Copulas.PlackettCopula","text":"PlackettCopula{P}\n\nFields:     - θ::Real - parameter\n\nConstructor\n\nPlackettCopula(θ)\n\nParameterized by theta  0 The Plackett copula is\n\nC_theta(uv) = fracleft 1+(theta-1)(u+v)right- sqrt1+(theta-1)(u+v)^2-4uvtheta(theta-1)2(theta-1)\n\nand for theta = 1     math \\C_{1}(u,v) = uv\n\nIt has a few special cases: \n\nWhen θ = 0, is is the MCopula (Upper Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the WCopula (Lower Frechet-Hoeffding bound)\n\nMore details about Plackett Copula are found in:\n\nJoe, H. (2014). Dependence modeling with copulas. CRC press, Page.164\n\nDetails about the algorithm to generate copula samples can be seen in the following references:\n\nJohnson, Mark E. Multivariate statistical simulation:\nA guide to selecting and generating continuous multivariate distributions.\nVol. 192. John Wiley & Sons, 1987. Page 193.\nNelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.38.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.SklarDist-reference","page":"Reference","title":"Copulas.SklarDist","text":"SklarDist{CT,TplMargins}\n\nFields:\n\nC::CT - The copula\nm::TplMargins - a Tuple representing the marginal distributions\n\nConstructor\n\nSklarDist(C,m)\n\nThis function allows to construct a random vector specified, through the Sklar Theorem, by its marginals and its copula separately. See Sklar's theorem. \n\nThe obtain random vector follows Distributions.jl's API and can be sampled, pdf and cdf can be evaluated, etc... We even provide a fit function. See the folowing exemple code : \n\nusing Copulas, Distributions, Random\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution\n\n# This generates a (3,1000)-sized dataset from the multivariate distribution D\nsimu = rand(D,1000)\n\n# While the following estimates the parameters of the model from a dataset: \nD̂ = fit(SklarDist{FrankCopula,Tuple{Gamma,Normal,LogNormal}}, simu)\n# Increase the number of observations to get a beter fit (or not?)  \n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.SurvivalCopula-reference","page":"Reference","title":"Copulas.SurvivalCopula","text":"SurvivalCopula{d,CT,VI}\n\nConstructor\n\nSurvivalCopula(C,indices)\n\nComputes the survival version of any copula on given indices. From a copula C in dimension d, and some indices i_1i_k in 1d, the survival copula associated simply reverses its arguments on chosen indices. For exemple, for d=4 and indices (23), we have: \n\nS(u_1u_4) = C(u_11-u_21-u3u_4)\n\nThis constructor allows to derive new \"survival\" families. For exemple, in bivariate cases, this allows to do \"rotations\". The obtained models can be treated as the starting one, i.e. as a random vector in [0,1]^d with uniforms marginals. \n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.TCopula-reference","page":"Reference","title":"Copulas.TCopula","text":"TCopula{d,MT}\n\nFields:\n\ndf::Int - number of degree of freedom\nΣ::MT - covariance matrix\n\nConstructor\n\nTCopula(df,Σ)\n\nThe Student's T Copula is the  copula of a Multivariate Student distribution. It is constructed as : \n\nC(mathbfx boldsymbolnSigma) = F_nSigma(F_nSigmai^-1(x_i)iin 1d)\n\nwhere F_nSigma is a cdf of a multivariate student random vector with covariance matrix Sigma and n degrees of freedom. and F_{n,\\Sigma,i} is the ith marignal cdf. \n\nIt can be constructed in Julia via:  \n\nC = TCopula(n,Σ)\n\nThe random number generation works as expected:\n\nrand(C,1000)\n# or\nRandom.rand!(C,u)\n\nAnd yo can fit the distribution via : \n\nfit(TCopula,data)\n\nExcept that currently it does not work since fit(Distributions.MvTDist,data) does not dispatch. \n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.WCopula-reference","page":"Reference","title":"Copulas.WCopula","text":"WCopula{d}\n\nConstructor\n\nWCopula(d)\n\nThe Lower Frechet-Hoeffding bound is the copula with the lowest value among all copulas. Note that W is only a proper copula when d=1, in greater dimensions it is still the (pointwise) lower bound, but not a copula anymore. For any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas, although this link is not represetned by the hierachy of types in the package for preformances reasons. \n\n\n\n\n\n","category":"type"},{"location":"reference/#Copulas.WilliamsonCopula-reference","page":"Reference","title":"Copulas.WilliamsonCopula","text":"WilliamsonCopula{d,Tϕ,TX}\n\nFields:     - ϕ::Tϕ – a function representing the archimedean generator.     - X::TX – a random variable that represents its williamson d-transform\n\nConstructors\n\nWilliamsonCopula(X::Distributions.UnivariateDistribution, d)\nWilliamsonCopula(ϕ::Function, d)\nWilliamsonCopula(ϕ::Function, X::Distributions.UnivariateDistribution, d)\n\nThe WilliamsonCopula is the barebone Archimedean Copula that directly leverages the Williamson transform and inverse transform (in their greatest generalities), that are implemented in WilliamsonTransforms.jl. You can construct it by providing the Williamson-d-tranform as a (non-negative) random variable X::Distributions.UnivariateDistribution, or by providing the d-monotone generator ϕ::Function as a function from mathbb R_+ to 01, decreasing and d-monotone. The other component will be computed automatically. You also have the option to provide both, which will probably be faster if you have an analytical expression for both. \n\nAbout WilliamsonCopula(X::Distributions.UnivariateDistribution, d): For a univariate non-negative random variable X, with cumulative distribution function F and an integer dge 2, the Williamson-d-transform of X is the real function supported on 0infty given by:\n\nphi(t) = 𝒲_d(X)(t) = int_t^infty left(1 - fractxright)^d-1 dF(x) = mathbb Eleft( (1 - fractX)^d-1_+right) mathbb 1_t  0 + left(1 - F(0)right)mathbb 1_t 0\n\nThis function has several properties: \n\nWe have that phi(0) = 1 and phi(Inf) = 0\nphi is d-2 times derivable, and the signs of its derivatives alternates : forall k in 0d-2 (-1)^k phi^(k) ge 0.\nphi^(d-2) is convex.\n\nThese properties makes this function what is called an archimedean generator, able to generate archimedean copulas in dimensions up to d. \n\nAbout WilliamsonCopula(ϕ::Function, d): On the other hand, WilliamsonCopula(ϕ::Function, d) Computes the inverse Williamson d-transform of the d-monotone archimedean generator ϕ. \n\nA d-monotone archimedean generator is a function phi on mathbb R_+ that has these three properties:\n\nphi(0) = 1 and phi(Inf) = 0\nphi is d-2 times derivable, and the signs of its derivatives alternates : forall k in 0d-2 (-1)^k phi^(k) ge 0.\nphi^(d-2) is convex.\n\nFor such a function phi, the inverse Williamson-d-transform of phi is the cumulative distribution function F of a non-negative random variable X, defined by : \n\nF(x) = 𝒲_d^-1(phi)(x) = 1 - frac(-x)^d-1 phi_+^(d-1)(x)k - sum_k=0^d-2 frac(-x)^k phi^(k)(x)k\n\nWe return this cumulative distribution function in the form of the corresponding random variable <:Distributions.ContinuousUnivariateDistribution from Distributions.jl. You may then compute :      - The cdf via Distributions.cdf     - The pdf via Distributions.pdf and the logpdf via Distributions.logpdf     - Samples from the distribution via rand(X,n)\n\nReferences:      Williamson, R. E. (1956). Multiply monotone functions and their Laplace transforms. Duke Math. J. 23 189–207. MR0077581     McNeil, Alexander J., and Johanna Nešlehová. \"Multivariate Archimedean copulas, d-monotone functions and ℓ 1-norm symmetric distributions.\" (2009): 3059-3097.\n\n\n\n\n\n","category":"type"},{"location":"sklar/fit_of_compound_distribution/","page":"Usecases Exemples","title":"Usecases Exemples","text":"CurrentModule = Copulas","category":"page"},{"location":"sklar/fit_of_compound_distribution/#Usecases-Exemples","page":"Usecases Exemples","title":"Usecases Exemples","text":"","category":"section"},{"location":"sklar/fit_of_compound_distribution/#Fitting-compound-distributions","page":"Usecases Exemples","title":"Fitting compound distributions","text":"","category":"section"},{"location":"sklar/fit_of_compound_distribution/","page":"Usecases Exemples","title":"Usecases Exemples","text":"...","category":"page"},{"location":"sklar/fit_of_compound_distribution/#Turing.jl-models","page":"Usecases Exemples","title":"Turing.jl models","text":"","category":"section"},{"location":"sklar/fit_of_compound_distribution/","page":"Usecases Exemples","title":"Usecases Exemples","text":"...","category":"page"},{"location":"sklar/fit_of_compound_distribution/","page":"Usecases Exemples","title":"Usecases Exemples","text":"other stuff ? ","category":"page"},{"location":"sklar/sklars_theorem/","page":"Sklar's theorem","title":"Sklar's theorem","text":"CurrentModule = Copulas","category":"page"},{"location":"sklar/sklars_theorem/#Sklar's-theorem","page":"Sklar's theorem","title":"Sklar's theorem","text":"","category":"section"},{"location":"sklar/sklars_theorem/","page":"Sklar's theorem","title":"Sklar's theorem","text":"The Sklar Theorem allows to compute distributions, satisfying the Distriutions.jl API, thaty are \"compound\" with a given copula and given marginals. ","category":"page"},{"location":"sklar/sklars_theorem/","page":"Sklar's theorem","title":"Sklar's theorem","text":"bla bla bla","category":"page"},{"location":"elliptical/available_models/","page":"Available elliptical copulas","title":"Available elliptical copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"elliptical/available_models/#Available-elliptical-copulas","page":"Available elliptical copulas","title":"Available elliptical copulas","text":"","category":"section"},{"location":"elliptical/available_models/#Gaussian","page":"Available elliptical copulas","title":"Gaussian","text":"","category":"section"},{"location":"elliptical/available_models/","page":"Available elliptical copulas","title":"Available elliptical copulas","text":"GaussianCopula","category":"page"},{"location":"elliptical/available_models/#Copulas.GaussianCopula","page":"Available elliptical copulas","title":"Copulas.GaussianCopula","text":"GaussianCopula{d,MT}\n\nFields:\n\nΣ::MT - covariance matrix\n\nConstructor\n\nGaussianCopula(Σ)\n\nThe Gaussian Copula is the  copula of a Multivariate normal distribution. It is constructed as : \n\nC(mathbfx boldsymbolSigma) = F_Sigma(F_Sigmai^-1(x_i)iin 1d)\n\nwhere F_Sigma is a cdf of a gaussina random vector and F_{\\Sigma,i} is the ith marignal cdf, while `Sigma is the covariance matrix. \n\nIt can be constructed in Julia via:  \n\nC = GaussianCopula(Σ)\n\nThe random number generation works as expected:\n\nrand(C,1000)\n# or\nRandom.rand!(C,u)\n\nAnd yo can fit the distribution via : \n\nfit(GaussianCopula,data)\n\n\n\n\n\n","category":"type"},{"location":"elliptical/available_models/#Student's-T","page":"Available elliptical copulas","title":"Student's T","text":"","category":"section"},{"location":"elliptical/available_models/","page":"Available elliptical copulas","title":"Available elliptical copulas","text":"TCopula","category":"page"},{"location":"elliptical/available_models/#Copulas.TCopula","page":"Available elliptical copulas","title":"Copulas.TCopula","text":"TCopula{d,MT}\n\nFields:\n\ndf::Int - number of degree of freedom\nΣ::MT - covariance matrix\n\nConstructor\n\nTCopula(df,Σ)\n\nThe Student's T Copula is the  copula of a Multivariate Student distribution. It is constructed as : \n\nC(mathbfx boldsymbolnSigma) = F_nSigma(F_nSigmai^-1(x_i)iin 1d)\n\nwhere F_nSigma is a cdf of a multivariate student random vector with covariance matrix Sigma and n degrees of freedom. and F_{n,\\Sigma,i} is the ith marignal cdf. \n\nIt can be constructed in Julia via:  \n\nC = TCopula(n,Σ)\n\nThe random number generation works as expected:\n\nrand(C,1000)\n# or\nRandom.rand!(C,u)\n\nAnd yo can fit the distribution via : \n\nfit(TCopula,data)\n\nExcept that currently it does not work since fit(Distributions.MvTDist,data) does not dispatch. \n\n\n\n\n\n","category":"type"},{"location":"miscellaneous/","page":"Miscellaneous Copulas","title":"Miscellaneous Copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"miscellaneous/#Miscellaneous-Copulas","page":"Miscellaneous Copulas","title":"Miscellaneous Copulas","text":"","category":"section"},{"location":"miscellaneous/","page":"Miscellaneous Copulas","title":"Miscellaneous Copulas","text":"A few copulas, while necessary in certain cases and really usefull, are hard to classify. We gether them here for simplicity. ","category":"page"},{"location":"miscellaneous/#Frechet-Hoeffding-bounds","page":"Miscellaneous Copulas","title":"Frechet-Hoeffding bounds","text":"","category":"section"},{"location":"miscellaneous/","page":"Miscellaneous Copulas","title":"Miscellaneous Copulas","text":"The Frechet-Hoeffding bounds are availiable through the following functions: ","category":"page"},{"location":"miscellaneous/","page":"Miscellaneous Copulas","title":"Miscellaneous Copulas","text":"MCopula","category":"page"},{"location":"miscellaneous/#Copulas.MCopula","page":"Miscellaneous Copulas","title":"Copulas.MCopula","text":"MCopula{d}\n\nConstructor\n\nMCopula(d)\n\nThe Upper Frechet-Hoeffding bound is the copula with the greatest value among all copulas. It correspond to comonotone random vectors. \n\nFor any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas, although this link is not represetned by the hierachy of types in the package for preformances reasons. \n\n\n\n\n\n","category":"type"},{"location":"miscellaneous/","page":"Miscellaneous Copulas","title":"Miscellaneous Copulas","text":"WCopula","category":"page"},{"location":"miscellaneous/#Copulas.WCopula","page":"Miscellaneous Copulas","title":"Copulas.WCopula","text":"WCopula{d}\n\nConstructor\n\nWCopula(d)\n\nThe Lower Frechet-Hoeffding bound is the copula with the lowest value among all copulas. Note that W is only a proper copula when d=1, in greater dimensions it is still the (pointwise) lower bound, but not a copula anymore. For any copula C, if W and M are (respectively) the lower and uppder Frechet-Hoeffding bounds, we have that for all mathbfu in 01^d,\n\nW(mathbfu) le C(mathbfu) le M(mathbfu)\n\nThe two Frechet-Hoeffding bounds are also Archimedean copulas, although this link is not represetned by the hierachy of types in the package for preformances reasons. \n\n\n\n\n\n","category":"type"},{"location":"miscellaneous/#Plackett-Copula","page":"Miscellaneous Copulas","title":"Plackett Copula","text":"","category":"section"},{"location":"miscellaneous/","page":"Miscellaneous Copulas","title":"Miscellaneous Copulas","text":"PlackettCopula","category":"page"},{"location":"miscellaneous/#Copulas.PlackettCopula","page":"Miscellaneous Copulas","title":"Copulas.PlackettCopula","text":"PlackettCopula{P}\n\nFields:     - θ::Real - parameter\n\nConstructor\n\nPlackettCopula(θ)\n\nParameterized by theta  0 The Plackett copula is\n\nC_theta(uv) = fracleft 1+(theta-1)(u+v)right- sqrt1+(theta-1)(u+v)^2-4uvtheta(theta-1)2(theta-1)\n\nand for theta = 1     math \\C_{1}(u,v) = uv\n\nIt has a few special cases: \n\nWhen θ = 0, is is the MCopula (Upper Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the WCopula (Lower Frechet-Hoeffding bound)\n\nMore details about Plackett Copula are found in:\n\nJoe, H. (2014). Dependence modeling with copulas. CRC press, Page.164\n\nDetails about the algorithm to generate copula samples can be seen in the following references:\n\nJohnson, Mark E. Multivariate statistical simulation:\nA guide to selecting and generating continuous multivariate distributions.\nVol. 192. John Wiley & Sons, 1987. Page 193.\nNelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.38.\n\n\n\n\n\n","category":"type"},{"location":"miscellaneous/#Survival-Copula","page":"Miscellaneous Copulas","title":"Survival Copula","text":"","category":"section"},{"location":"miscellaneous/","page":"Miscellaneous Copulas","title":"Miscellaneous Copulas","text":"SurvivalCopula","category":"page"},{"location":"miscellaneous/#Copulas.SurvivalCopula","page":"Miscellaneous Copulas","title":"Copulas.SurvivalCopula","text":"SurvivalCopula{d,CT,VI}\n\nConstructor\n\nSurvivalCopula(C,indices)\n\nComputes the survival version of any copula on given indices. From a copula C in dimension d, and some indices i_1i_k in 1d, the survival copula associated simply reverses its arguments on chosen indices. For exemple, for d=4 and indices (23), we have: \n\nS(u_1u_4) = C(u_11-u_21-u3u_4)\n\nThis constructor allows to derive new \"survival\" families. For exemple, in bivariate cases, this allows to do \"rotations\". The obtained models can be treated as the starting one, i.e. as a random vector in [0,1]^d with uniforms marginals. \n\n\n\n\n\n","category":"type"},{"location":"miscellaneous/#Empirical-Copulas","page":"Miscellaneous Copulas","title":"Empirical Copulas","text":"","category":"section"},{"location":"miscellaneous/","page":"Miscellaneous Copulas","title":"Miscellaneous Copulas","text":"EmpiricalCopula","category":"page"},{"location":"miscellaneous/#Copulas.EmpiricalCopula","page":"Miscellaneous Copulas","title":"Copulas.EmpiricalCopula","text":"EmpiricalCopula{d,MT}\n\nFields:\n\nu::MT - the matrix of observations. \n\nConstructor\n\nEmpiricalCopula(u;pseudos=true)\n\nThe EmpiricalCopula in dimension d is parameterized by a pseudo-data matrix wich should have shape (d,N). Its expression is given as :  \n\nC(mathbf x) = frac1Nsum_i=1^n mathbf 1_mathbf u_i le mathbf x\n\nThis function is very practical, be be aware that this is not a true copula (since mathbf u are only pseudo-observations). The constructor allows you to pass dirctly pseudo-observations (the default) or will compute them for you. You can then compute the cdf of the copula, and sample it through the standard interface.\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/","page":"Available Archimedean copulas","title":"Available Archimedean copulas","text":"CurrentModule = Copulas","category":"page"},{"location":"archimedean/available_models/#Available-Archimedean-copulas","page":"Available Archimedean copulas","title":"Available Archimedean copulas","text":"","category":"section"},{"location":"archimedean/available_models/#Independence-Copula","page":"Available Archimedean copulas","title":"Independence Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean copulas","title":"Available Archimedean copulas","text":"IndependentCopula","category":"page"},{"location":"archimedean/available_models/#Copulas.IndependentCopula","page":"Available Archimedean copulas","title":"Copulas.IndependentCopula","text":"IndependentCopula{d,T}\n\nConstructor\n\nIndependentCopula(d, θ)\n\nThe Independent Copula in dimension d is the simplest copula, that has the form : \n\nC(mathbfx) = prod_i=1^d x_i\n\nIt happends to be an Archimedean Copula, with generator : \n\nphi(t) = exp-t\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Clayton-Copula","page":"Available Archimedean copulas","title":"Clayton Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean copulas","title":"Available Archimedean copulas","text":"ClaytonCopula","category":"page"},{"location":"archimedean/available_models/#Copulas.ClaytonCopula","page":"Available Archimedean copulas","title":"Copulas.ClaytonCopula","text":"ClaytonCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nClaytonCopula(d, θ)\n\nThe Clayton copula in dimension d is parameterized by theta in -1(d-1)infty). It is an Archimedean copula with generator : \n\nphi(t) = left(1+mathrmsign(theta)*tright)^-1frac1theta\n\nIt has a few special cases: \n\nWhen θ = -1/(d-1), it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 0, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Frank-Copula","page":"Available Archimedean copulas","title":"Frank Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean copulas","title":"Available Archimedean copulas","text":"FrankCopula","category":"page"},{"location":"archimedean/available_models/#Copulas.FrankCopula","page":"Available Archimedean copulas","title":"Copulas.FrankCopula","text":"FrankCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nFrankCopula(d, θ)\n\nThe Frank copula in dimension d is parameterized by theta in -inftyinfty). It is an Archimedean copula with generator : \n\nphi(t) = -fraclogleft(1+e^-t(e^-theta-1)right)\theta\n\nIt has a few special cases: \n\nWhen θ = -∞, it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Gumbel-Copula","page":"Available Archimedean copulas","title":"Gumbel Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean copulas","title":"Available Archimedean copulas","text":"GumbelCopula","category":"page"},{"location":"archimedean/available_models/#Copulas.GumbelCopula","page":"Available Archimedean copulas","title":"Copulas.GumbelCopula","text":"GumbelCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelCopula(d, θ)\n\nThe Gumbel copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = exp-t^frac1θ\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Ali-Mikhail-Haq-Copula","page":"Available Archimedean copulas","title":"Ali-Mikhail-Haq Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean copulas","title":"Available Archimedean copulas","text":"AMHCopula","category":"page"},{"location":"archimedean/available_models/#Copulas.AMHCopula","page":"Available Archimedean copulas","title":"Copulas.AMHCopula","text":"AMHCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nAMHCopula(d, θ)\n\nThe AMH copula in dimension d is parameterized by theta in -11). It is an Archimedean copula with generator : \n\nphi(t) = 1 - frac1-thetae^-t-theta\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Joe-Copula","page":"Available Archimedean copulas","title":"Joe Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean copulas","title":"Available Archimedean copulas","text":"JoeCopula","category":"page"},{"location":"archimedean/available_models/#Copulas.JoeCopula","page":"Available Archimedean copulas","title":"Copulas.JoeCopula","text":"JoeCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nJoeCopula(d, θ)\n\nThe Joe copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = 1 - left(1 - e^-tright)^frac1theta\n\nIt has a few special cases: \n\nWhen θ = 1, it is the IndependentCopula\nWhen θ = ∞, is is the MCopula (Upper Frechet-Hoeffding bound)\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Gumbel-Barnett-Copula","page":"Available Archimedean copulas","title":"Gumbel-Barnett Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean copulas","title":"Available Archimedean copulas","text":"GumbelBarnettCopula","category":"page"},{"location":"archimedean/available_models/#Copulas.GumbelBarnettCopula","page":"Available Archimedean copulas","title":"Copulas.GumbelBarnettCopula","text":"GumbelBarnettCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelBarnettCopula(d, θ)\n\nThe Gumbel-Barnett copula is an archimdean copula with generator:\n\nphi(t) = expθ^-1(1-e^t) 0 leq theta leq 1\n\nMore details about Gumbel-Barnett copula are found in:\n\nJoe, H. (2014). Dependence modeling with copulas. CRC press, Page.437\n\nIt has a few special cases: \n\nWhen θ = 0, it is the IndependentCopula\n\n\n\n\n\n","category":"type"},{"location":"archimedean/available_models/#Inverse-Gaussian-Copula","page":"Available Archimedean copulas","title":"Inverse-Gaussian Copula","text":"","category":"section"},{"location":"archimedean/available_models/","page":"Available Archimedean copulas","title":"Available Archimedean copulas","text":"InvGaussianCopula","category":"page"},{"location":"archimedean/available_models/#Copulas.InvGaussianCopula","page":"Available Archimedean copulas","title":"Copulas.InvGaussianCopula","text":"InvGaussianCopulaCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nInvGaussianCopula(d, θ)\n\nThe Inverse Gaussian copula is an archimdean copula with generator:\n\nphi(t) = exp(1-sqrt1+2θ^2t)θ theta  0\n\nMore details about Inverse Gaussian Archimedean copula are found in :     Mai, Jan-Frederik, and Matthias Scherer.      Simulating copulas: stochastic models, sampling algorithms, and applications. Vol. 6. # N/A, 2017. Page 74.\n\nIt has no known special cases.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Copulas","category":"page"},{"location":"#Julia-Package-Copulas.jl","page":"Home","title":"Julia Package Copulas.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for the Julia package Copulas.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copulas","category":"page"},{"location":"#Copulas.Copulas","page":"Home","title":"Copulas.Copulas","text":"<h1 align=center>Copulas.jl</h1> <p align=center><i>A fully Distributions.jl-compliant copula package</i></p>\n\n<p align=center>     <a href=\"https://lrnv.github.io/Copulas.jl/stable\"><img src=\"https://img.shields.io/badge/docs-stable-blue.svg\" alt=\"Stable\" /></a>     <a href=\"https://lrnv.github.io/Copulas.jl/dev\"><img src=\"https://img.shields.io/badge/docs-dev-blue.svg\" alt=\"Dev\" /></a> <br />     <a href=\"https://www.repostatus.org/#active\"><img src=\"https://www.repostatus.org/badges/latest/active.svg\" alt=\"Project Status: Active – The project has reached a stable, usable state and is being actively developed.\" /></a>      <a href=\"https://github.com/lrnv/Copulas.jl/actions/workflows/CI.yml?query=branch%3Amain\"><img src=\"https://github.com/lrnv/Copulas.jl/actions/workflows/CI.yml/badge.svg?branch=main\" alt=\"Build Status\" /></a> <br />      <a href=\"https://codecov.io/gh/lrnv/Copulas.jl\"><img src=\"https://codecov.io/gh/lrnv/Copulas.jl/branch/main/graph/badge.svg\"/></a>      <a href=\"https://github.com/JuliaTesting/Aqua.jl\"><img src=\"https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg\" alt=\"Aqua QA\" /></a>     <!– <a href=\"https://benchmark.tansongchen.com/TaylorDiff.jl\"><img src=\"https://img.shields.io/buildkite/2c801728055463e7c8baeeb3cc187b964587235a49b3ed39ab/main.svg?label=benchmark\" alt=\"Benchmark Status\" /></a> –> <br />     <a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"License: MIT\" /></a>     <a href=\"https://zenodo.org/badge/latestdoi/456485213\"><img src=\"https://zenodo.org/badge/456485213.svg\" alt=\"DOI\" /></a> <br />     <a href=\"https://github.com/SciML/ColPrac\"><img src=\"https://img.shields.io/badge/contributor's%20guide-ColPrac-blueviolet\" alt=\"ColPrac: Contributor's Guide on Collaborative Practices for Community Packages\" /></a>     <a href=\"https://github.com/invenia/BlueStyle\"><img src=\"https://img.shields.io/badge/code%20style-blue-4495d1.svg\" alt=\"Code Style: Blue\" /></a> </p>\n\n<!– <p align=center>   <a href=\"https://github.com/codespaces/new?hidereposelect=true&ref=main&repo=563952901&machine=standardLinux32gb&devcontainerpath=.devcontainer%2Fdevcontainer.json&location=EastUshttps://github.com/codespaces/new?hidereposelect=true&ref=main&repo=563952901&machine=standardLinux32gb&devcontainerpath=.devcontainer%2Fdevcontainer.json&location=EastUs\"><img src=\"https://github.com/codespaces/badge.svg\" alt=\"Open in GitHub Codespaces\" /></a> </p> –>\n\nCopulas.jl brings most standard copula features into native Julia: random number generation, pdf and cdf, fitting, copula-based multivariate distributions through Sklar's theorem, etc. Since copulas are distribution functions, we fully comply with the Distributions.jl API. This complience allows interoperability with other packages based on this API such as, e.g., Turing.jl.\n\nUsually, people that use and work with copulas turn to R, because of the amazing R package copula. While it is still well maintained and regularly updated, the R poackage copula is a mixture of obscure, heavily optimized C code and more standard R cde, which makes it a complicated code base for readability, extensibility, reliability and maintenance.\n\nThis is an attempt to provide a very light, fast, reliable and maintainable copula implementation in native Julia. Among others, one of the notable benefits of such a native implementatioon is the floating point type agnosticity, i.e. compatibility with BigFloat, DoubleFloats, MultiFloats and other kind of numbers.\n\nThe package revolves around two main types: \n\nCopula, an abstract mother type for all the copulas in the package\nSklarDist, a distribution type that allows construction of a multivariate distribution by specifying the copula and the marginals through Sklar's theorem. \n\nWarning: This is fairly untested and experimental work and the API might change without notice.\n\nInstalation\n\n] add Copulas\n\nUsage\n\nThe API contains random number generation, cdf and pdf evaluation, and the fit function from Distributions.jl. A typical use case might look like this: \n\nusing Copulas, Distributions, Random\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution\n\n# This generates a (3,1000)-sized dataset from the multivariate distribution D\nsimu = rand(D,1000)\n\n# While the following estimates the parameters of the model from a dataset: \nD̂ = fit(SklarDist{FrankCopula,Tuple{Gamma,Normal,LogNormal}}, simu)\n# Increase the number of observations to get a beter fit (or not?)  \n\nAvailable copula families are:\n\nEllipticalCopulas: GaussianCopula and TCopula\nArchimedeanCopula: WilliamsonCopula (for any generator), but also ClaytonCopula,FrankCopula, AMHCopula, JoeCopula, GumbelCopula, supporting the full ranges in every dimensions (e.g. ClaytonCopula can be sampled with negative dependence in any dimension, not just d=2). \nWCopula, IndependentCopula and MCopula, which are Fréchet-Hoeffding bounds,\nPlackettCopula, see ref?\nEmpiricalCopula to follow closely a given dataset.\n\nThe next ones to be implemented will probably be: \n\nExtreme values copulas. \nNested archimedeans (for any generators, with automatic nesting conditions checking). \nBernstein copula and more general Beta copula as smoothing of the Empirical copula. \nCheckerboardCopula (and more generally PatchworkCopula)\n\nAdding a new ArchimedeanCopula is very easy. The Clayton implementation is as short as: \n\nstruct ClaytonCopula{d,T} <: Copulas.ArchimedeanCopula{d}\n    θ::T\nend\nClaytonCopula(d,θ)            = ClaytonCopula{d,typeof(θ)}(θ)     # Constructor\nϕ(C::ClaytonCopula, t)        = (1+sign(C.θ)*t)^(-1/C.θ)          # Generator\nϕ⁻¹(C::ClaytonCopula,t)       = sign(C.θ)*(t^(-C.θ)-1)            # Inverse Generator\nτ(C::ClaytonCopula)           = C.θ/(C.θ+2)                       # θ -> τ\nτ⁻¹(::Type{ClaytonCopula},τ)  = 2τ/(1-τ)                          # τ -> θ\nwilliamson_dist(C::ClaytonCopula{d,T}) where {d,T} = WilliamsonFromFrailty(Distributions.Gamma(1/C.θ,1),d) # Radial distribution\n\nThe Archimedean API is modular: \n\nTo sample an archimedean, only ϕ is required. Indeed, the williamson_dist has a generic fallback that uses WilliamsonTransforms.jl for any generator. Note however that providing the williamson_dist yourself if you know it will allow sampling to be an order of magnitude faster.\nTo evaluate the cdf and (log-)density in any dimension, only ϕ and ϕ⁻¹ are needed.\nCurrently, to fit the copula τ⁻¹ is needed as we use the inverse tau moment method. But we plan on also implementing inverse rho and MLE (density needed). \nNote that the generator ϕ follows the convention ϕ(0)=1, while others (e.g., https://en.wikipedia.org/wiki/Copula(probabilitytheory)#Archimedean_copulas) use ϕ⁻¹ as the generator.\n\nPlease take a look at the documentation for more details. \n\nDev Roadmap\n\nNext:\n\n[ ] More documentation and tests for the current implementation. \n[ ] Docs: show how to use the WilliamsonCopula to implement generic archimedeans.\n[ ] Give the user the choice of fitting method via fit(dist,data; method=\"MLE\") or fit(dist,data; method=\"itau\") or fit(dist,data; method=\"irho\").\n[ ] Fitting a generic archimedean with an empirically produced generarator\n[ ] Automatic checking of generator d-monotonicity ? Dunno if it is even possible. \n\nMaybe later:\n\n[ ] NestedArchimedean, with automatic checking of nesting conditions for generators. \n[ ] Vines?\n[ ] Archimax ?\n[ ] BernsteinCopula and BetaCopula could also be implemented. \n[ ] PatchworkCopula and CheckerboardCopula: could be nice things to have :)\n[ ] Goodness of fits tests ?\n\nContributions are welcome\n\nIf you want to contribute to the package, found a bug in it or simply want to chat, do not hesitate to open an issue on this repo. \n\nCitation\n\n@software{oskar_laverny_2023_10084669,\n  author       = {Oskar Laverny},\n  title        = {Copulas.jl: A fully `Distributions.jl`-compliant copula package},\n  year         = 2022+,\n  doi          = {10.5281/zenodo.6652672},\n  url          = {https://doi.org/10.5281/zenodo.6652672}\n}\n\n\n\n\n\n","category":"module"}]
}
